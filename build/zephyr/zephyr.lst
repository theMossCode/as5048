
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 15 00 20 c5 2a 00 00 7b 6d 00 00 99 2a 00 00     ... .*..{m...*..
  10:	99 2a 00 00 99 2a 00 00 99 2a 00 00 00 00 00 00     .*...*...*......
	...
  2c:	d1 23 00 00 99 2a 00 00 00 00 00 00 7d 23 00 00     .#...*......}#..
  3c:	99 2a 00 00                                         .*..

00000040 <_irq_vector_table>:
  40:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  50:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  60:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  70:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  80:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  90:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  a0:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  b0:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  c0:	81 24 00 00 81 24 00 00 81 24 00 00 81 24 00 00     .$...$...$...$..
  d0:	81 24 00 00 81 24 00 00 81 24 00 00                 .$...$...$..

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b80c 	b.w	10c <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f808 	bl	110 <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__aeabi_idiv0>:
     10c:	4770      	bx	lr
     10e:	bf00      	nop

00000110 <__udivmoddi4>:
     110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     114:	4607      	mov	r7, r0
     116:	468c      	mov	ip, r1
     118:	4608      	mov	r0, r1
     11a:	9e09      	ldr	r6, [sp, #36]	; 0x24
     11c:	4615      	mov	r5, r2
     11e:	463c      	mov	r4, r7
     120:	4619      	mov	r1, r3
     122:	2b00      	cmp	r3, #0
     124:	f040 80c6 	bne.w	2b4 <CONFIG_FLASH_SIZE+0xb4>
     128:	4282      	cmp	r2, r0
     12a:	fab2 f782 	clz	r7, r2
     12e:	d946      	bls.n	1be <__data_size+0x2>
     130:	b14f      	cbz	r7, 146 <CONFIG_IDLE_STACK_SIZE+0x6>
     132:	f1c7 0e20 	rsb	lr, r7, #32
     136:	fa24 fe0e 	lsr.w	lr, r4, lr
     13a:	fa00 f307 	lsl.w	r3, r0, r7
     13e:	40bd      	lsls	r5, r7
     140:	ea4e 0c03 	orr.w	ip, lr, r3
     144:	40bc      	lsls	r4, r7
     146:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14a:	fa1f fe85 	uxth.w	lr, r5
     14e:	fbbc f9f8 	udiv	r9, ip, r8
     152:	0c22      	lsrs	r2, r4, #16
     154:	fb08 c319 	mls	r3, r8, r9, ip
     158:	fb09 fa0e 	mul.w	sl, r9, lr
     15c:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     160:	459a      	cmp	sl, r3
     162:	d928      	bls.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     164:	18eb      	adds	r3, r5, r3
     166:	f109 30ff 	add.w	r0, r9, #4294967295
     16a:	d204      	bcs.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     16c:	459a      	cmp	sl, r3
     16e:	d902      	bls.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     170:	f1a9 0002 	sub.w	r0, r9, #2
     174:	442b      	add	r3, r5
     176:	eba3 030a 	sub.w	r3, r3, sl
     17a:	b2a4      	uxth	r4, r4
     17c:	fbb3 f2f8 	udiv	r2, r3, r8
     180:	fb08 3312 	mls	r3, r8, r2, r3
     184:	fb02 fe0e 	mul.w	lr, r2, lr
     188:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     18c:	45a6      	cmp	lr, r4
     18e:	d914      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     190:	192c      	adds	r4, r5, r4
     192:	f102 33ff 	add.w	r3, r2, #4294967295
     196:	d203      	bcs.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     198:	45a6      	cmp	lr, r4
     19a:	d901      	bls.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     19c:	1e93      	subs	r3, r2, #2
     19e:	442c      	add	r4, r5
     1a0:	eba4 040e 	sub.w	r4, r4, lr
     1a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1a8:	b11e      	cbz	r6, 1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     1aa:	40fc      	lsrs	r4, r7
     1ac:	2300      	movs	r3, #0
     1ae:	6034      	str	r4, [r6, #0]
     1b0:	6073      	str	r3, [r6, #4]
     1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1b6:	4648      	mov	r0, r9
     1b8:	e7dd      	b.n	176 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x9>
     1ba:	4613      	mov	r3, r2
     1bc:	e7f0      	b.n	1a0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x33>
     1be:	b902      	cbnz	r2, 1c2 <__data_size+0x6>
     1c0:	deff      	udf	#255	; 0xff
     1c2:	bb87      	cbnz	r7, 226 <CONFIG_FLASH_SIZE+0x26>
     1c4:	1a83      	subs	r3, r0, r2
     1c6:	2101      	movs	r1, #1
     1c8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1cc:	b2aa      	uxth	r2, r5
     1ce:	fbb3 fcfe 	udiv	ip, r3, lr
     1d2:	0c20      	lsrs	r0, r4, #16
     1d4:	fb0e 331c 	mls	r3, lr, ip, r3
     1d8:	fb0c f802 	mul.w	r8, ip, r2
     1dc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e0:	4598      	cmp	r8, r3
     1e2:	d963      	bls.n	2ac <CONFIG_FLASH_SIZE+0xac>
     1e4:	18eb      	adds	r3, r5, r3
     1e6:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ea:	d204      	bcs.n	1f6 <__data_size+0x3a>
     1ec:	4598      	cmp	r8, r3
     1ee:	d902      	bls.n	1f6 <__data_size+0x3a>
     1f0:	f1ac 0002 	sub.w	r0, ip, #2
     1f4:	442b      	add	r3, r5
     1f6:	eba3 0308 	sub.w	r3, r3, r8
     1fa:	b2a4      	uxth	r4, r4
     1fc:	fbb3 fcfe 	udiv	ip, r3, lr
     200:	fb0e 331c 	mls	r3, lr, ip, r3
     204:	fb0c f202 	mul.w	r2, ip, r2
     208:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     20c:	42a2      	cmp	r2, r4
     20e:	d94f      	bls.n	2b0 <CONFIG_FLASH_SIZE+0xb0>
     210:	192c      	adds	r4, r5, r4
     212:	f10c 33ff 	add.w	r3, ip, #4294967295
     216:	d204      	bcs.n	222 <CONFIG_FLASH_SIZE+0x22>
     218:	42a2      	cmp	r2, r4
     21a:	d902      	bls.n	222 <CONFIG_FLASH_SIZE+0x22>
     21c:	f1ac 0302 	sub.w	r3, ip, #2
     220:	442c      	add	r4, r5
     222:	1aa4      	subs	r4, r4, r2
     224:	e7be      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     226:	f1c7 0c20 	rsb	ip, r7, #32
     22a:	fa20 f80c 	lsr.w	r8, r0, ip
     22e:	fa00 f307 	lsl.w	r3, r0, r7
     232:	fa24 fc0c 	lsr.w	ip, r4, ip
     236:	40bd      	lsls	r5, r7
     238:	ea4c 0203 	orr.w	r2, ip, r3
     23c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     240:	b2ab      	uxth	r3, r5
     242:	fbb8 fcfe 	udiv	ip, r8, lr
     246:	0c11      	lsrs	r1, r2, #16
     248:	fb0e 801c 	mls	r0, lr, ip, r8
     24c:	fb0c f903 	mul.w	r9, ip, r3
     250:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     254:	4581      	cmp	r9, r0
     256:	fa04 f407 	lsl.w	r4, r4, r7
     25a:	d923      	bls.n	2a4 <CONFIG_FLASH_SIZE+0xa4>
     25c:	1828      	adds	r0, r5, r0
     25e:	f10c 31ff 	add.w	r1, ip, #4294967295
     262:	d204      	bcs.n	26e <CONFIG_FLASH_SIZE+0x6e>
     264:	4581      	cmp	r9, r0
     266:	d902      	bls.n	26e <CONFIG_FLASH_SIZE+0x6e>
     268:	f1ac 0102 	sub.w	r1, ip, #2
     26c:	4428      	add	r0, r5
     26e:	eba0 0009 	sub.w	r0, r0, r9
     272:	b292      	uxth	r2, r2
     274:	fbb0 fcfe 	udiv	ip, r0, lr
     278:	fb0e 001c 	mls	r0, lr, ip, r0
     27c:	fb0c f803 	mul.w	r8, ip, r3
     280:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     284:	4598      	cmp	r8, r3
     286:	d90f      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     288:	18eb      	adds	r3, r5, r3
     28a:	f10c 32ff 	add.w	r2, ip, #4294967295
     28e:	d204      	bcs.n	29a <CONFIG_FLASH_SIZE+0x9a>
     290:	4598      	cmp	r8, r3
     292:	d902      	bls.n	29a <CONFIG_FLASH_SIZE+0x9a>
     294:	f1ac 0202 	sub.w	r2, ip, #2
     298:	442b      	add	r3, r5
     29a:	eba3 0308 	sub.w	r3, r3, r8
     29e:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a2:	e791      	b.n	1c8 <__data_size+0xc>
     2a4:	4661      	mov	r1, ip
     2a6:	e7e2      	b.n	26e <CONFIG_FLASH_SIZE+0x6e>
     2a8:	4662      	mov	r2, ip
     2aa:	e7f6      	b.n	29a <CONFIG_FLASH_SIZE+0x9a>
     2ac:	4660      	mov	r0, ip
     2ae:	e7a2      	b.n	1f6 <__data_size+0x3a>
     2b0:	4663      	mov	r3, ip
     2b2:	e7b6      	b.n	222 <CONFIG_FLASH_SIZE+0x22>
     2b4:	4283      	cmp	r3, r0
     2b6:	d905      	bls.n	2c4 <CONFIG_FLASH_SIZE+0xc4>
     2b8:	b10e      	cbz	r6, 2be <CONFIG_FLASH_SIZE+0xbe>
     2ba:	e9c6 7000 	strd	r7, r0, [r6]
     2be:	2100      	movs	r1, #0
     2c0:	4608      	mov	r0, r1
     2c2:	e776      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2c4:	fab3 f183 	clz	r1, r3
     2c8:	b981      	cbnz	r1, 2ec <CONFIG_FLASH_SIZE+0xec>
     2ca:	4283      	cmp	r3, r0
     2cc:	d301      	bcc.n	2d2 <CONFIG_FLASH_SIZE+0xd2>
     2ce:	42ba      	cmp	r2, r7
     2d0:	d80a      	bhi.n	2e8 <CONFIG_FLASH_SIZE+0xe8>
     2d2:	1abc      	subs	r4, r7, r2
     2d4:	eb60 0303 	sbc.w	r3, r0, r3
     2d8:	2001      	movs	r0, #1
     2da:	469c      	mov	ip, r3
     2dc:	2e00      	cmp	r6, #0
     2de:	d068      	beq.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     2e0:	e9c6 4c00 	strd	r4, ip, [r6]
     2e4:	2100      	movs	r1, #0
     2e6:	e764      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
     2e8:	4608      	mov	r0, r1
     2ea:	e7f7      	b.n	2dc <CONFIG_FLASH_SIZE+0xdc>
     2ec:	f1c1 0c20 	rsb	ip, r1, #32
     2f0:	408b      	lsls	r3, r1
     2f2:	fa22 f40c 	lsr.w	r4, r2, ip
     2f6:	431c      	orrs	r4, r3
     2f8:	fa02 f501 	lsl.w	r5, r2, r1
     2fc:	fa00 f301 	lsl.w	r3, r0, r1
     300:	fa27 f20c 	lsr.w	r2, r7, ip
     304:	fa20 fb0c 	lsr.w	fp, r0, ip
     308:	ea4f 4914 	mov.w	r9, r4, lsr #16
     30c:	4313      	orrs	r3, r2
     30e:	fbbb f8f9 	udiv	r8, fp, r9
     312:	fa1f fe84 	uxth.w	lr, r4
     316:	fb09 bb18 	mls	fp, r9, r8, fp
     31a:	0c1a      	lsrs	r2, r3, #16
     31c:	fb08 fa0e 	mul.w	sl, r8, lr
     320:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     324:	4592      	cmp	sl, r2
     326:	fa07 f701 	lsl.w	r7, r7, r1
     32a:	d93e      	bls.n	3aa <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xaa>
     32c:	18a2      	adds	r2, r4, r2
     32e:	f108 30ff 	add.w	r0, r8, #4294967295
     332:	d204      	bcs.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     334:	4592      	cmp	sl, r2
     336:	d902      	bls.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     338:	f1a8 0002 	sub.w	r0, r8, #2
     33c:	4422      	add	r2, r4
     33e:	eba2 020a 	sub.w	r2, r2, sl
     342:	b29b      	uxth	r3, r3
     344:	fbb2 f8f9 	udiv	r8, r2, r9
     348:	fb09 2218 	mls	r2, r9, r8, r2
     34c:	fb08 fe0e 	mul.w	lr, r8, lr
     350:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     354:	4596      	cmp	lr, r2
     356:	d92a      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     358:	18a2      	adds	r2, r4, r2
     35a:	f108 33ff 	add.w	r3, r8, #4294967295
     35e:	d204      	bcs.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     360:	4596      	cmp	lr, r2
     362:	d902      	bls.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     364:	f1a8 0302 	sub.w	r3, r8, #2
     368:	4422      	add	r2, r4
     36a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     36e:	fba0 9305 	umull	r9, r3, r0, r5
     372:	eba2 020e 	sub.w	r2, r2, lr
     376:	429a      	cmp	r2, r3
     378:	46ce      	mov	lr, r9
     37a:	4698      	mov	r8, r3
     37c:	d302      	bcc.n	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     37e:	d106      	bne.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     380:	454f      	cmp	r7, r9
     382:	d204      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     384:	ebb9 0e05 	subs.w	lr, r9, r5
     388:	eb63 0804 	sbc.w	r8, r3, r4
     38c:	3801      	subs	r0, #1
     38e:	b186      	cbz	r6, 3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     390:	ebb7 030e 	subs.w	r3, r7, lr
     394:	eb62 0708 	sbc.w	r7, r2, r8
     398:	fa07 fc0c 	lsl.w	ip, r7, ip
     39c:	40cb      	lsrs	r3, r1
     39e:	ea4c 0303 	orr.w	r3, ip, r3
     3a2:	40cf      	lsrs	r7, r1
     3a4:	e9c6 3700 	strd	r3, r7, [r6]
     3a8:	e79c      	b.n	2e4 <CONFIG_FLASH_SIZE+0xe4>
     3aa:	4640      	mov	r0, r8
     3ac:	e7c7      	b.n	33e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3e>
     3ae:	4643      	mov	r3, r8
     3b0:	e7db      	b.n	36a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6a>
     3b2:	4631      	mov	r1, r6
     3b4:	e6fd      	b.n	1b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x45>
	...

000003b8 <main>:
	printk("Found device \"%s\", getting sensor data\n", dev->name);
	return dev;
}

void main(void)
{
     3b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	printk("Init device\r\n");
     3ba:	4813      	ldr	r0, [pc, #76]	; (408 <CONFIG_LOG_BUFFER_SIZE+0x8>)
     3bc:	f006 f8e4 	bl	6588 <printk>
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3c0:	4c12      	ldr	r4, [pc, #72]	; (40c <CONFIG_LOG_BUFFER_SIZE+0xc>)
     3c2:	4620      	mov	r0, r4
     3c4:	f007 f8ba 	bl	753c <z_device_is_ready>
		printk("\nError: Device \"%s\" is not ready; "
     3c8:	6821      	ldr	r1, [r4, #0]
	if (!device_is_ready(dev)) {
     3ca:	b928      	cbnz	r0, 3d8 <main+0x20>
		printk("\nError: Device \"%s\" is not ready; "
     3cc:	4810      	ldr	r0, [pc, #64]	; (410 <CONFIG_LOG_BUFFER_SIZE+0x10>)

		printk("Angle: %i\r\n", rotation.val1);

		k_sleep(K_MSEC(1000));
	}
}
     3ce:	b002      	add	sp, #8
     3d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("\nError: Device \"%s\" is not ready; "
     3d4:	f006 b8d8 	b.w	6588 <printk>
	printk("Found device \"%s\", getting sensor data\n", dev->name);
     3d8:	480e      	ldr	r0, [pc, #56]	; (414 <CONFIG_LOG_BUFFER_SIZE+0x14>)
		printk("Angle: %i\r\n", rotation.val1);
     3da:	4e0f      	ldr	r6, [pc, #60]	; (418 <CONFIG_LOG_BUFFER_SIZE+0x18>)
	printk("Found device \"%s\", getting sensor data\n", dev->name);
     3dc:	f006 f8d4 	bl	6588 <printk>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     3e0:	68a5      	ldr	r5, [r4, #8]
     3e2:	2139      	movs	r1, #57	; 0x39
     3e4:	68eb      	ldr	r3, [r5, #12]
     3e6:	4620      	mov	r0, r4
     3e8:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     3ea:	2122      	movs	r1, #34	; 0x22
     3ec:	692b      	ldr	r3, [r5, #16]
     3ee:	466a      	mov	r2, sp
     3f0:	4620      	mov	r0, r4
     3f2:	4798      	blx	r3
		printk("Angle: %i\r\n", rotation.val1);
     3f4:	9900      	ldr	r1, [sp, #0]
     3f6:	4630      	mov	r0, r6
     3f8:	f006 f8c6 	bl	6588 <printk>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     3fc:	2100      	movs	r1, #0
     3fe:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     402:	f005 fdf9 	bl	5ff8 <z_impl_k_sleep>
	while (1) {
     406:	e7ec      	b.n	3e2 <main+0x2a>
     408:	00007df8 	.word	0x00007df8
     40c:	0000791c 	.word	0x0000791c
     410:	00007e06 	.word	0x00007e06
     414:	00007e5a 	.word	0x00007e5a
     418:	00007e82 	.word	0x00007e82

0000041c <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     420:	b08d      	sub	sp, #52	; 0x34
     422:	461f      	mov	r7, r3
     424:	9b16      	ldr	r3, [sp, #88]	; 0x58
     426:	9202      	str	r2, [sp, #8]
     428:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     42a:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     42e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     432:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     434:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     436:	0782      	lsls	r2, r0, #30
{
     438:	4605      	mov	r5, r0
     43a:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     43c:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     43e:	f040 8221 	bne.w	884 <CONFIG_ISR_STACK_SIZE+0x84>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     442:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     444:	2800      	cmp	r0, #0
     446:	f040 8220 	bne.w	88a <CONFIG_ISR_STACK_SIZE+0x8a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     44a:	f001 0607 	and.w	r6, r1, #7
     44e:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     450:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     454:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     458:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     45c:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     45e:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     462:	4652      	mov	r2, sl
	bool parsing = false;
     464:	46d1      	mov	r9, sl
	size = sizeof(char *);
     466:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     468:	b105      	cbz	r5, 46c <cbvprintf_package+0x50>
				*(const char **)buf = s;
     46a:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     46c:	9804      	ldr	r0, [sp, #16]
     46e:	2800      	cmp	r0, #0
     470:	dc07      	bgt.n	482 <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     472:	48cb      	ldr	r0, [pc, #812]	; (7a0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b8>)
     474:	4287      	cmp	r7, r0
     476:	f0c0 8141 	bcc.w	6fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x214>
     47a:	48ca      	ldr	r0, [pc, #808]	; (7a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2bc>)
     47c:	4287      	cmp	r7, r0
     47e:	f080 813d 	bcs.w	6fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x214>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     482:	9802      	ldr	r0, [sp, #8]
     484:	f010 0e02 	ands.w	lr, r0, #2
     488:	f000 8151 	beq.w	72e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x246>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     48c:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     490:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     492:	f1be 0f00 	cmp.w	lr, #0
     496:	f000 8137 	beq.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
     49a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     49e:	f0c0 8133 	bcc.w	708 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x220>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     4a2:	f06f 0015 	mvn.w	r0, #21
     4a6:	e0fe      	b.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
		if (!parsing) {
     4a8:	f1b9 0f00 	cmp.w	r9, #0
     4ac:	d108      	bne.n	4c0 <cbvprintf_package+0xa4>
			if (*fmt == '%') {
     4ae:	2825      	cmp	r0, #37	; 0x25
     4b0:	f040 8141 	bne.w	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
				parsing = true;
     4b4:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     4b8:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     4bc:	4641      	mov	r1, r8
     4be:	e13a      	b.n	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
		switch (*fmt) {
     4c0:	282b      	cmp	r0, #43	; 0x2b
     4c2:	d825      	bhi.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     4c4:	281f      	cmp	r0, #31
     4c6:	d802      	bhi.n	4ce <cbvprintf_package+0xb2>
			parsing = false;
     4c8:	f04f 0900 	mov.w	r9, #0
     4cc:	e133      	b.n	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
		switch (*fmt) {
     4ce:	f1a0 0c20 	sub.w	ip, r0, #32
     4d2:	f1bc 0f0b 	cmp.w	ip, #11
     4d6:	d8f7      	bhi.n	4c8 <cbvprintf_package+0xac>
     4d8:	f20f 0e04 	addw	lr, pc, #4
     4dc:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     4e0:	00000737 	.word	0x00000737
     4e4:	000004c9 	.word	0x000004c9
     4e8:	000004c9 	.word	0x000004c9
     4ec:	00000737 	.word	0x00000737
     4f0:	000004c9 	.word	0x000004c9
     4f4:	000004c9 	.word	0x000004c9
     4f8:	000004c9 	.word	0x000004c9
     4fc:	000004c9 	.word	0x000004c9
     500:	000004c9 	.word	0x000004c9
     504:	000004c9 	.word	0x000004c9
     508:	000006c7 	.word	0x000006c7
     50c:	00000737 	.word	0x00000737
     510:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     514:	fa5f fe8c 	uxtb.w	lr, ip
     518:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     51c:	d8d4      	bhi.n	4c8 <cbvprintf_package+0xac>
     51e:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     522:	d8d1      	bhi.n	4c8 <cbvprintf_package+0xac>
     524:	f20f 0e04 	addw	lr, pc, #4
     528:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     52c:	00000737 	.word	0x00000737
     530:	00000737 	.word	0x00000737
     534:	000004c9 	.word	0x000004c9
     538:	00000737 	.word	0x00000737
     53c:	00000737 	.word	0x00000737
     540:	00000737 	.word	0x00000737
     544:	00000737 	.word	0x00000737
     548:	00000737 	.word	0x00000737
     54c:	00000737 	.word	0x00000737
     550:	00000737 	.word	0x00000737
     554:	00000737 	.word	0x00000737
     558:	00000737 	.word	0x00000737
     55c:	00000737 	.word	0x00000737
     560:	000004c9 	.word	0x000004c9
     564:	000004c9 	.word	0x000004c9
     568:	000004c9 	.word	0x000004c9
     56c:	000004c9 	.word	0x000004c9
     570:	000004c9 	.word	0x000004c9
     574:	000004c9 	.word	0x000004c9
     578:	000004c9 	.word	0x000004c9
     57c:	00000683 	.word	0x00000683
     580:	000004c9 	.word	0x000004c9
     584:	000004c9 	.word	0x000004c9
     588:	000004c9 	.word	0x000004c9
     58c:	00000683 	.word	0x00000683
     590:	00000683 	.word	0x00000683
     594:	00000683 	.word	0x00000683
     598:	000004c9 	.word	0x000004c9
     59c:	000004c9 	.word	0x000004c9
     5a0:	000004c9 	.word	0x000004c9
     5a4:	000004c9 	.word	0x000004c9
     5a8:	00000737 	.word	0x00000737
     5ac:	000004c9 	.word	0x000004c9
     5b0:	000004c9 	.word	0x000004c9
     5b4:	000004c9 	.word	0x000004c9
     5b8:	000004c9 	.word	0x000004c9
     5bc:	000004c9 	.word	0x000004c9
     5c0:	000004c9 	.word	0x000004c9
     5c4:	000004c9 	.word	0x000004c9
     5c8:	000004c9 	.word	0x000004c9
     5cc:	000004c9 	.word	0x000004c9
     5d0:	000004c9 	.word	0x000004c9
     5d4:	000004c9 	.word	0x000004c9
     5d8:	00000665 	.word	0x00000665
     5dc:	000004c9 	.word	0x000004c9
     5e0:	000004c9 	.word	0x000004c9
     5e4:	000004c9 	.word	0x000004c9
     5e8:	000004c9 	.word	0x000004c9
     5ec:	000004c9 	.word	0x000004c9
     5f0:	000004c9 	.word	0x000004c9
     5f4:	000004c9 	.word	0x000004c9
     5f8:	000004c9 	.word	0x000004c9
     5fc:	00000683 	.word	0x00000683
     600:	000004c9 	.word	0x000004c9
     604:	00000665 	.word	0x00000665
     608:	00000665 	.word	0x00000665
     60c:	00000683 	.word	0x00000683
     610:	00000683 	.word	0x00000683
     614:	00000683 	.word	0x00000683
     618:	00000737 	.word	0x00000737
     61c:	00000665 	.word	0x00000665
     620:	000006b7 	.word	0x000006b7
     624:	000004c9 	.word	0x000004c9
     628:	00000737 	.word	0x00000737
     62c:	000004c9 	.word	0x000004c9
     630:	000006bd 	.word	0x000006bd
     634:	00000665 	.word	0x00000665
     638:	000006bd 	.word	0x000006bd
     63c:	000004c9 	.word	0x000004c9
     640:	000004c9 	.word	0x000004c9
     644:	000006bd 	.word	0x000006bd
     648:	000004b9 	.word	0x000004b9
     64c:	00000665 	.word	0x00000665
     650:	000004c9 	.word	0x000004c9
     654:	000004c9 	.word	0x000004c9
     658:	00000665 	.word	0x00000665
     65c:	000004c9 	.word	0x000004c9
     660:	000004b9 	.word	0x000004b9
			if (fmt[-1] == 'l') {
     664:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     668:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     66c:	d129      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
				if (fmt[-2] == 'l') {
     66e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     672:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     674:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     678:	d03d      	beq.n	6f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20e>
			align = VA_STACK_ALIGN(void *);
     67a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     67e:	4641      	mov	r1, r8
     680:	e021      	b.n	6c6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1de>
				v.ld = va_arg(ap, long double);
     682:	9800      	ldr	r0, [sp, #0]
     684:	f100 0b07 	add.w	fp, r0, #7
     688:	f02b 0007 	bic.w	r0, fp, #7
     68c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     690:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     692:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     694:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     698:	b155      	cbz	r5, 6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
				if (BUF_OFFSET + size > len) {
     69a:	9805      	ldr	r0, [sp, #20]
     69c:	4420      	add	r0, r4
     69e:	42b0      	cmp	r0, r6
     6a0:	d904      	bls.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
					return -ENOSPC;
     6a2:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     6a6:	b00d      	add	sp, #52	; 0x34
     6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     6ac:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     6b0:	3408      	adds	r4, #8
			parsing = false;
     6b2:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     6b6:	f04f 0808 	mov.w	r8, #8
     6ba:	e6ff      	b.n	4bc <cbvprintf_package+0xa0>
			parsing = false;
     6bc:	f04f 0900 	mov.w	r9, #0
     6c0:	e7db      	b.n	67a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x192>
			parsing = false;
     6c2:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     6c6:	3c01      	subs	r4, #1
     6c8:	4444      	add	r4, r8
     6ca:	f1c8 0c00 	rsb	ip, r8, #0
     6ce:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     6d2:	b125      	cbz	r5, 6de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1f6>
     6d4:	eba1 0c05 	sub.w	ip, r1, r5
     6d8:	44a4      	add	ip, r4
     6da:	45b4      	cmp	ip, r6
     6dc:	d8e1      	bhi.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
		if (*fmt == 's') {
     6de:	2873      	cmp	r0, #115	; 0x73
     6e0:	d152      	bne.n	788 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2a0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6e2:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     6e4:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6e8:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     6ea:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6ee:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     6f0:	f8cd b000 	str.w	fp, [sp]
     6f4:	e6b8      	b.n	468 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     6f6:	f04f 0808 	mov.w	r8, #8
     6fa:	e7c0      	b.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     6fc:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     6fe:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     702:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     706:	e6c3      	b.n	490 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     708:	2a0f      	cmp	r2, #15
     70a:	f63f aeca 	bhi.w	4a2 <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     70e:	b345      	cbz	r5, 762 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x27a>
					str_ptr_pos[s_idx] = s_ptr_idx;
     710:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     714:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     718:	4496      	add	lr, r2
     71a:	f1bc 0f00 	cmp.w	ip, #0
     71e:	d01a      	beq.n	756 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26e>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     720:	f060 007f 	orn	r0, r0, #127	; 0x7f
     724:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     728:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     72c:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     72e:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     732:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     734:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     736:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     73a:	2800      	cmp	r0, #0
     73c:	f47f aeb4 	bne.w	4a8 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     740:	1b61      	subs	r1, r4, r5
     742:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     746:	f4bf aeac 	bcs.w	4a2 <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     74a:	2d00      	cmp	r5, #0
     74c:	d13e      	bne.n	7cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e4>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     74e:	f1a6 0408 	sub.w	r4, r6, #8
     752:	1860      	adds	r0, r4, r1
     754:	e7a7      	b.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
					str_ptr_pos[s_idx] = s_ptr_idx;
     756:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     75a:	9803      	ldr	r0, [sp, #12]
     75c:	3001      	adds	r0, #1
     75e:	9003      	str	r0, [sp, #12]
     760:	e7e4      	b.n	72c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x244>
				} else if (is_ro || rws_pos_en) {
     762:	f1bc 0f00 	cmp.w	ip, #0
     766:	d101      	bne.n	76c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x284>
     768:	9801      	ldr	r0, [sp, #4]
     76a:	b108      	cbz	r0, 770 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x288>
					len += 1;
     76c:	3601      	adds	r6, #1
     76e:	e7dd      	b.n	72c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x244>
					len += strlen(s) + 1 + 1;
     770:	4638      	mov	r0, r7
     772:	e9cd 1206 	strd	r1, r2, [sp, #24]
     776:	9305      	str	r3, [sp, #20]
     778:	f006 fb13 	bl	6da2 <strlen>
     77c:	3602      	adds	r6, #2
     77e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     782:	9b05      	ldr	r3, [sp, #20]
     784:	4406      	add	r6, r0
     786:	e7d1      	b.n	72c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x244>
		} else if (size == sizeof(int)) {
     788:	2904      	cmp	r1, #4
     78a:	d10d      	bne.n	7a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c0>
			int v = va_arg(ap, int);
     78c:	9800      	ldr	r0, [sp, #0]
     78e:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     792:	b10d      	cbz	r5, 798 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2b0>
			int v = va_arg(ap, int);
     794:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     796:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     798:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     79a:	f8cd c000 	str.w	ip, [sp]
     79e:	e7ca      	b.n	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
     7a0:	00007824 	.word	0x00007824
     7a4:	00008800 	.word	0x00008800
		} else if (size == sizeof(long long)) {
     7a8:	2908      	cmp	r1, #8
     7aa:	f47f ae7a 	bne.w	4a2 <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     7ae:	9800      	ldr	r0, [sp, #0]
     7b0:	3007      	adds	r0, #7
     7b2:	f020 0007 	bic.w	r0, r0, #7
     7b6:	f100 0c08 	add.w	ip, r0, #8
     7ba:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     7be:	b11d      	cbz	r5, 7c8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2e0>
			long long v = va_arg(ap, long long);
     7c0:	e9d0 bc00 	ldrd	fp, ip, [r0]
     7c4:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     7c8:	3408      	adds	r4, #8
     7ca:	e7b4      	b.n	736 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24e>
	if (rws_pos_en) {
     7cc:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     7ce:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     7d0:	0889      	lsrs	r1, r1, #2
     7d2:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     7d4:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     7d8:	b1a3      	cbz	r3, 804 <CONFIG_ISR_STACK_SIZE+0x4>
		buf0[1] = 0;
     7da:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     7dc:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     7de:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     7e2:	f1ba 0f00 	cmp.w	sl, #0
     7e6:	d006      	beq.n	7f6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30e>
     7e8:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     7ea:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     7ee:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     7f2:	4562      	cmp	r2, ip
     7f4:	d10a      	bne.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     7f6:	f10d 0820 	add.w	r8, sp, #32
     7fa:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     7fe:	f1c5 0b01 	rsb	fp, r5, #1
     802:	e039      	b.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
		buf0[3] = 0;
     804:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     806:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     808:	70eb      	strb	r3, [r5, #3]
     80a:	e7e8      	b.n	7de <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2f6>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     80c:	f810 1b01 	ldrb.w	r1, [r0], #1
     810:	060b      	lsls	r3, r1, #24
     812:	d508      	bpl.n	826 <CONFIG_ISR_STACK_SIZE+0x26>
			if (BUF_OFFSET + 1 > len) {
     814:	eb04 080e 	add.w	r8, r4, lr
     818:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     81a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     81e:	f63f af40 	bhi.w	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
			*buf++ = pos;
     822:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     826:	f10c 0c01 	add.w	ip, ip, #1
     82a:	e7e2      	b.n	7f2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     82c:	f1ba 0f00 	cmp.w	sl, #0
     830:	d003      	beq.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     832:	f998 2000 	ldrsb.w	r2, [r8]
     836:	2a00      	cmp	r2, #0
     838:	db1c      	blt.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
		if (rws_pos_en) {
     83a:	9b01      	ldr	r3, [sp, #4]
     83c:	bb03      	cbnz	r3, 880 <CONFIG_ISR_STACK_SIZE+0x80>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     83e:	f898 2000 	ldrb.w	r2, [r8]
     842:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     846:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     84a:	4638      	mov	r0, r7
     84c:	f006 faa9 	bl	6da2 <strlen>
     850:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     852:	eb04 010b 	add.w	r1, r4, fp
     856:	4411      	add	r1, r2
     858:	42b1      	cmp	r1, r6
     85a:	f63f af22 	bhi.w	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
		*buf++ = str_ptr_pos[i];
     85e:	f898 1000 	ldrb.w	r1, [r8]
     862:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     866:	4639      	mov	r1, r7
     868:	4620      	mov	r0, r4
     86a:	9200      	str	r2, [sp, #0]
     86c:	f006 faa9 	bl	6dc2 <memcpy>
		buf += size;
     870:	9a00      	ldr	r2, [sp, #0]
     872:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     874:	f108 0801 	add.w	r8, r8, #1
     878:	45c1      	cmp	r9, r8
     87a:	d1d7      	bne.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
	return BUF_OFFSET;
     87c:	1b60      	subs	r0, r4, r5
     87e:	e712      	b.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
			size = 0;
     880:	2200      	movs	r2, #0
     882:	e7e6      	b.n	852 <CONFIG_ISR_STACK_SIZE+0x52>
		return -EFAULT;
     884:	f06f 000d 	mvn.w	r0, #13
     888:	e70d      	b.n	6a6 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1be>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     88a:	2907      	cmp	r1, #7
     88c:	f63f ade2 	bhi.w	454 <cbvprintf_package+0x38>
     890:	e707      	b.n	6a2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1ba>
     892:	bf00      	nop

00000894 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     898:	b08b      	sub	sp, #44	; 0x2c
     89a:	4606      	mov	r6, r0
     89c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     8a0:	9304      	str	r3, [sp, #16]
     8a2:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     8a4:	460f      	mov	r7, r1
     8a6:	b1b1      	cbz	r1, 8d6 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     8a8:	78b5      	ldrb	r5, [r6, #2]
     8aa:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     8ac:	bb35      	cbnz	r5, 8fc <cbprintf_package_copy+0x68>
     8ae:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     8b0:	78f3      	ldrb	r3, [r6, #3]
     8b2:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     8b4:	b113      	cbz	r3, 8bc <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     8b6:	f01b 0f02 	tst.w	fp, #2
     8ba:	d122      	bne.n	902 <cbprintf_package_copy+0x6e>
     8bc:	f1ba 0f00 	cmp.w	sl, #0
     8c0:	d11f      	bne.n	902 <cbprintf_package_copy+0x6e>
		if (packaged) {
     8c2:	b124      	cbz	r4, 8ce <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     8c4:	463a      	mov	r2, r7
     8c6:	4631      	mov	r1, r6
     8c8:	4620      	mov	r0, r4
     8ca:	f006 fa7a 	bl	6dc2 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     8ce:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     8d0:	b00b      	add	sp, #44	; 0x2c
     8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     8d6:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     8da:	78b5      	ldrb	r5, [r6, #2]
     8dc:	7800      	ldrb	r0, [r0, #0]
     8de:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     8e2:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     8e4:	468a      	mov	sl, r1
     8e6:	45ca      	cmp	sl, r9
     8e8:	d2de      	bcs.n	8a8 <cbprintf_package_copy+0x14>
		buf++;
     8ea:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     8ec:	4628      	mov	r0, r5
     8ee:	f006 fa58 	bl	6da2 <strlen>
     8f2:	3001      	adds	r0, #1
     8f4:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     8f6:	f10a 0a01 	add.w	sl, sl, #1
     8fa:	e7f4      	b.n	8e6 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     8fc:	f00b 0a01 	and.w	sl, fp, #1
     900:	e7d6      	b.n	8b0 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     902:	f896 9000 	ldrb.w	r9, [r6]
     906:	ea4f 0389 	mov.w	r3, r9, lsl #2
     90a:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     90c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     910:	2c00      	cmp	r4, #0
     912:	d15b      	bne.n	9cc <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     914:	f1ba 0f00 	cmp.w	sl, #0
     918:	d032      	beq.n	980 <cbprintf_package_copy+0xec>
     91a:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     91c:	454d      	cmp	r5, r9
     91e:	d11d      	bne.n	95c <cbprintf_package_copy+0xc8>
     920:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     922:	f8dd a004 	ldr.w	sl, [sp, #4]
     926:	f8df c204 	ldr.w	ip, [pc, #516]	; b2c <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     92a:	4981      	ldr	r1, [pc, #516]	; (b30 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     92c:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     930:	464d      	mov	r5, r9
     932:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     934:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     938:	45aa      	cmp	sl, r5
     93a:	d0c8      	beq.n	8ce <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     93c:	f815 0b01 	ldrb.w	r0, [r5], #1
     940:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     944:	4560      	cmp	r0, ip
     946:	d324      	bcc.n	992 <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     948:	4288      	cmp	r0, r1
     94a:	d222      	bcs.n	992 <cbprintf_package_copy+0xfe>
     94c:	f01b 0f01 	tst.w	fp, #1
     950:	d139      	bne.n	9c6 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     952:	f1b8 0f00 	cmp.w	r8, #0
     956:	d1ef      	bne.n	938 <cbprintf_package_copy+0xa4>
				out_len--;
     958:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     95a:	e7ed      	b.n	938 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     95c:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     960:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     964:	f006 fa1d 	bl	6da2 <strlen>
				if (strl && strl_cnt < strl_len) {
     968:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     96a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     96c:	b133      	cbz	r3, 97c <cbprintf_package_copy+0xe8>
     96e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     970:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     972:	bf3e      	ittt	cc
     974:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     976:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     97a:	3401      	addcc	r4, #1
				out_len += len;
     97c:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     97e:	e7cd      	b.n	91c <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     980:	b12d      	cbz	r5, 98e <cbprintf_package_copy+0xfa>
     982:	f01b 0404 	ands.w	r4, fp, #4
     986:	d0cc      	beq.n	922 <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     988:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     98a:	4654      	mov	r4, sl
     98c:	e7c9      	b.n	922 <cbprintf_package_copy+0x8e>
     98e:	462c      	mov	r4, r5
     990:	e7c7      	b.n	922 <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     992:	2a00      	cmp	r2, #0
     994:	d0d0      	beq.n	938 <cbprintf_package_copy+0xa4>
     996:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     99a:	9201      	str	r2, [sp, #4]
     99c:	f006 fa01 	bl	6da2 <strlen>
				if (strl && strl_cnt < strl_len) {
     9a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
     9a2:	f8df c188 	ldr.w	ip, [pc, #392]	; b2c <cbprintf_package_copy+0x298>
     9a6:	9a01      	ldr	r2, [sp, #4]
     9a8:	4961      	ldr	r1, [pc, #388]	; (b30 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     9aa:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     9ac:	b133      	cbz	r3, 9bc <cbprintf_package_copy+0x128>
     9ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
     9b0:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     9b2:	bf3e      	ittt	cc
     9b4:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     9b6:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     9ba:	3401      	addcc	r4, #1
				out_len += len;
     9bc:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     9be:	f1b9 0f00 	cmp.w	r9, #0
     9c2:	d0b9      	beq.n	938 <cbprintf_package_copy+0xa4>
     9c4:	e7c5      	b.n	952 <cbprintf_package_copy+0xbe>
     9c6:	f04f 0901 	mov.w	r9, #1
     9ca:	e7e6      	b.n	99a <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     9cc:	9a03      	ldr	r2, [sp, #12]
     9ce:	4631      	mov	r1, r6
     9d0:	4620      	mov	r0, r4
     9d2:	f006 f9f6 	bl	6dc2 <memcpy>
	dst += args_size;
     9d6:	9b03      	ldr	r3, [sp, #12]
     9d8:	18e3      	adds	r3, r4, r3
     9da:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     9dc:	f1ba 0f00 	cmp.w	sl, #0
     9e0:	d00a      	beq.n	9f8 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     9e2:	4649      	mov	r1, r9
     9e4:	462a      	mov	r2, r5
     9e6:	a806      	add	r0, sp, #24
     9e8:	f006 f9eb 	bl	6dc2 <memcpy>
		dst_hdr[2] = 0;
     9ec:	2300      	movs	r3, #0
     9ee:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     9f0:	44a9      	add	r9, r5
	dst += args_size;
     9f2:	f8dd 8008 	ldr.w	r8, [sp, #8]
     9f6:	e00d      	b.n	a14 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     9f8:	b1bd      	cbz	r5, a2a <cbprintf_package_copy+0x196>
     9fa:	f01b 0f04 	tst.w	fp, #4
     9fe:	d014      	beq.n	a2a <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     a00:	462a      	mov	r2, r5
     a02:	4649      	mov	r1, r9
     a04:	9802      	ldr	r0, [sp, #8]
     a06:	f006 f9dc 	bl	6dc2 <memcpy>
			dst += ros_nbr;
     a0a:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     a0c:	44a9      	add	r9, r5
			dst += ros_nbr;
     a0e:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     a12:	4655      	mov	r5, sl
     a14:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     a16:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     a1a:	f00b 0001 	and.w	r0, fp, #1
     a1e:	464a      	mov	r2, r9
     a20:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a24:	f00b 0b04 	and.w	fp, fp, #4
     a28:	e025      	b.n	a76 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     a2a:	2500      	movs	r5, #0
     a2c:	70a5      	strb	r5, [r4, #2]
     a2e:	e7e0      	b.n	9f2 <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     a30:	f812 3b01 	ldrb.w	r3, [r2], #1
     a34:	f8df a0f4 	ldr.w	sl, [pc, #244]	; b2c <cbprintf_package_copy+0x298>
     a38:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     a3c:	4551      	cmp	r1, sl
     a3e:	d303      	bcc.n	a48 <cbprintf_package_copy+0x1b4>
     a40:	f8df a0ec 	ldr.w	sl, [pc, #236]	; b30 <cbprintf_package_copy+0x29c>
     a44:	4551      	cmp	r1, sl
     a46:	d305      	bcc.n	a54 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     a48:	f1be 0f00 	cmp.w	lr, #0
     a4c:	d103      	bne.n	a56 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     a4e:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     a52:	e010      	b.n	a76 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     a54:	b138      	cbz	r0, a66 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     a56:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     a5a:	1c69      	adds	r1, r5, #1
     a5c:	4455      	add	r5, sl
     a5e:	f805 3c10 	strb.w	r3, [r5, #-16]
     a62:	b2cd      	uxtb	r5, r1
     a64:	e007      	b.n	a76 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a66:	f1bb 0f00 	cmp.w	fp, #0
     a6a:	d004      	beq.n	a76 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     a6c:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     a70:	78a3      	ldrb	r3, [r4, #2]
     a72:	3301      	adds	r3, #1
     a74:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     a76:	4594      	cmp	ip, r2
     a78:	d1da      	bne.n	a30 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     a7a:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a7c:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     a7e:	442b      	add	r3, r5
     a80:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     a82:	9b02      	ldr	r3, [sp, #8]
     a84:	eba8 0b03 	sub.w	fp, r8, r3
     a88:	78a3      	ldrb	r3, [r4, #2]
     a8a:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a8e:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     a90:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a94:	4413      	add	r3, r2
     a96:	1aff      	subs	r7, r7, r3
     a98:	9b03      	ldr	r3, [sp, #12]
     a9a:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     a9c:	9b01      	ldr	r3, [sp, #4]
     a9e:	4640      	mov	r0, r8
     aa0:	463a      	mov	r2, r7
     aa2:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     aa6:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     aa8:	f006 f98b 	bl	6dc2 <memcpy>
		return dst - dst_hdr;
     aac:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     ab0:	2d00      	cmp	r5, #0
     ab2:	f43f af0d 	beq.w	8d0 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     ab6:	9b04      	ldr	r3, [sp, #16]
     ab8:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     aba:	42a5      	cmp	r5, r4
     abc:	d302      	bcc.n	ac4 <cbprintf_package_copy+0x230>
		return -ENOSPC;
     abe:	f06f 001b 	mvn.w	r0, #27
     ac2:	e705      	b.n	8d0 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     ac4:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     ac8:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     aca:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     acc:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     ad0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     ad4:	b1c2      	cbz	r2, b08 <cbprintf_package_copy+0x274>
     ad6:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     ada:	46c2      	mov	sl, r8
		rem--;
     adc:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     ae0:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     ae4:	b197      	cbz	r7, b0c <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     ae6:	463a      	mov	r2, r7
     ae8:	4650      	mov	r0, sl
     aea:	f006 f96a 	bl	6dc2 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     aee:	f109 0901 	add.w	r9, r9, #1
     af2:	454d      	cmp	r5, r9
		rem -= cpy_len;
     af4:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     af8:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     afc:	dce4      	bgt.n	ac8 <cbprintf_package_copy+0x234>
	return len - rem;
     afe:	9b04      	ldr	r3, [sp, #16]
     b00:	441f      	add	r7, r3
     b02:	eba7 000b 	sub.w	r0, r7, fp
     b06:	e6e3      	b.n	8d0 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     b08:	9f15      	ldr	r7, [sp, #84]	; 0x54
     b0a:	e7e6      	b.n	ada <cbprintf_package_copy+0x246>
     b0c:	3901      	subs	r1, #1
	if (strl) {
     b0e:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     b10:	429c      	cmp	r4, r3
     b12:	d0d4      	beq.n	abe <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     b14:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     b18:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     b1c:	1c58      	adds	r0, r3, #1
     b1e:	b912      	cbnz	r2, b26 <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     b20:	1e1f      	subs	r7, r3, #0
     b22:	dae4      	bge.n	aee <cbprintf_package_copy+0x25a>
     b24:	e7cb      	b.n	abe <cbprintf_package_copy+0x22a>
     b26:	4603      	mov	r3, r0
     b28:	e7f2      	b.n	b10 <cbprintf_package_copy+0x27c>
     b2a:	bf00      	nop
     b2c:	00007824 	.word	0x00007824
     b30:	00008800 	.word	0x00008800

00000b34 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     b34:	4b01      	ldr	r3, [pc, #4]	; (b3c <__printk_hook_install+0x8>)
     b36:	6018      	str	r0, [r3, #0]
}
     b38:	4770      	bx	lr
     b3a:	bf00      	nop
     b3c:	20000000 	.word	0x20000000

00000b40 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     b40:	b530      	push	{r4, r5, lr}
     b42:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     b44:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     b48:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     b4a:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     b4c:	a901      	add	r1, sp, #4
     b4e:	4805      	ldr	r0, [pc, #20]	; (b64 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     b50:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     b52:	f000 f8e9 	bl	d28 <cbvprintf>

	if (ctx.count < ctx.max) {
     b56:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     b5a:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     b5c:	bfb8      	it	lt
     b5e:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     b60:	b005      	add	sp, #20
     b62:	bd30      	pop	{r4, r5, pc}
     b64:	00006563 	.word	0x00006563

00000b68 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     b68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b6c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     b70:	f019 0808 	ands.w	r8, r9, #8
{
     b74:	4604      	mov	r4, r0
     b76:	4693      	mov	fp, r2
	if (processing) {
     b78:	d00d      	beq.n	b96 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     b7a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     b7c:	bf0c      	ite	eq
     b7e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     b82:	f049 0920 	orrne.w	r9, r9, #32
     b86:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     b8a:	f38b 8811 	msr	BASEPRI, fp
     b8e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     b92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b96:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     b9a:	2902      	cmp	r1, #2
     b9c:	d107      	bne.n	bae <process_event+0x46>
			evt = process_recheck(mgr);
     b9e:	4620      	mov	r0, r4
     ba0:	f005 fd0c 	bl	65bc <process_recheck>
		if (evt == EVT_NOP) {
     ba4:	2800      	cmp	r0, #0
     ba6:	d0f0      	beq.n	b8a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     ba8:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     baa:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     bac:	d14e      	bne.n	c4c <process_event+0xe4>
			res = mgr->last_res;
     bae:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     bb0:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     bb2:	2f00      	cmp	r7, #0
     bb4:	da15      	bge.n	be2 <process_event+0x7a>
		*clients = mgr->clients;
     bb6:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bb8:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     bbc:	e9c4 8800 	strd	r8, r8, [r4]
     bc0:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     bc4:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     bc6:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     bc8:	8b21      	ldrh	r1, [r4, #24]
     bca:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     bce:	45ca      	cmp	sl, r9
     bd0:	d002      	beq.n	bd8 <process_event+0x70>
		if (do_monitors
     bd2:	68a3      	ldr	r3, [r4, #8]
     bd4:	2b00      	cmp	r3, #0
     bd6:	d15a      	bne.n	c8e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     bd8:	b90d      	cbnz	r5, bde <process_event+0x76>
		    || (transit != NULL)) {
     bda:	2e00      	cmp	r6, #0
     bdc:	d071      	beq.n	cc2 <process_event+0x15a>
     bde:	2300      	movs	r3, #0
     be0:	e056      	b.n	c90 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     be2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     be6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     be8:	2a01      	cmp	r2, #1
     bea:	d81e      	bhi.n	c2a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bec:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     bf0:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     bf2:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bf4:	b289      	uxth	r1, r1
     bf6:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     bfa:	d10a      	bne.n	c12 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     bfc:	b13d      	cbz	r5, c0e <process_event+0xa6>
     bfe:	8b63      	ldrh	r3, [r4, #26]
     c00:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     c02:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     c04:	3301      	adds	r3, #1
     c06:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     c08:	2a00      	cmp	r2, #0
     c0a:	d1fa      	bne.n	c02 <process_event+0x9a>
     c0c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c0e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     c12:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c14:	4620      	mov	r0, r4
     c16:	f005 fcd1 	bl	65bc <process_recheck>
     c1a:	4606      	mov	r6, r0
     c1c:	2800      	cmp	r0, #0
     c1e:	d0d3      	beq.n	bc8 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c20:	8b23      	ldrh	r3, [r4, #24]
     c22:	f043 0320 	orr.w	r3, r3, #32
     c26:	8323      	strh	r3, [r4, #24]
     c28:	e7cd      	b.n	bc6 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     c2a:	2b04      	cmp	r3, #4
     c2c:	d10c      	bne.n	c48 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c2e:	f021 0107 	bic.w	r1, r1, #7
     c32:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     c34:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     c36:	4620      	mov	r0, r4
     c38:	f005 fcc0 	bl	65bc <process_recheck>
     c3c:	4605      	mov	r5, r0
     c3e:	2800      	cmp	r0, #0
     c40:	d0c1      	beq.n	bc6 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     c42:	f041 0120 	orr.w	r1, r1, #32
     c46:	8321      	strh	r1, [r4, #24]
     c48:	2500      	movs	r5, #0
     c4a:	e7bc      	b.n	bc6 <process_event+0x5e>
		} else if (evt == EVT_START) {
     c4c:	2803      	cmp	r0, #3
     c4e:	d109      	bne.n	c64 <process_event+0xfc>
			transit = mgr->transitions->start;
     c50:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c52:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     c56:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c58:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     c5c:	8323      	strh	r3, [r4, #24]
}
     c5e:	2500      	movs	r5, #0
		res = 0;
     c60:	462f      	mov	r7, r5
     c62:	e7b1      	b.n	bc8 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     c64:	2804      	cmp	r0, #4
     c66:	d106      	bne.n	c76 <process_event+0x10e>
			transit = mgr->transitions->stop;
     c68:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c6a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     c6e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c70:	f043 0304 	orr.w	r3, r3, #4
     c74:	e7f2      	b.n	c5c <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     c76:	2805      	cmp	r0, #5
     c78:	d106      	bne.n	c88 <process_event+0x120>
			transit = mgr->transitions->reset;
     c7a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c7c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     c80:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c82:	f043 0305 	orr.w	r3, r3, #5
     c86:	e7e9      	b.n	c5c <process_event+0xf4>
     c88:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     c8a:	462e      	mov	r6, r5
     c8c:	e7e8      	b.n	c60 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     c8e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     c90:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     c94:	8321      	strh	r1, [r4, #24]
     c96:	f38b 8811 	msr	BASEPRI, fp
     c9a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     c9e:	b9fb      	cbnz	r3, ce0 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     ca0:	bb85      	cbnz	r5, d04 <process_event+0x19c>
			if (transit != NULL) {
     ca2:	b116      	cbz	r6, caa <process_event+0x142>
				transit(mgr, transition_complete);
     ca4:	491f      	ldr	r1, [pc, #124]	; (d24 <process_event+0x1bc>)
     ca6:	4620      	mov	r0, r4
     ca8:	47b0      	blx	r6
	__asm__ volatile(
     caa:	f04f 0320 	mov.w	r3, #32
     cae:	f3ef 8b11 	mrs	fp, BASEPRI
     cb2:	f383 8812 	msr	BASEPRI_MAX, r3
     cb6:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     cba:	8b23      	ldrh	r3, [r4, #24]
     cbc:	f023 0308 	bic.w	r3, r3, #8
     cc0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     cc2:	8b23      	ldrh	r3, [r4, #24]
     cc4:	06da      	lsls	r2, r3, #27
     cc6:	d525      	bpl.n	d14 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     cc8:	f023 0310 	bic.w	r3, r3, #16
     ccc:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     cce:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     cd0:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     cd4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     cd8:	2900      	cmp	r1, #0
     cda:	f47f af5e 	bne.w	b9a <process_event+0x32>
out:
     cde:	e754      	b.n	b8a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     ce0:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     ce2:	2900      	cmp	r1, #0
     ce4:	d0dc      	beq.n	ca0 <process_event+0x138>
	return node->next;
     ce6:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     cea:	f8d1 b004 	ldr.w	fp, [r1, #4]
     cee:	463b      	mov	r3, r7
     cf0:	4652      	mov	r2, sl
     cf2:	4620      	mov	r0, r4
     cf4:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     cf6:	f1b9 0f00 	cmp.w	r9, #0
     cfa:	d0d1      	beq.n	ca0 <process_event+0x138>
     cfc:	4649      	mov	r1, r9
     cfe:	f8d9 9000 	ldr.w	r9, [r9]
     d02:	e7f2      	b.n	cea <process_event+0x182>
     d04:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     d06:	463b      	mov	r3, r7
     d08:	4652      	mov	r2, sl
     d0a:	4620      	mov	r0, r4
     d0c:	682d      	ldr	r5, [r5, #0]
     d0e:	f005 fc71 	bl	65f4 <notify_one>
     d12:	e7c5      	b.n	ca0 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     d14:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     d18:	bf1e      	ittt	ne
     d1a:	f023 0320 	bicne.w	r3, r3, #32
     d1e:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     d20:	2102      	movne	r1, #2
     d22:	e7d5      	b.n	cd0 <process_event+0x168>
     d24:	00006621 	.word	0x00006621

00000d28 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d2c:	b091      	sub	sp, #68	; 0x44
     d2e:	468b      	mov	fp, r1
     d30:	9002      	str	r0, [sp, #8]
     d32:	4692      	mov	sl, r2
     d34:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     d36:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     d38:	f89a 0000 	ldrb.w	r0, [sl]
     d3c:	b908      	cbnz	r0, d42 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     d3e:	4628      	mov	r0, r5
     d40:	e35f      	b.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
		if (*fp != '%') {
     d42:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     d44:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     d48:	d007      	beq.n	d5a <cbvprintf+0x32>
			OUTC('%');
     d4a:	9b02      	ldr	r3, [sp, #8]
     d4c:	4659      	mov	r1, fp
     d4e:	4798      	blx	r3
     d50:	2800      	cmp	r0, #0
     d52:	f2c0 8356 	blt.w	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
     d56:	3501      	adds	r5, #1
			break;
     d58:	e212      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
		} state = {
     d5a:	2218      	movs	r2, #24
     d5c:	2100      	movs	r1, #0
     d5e:	a80a      	add	r0, sp, #40	; 0x28
     d60:	f006 f83a 	bl	6dd8 <memset>
	if (*sp == '%') {
     d64:	f89a 3001 	ldrb.w	r3, [sl, #1]
     d68:	2b25      	cmp	r3, #37	; 0x25
     d6a:	d078      	beq.n	e5e <cbvprintf+0x136>
     d6c:	2200      	movs	r2, #0
     d6e:	4610      	mov	r0, r2
     d70:	4696      	mov	lr, r2
     d72:	4694      	mov	ip, r2
     d74:	4616      	mov	r6, r2
     d76:	4639      	mov	r1, r7
		switch (*sp) {
     d78:	f817 3b01 	ldrb.w	r3, [r7], #1
     d7c:	2b2b      	cmp	r3, #43	; 0x2b
     d7e:	f000 809d 	beq.w	ebc <cbvprintf+0x194>
     d82:	f200 8094 	bhi.w	eae <cbvprintf+0x186>
     d86:	2b20      	cmp	r3, #32
     d88:	f000 809b 	beq.w	ec2 <cbvprintf+0x19a>
     d8c:	2b23      	cmp	r3, #35	; 0x23
     d8e:	f000 809b 	beq.w	ec8 <cbvprintf+0x1a0>
     d92:	b12e      	cbz	r6, da0 <cbvprintf+0x78>
     d94:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d98:	f046 0604 	orr.w	r6, r6, #4
     d9c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     da0:	f1bc 0f00 	cmp.w	ip, #0
     da4:	d005      	beq.n	db2 <cbvprintf+0x8a>
     da6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     daa:	f046 0608 	orr.w	r6, r6, #8
     dae:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     db2:	f1be 0f00 	cmp.w	lr, #0
     db6:	d005      	beq.n	dc4 <cbvprintf+0x9c>
     db8:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     dbc:	f046 0610 	orr.w	r6, r6, #16
     dc0:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     dc4:	b128      	cbz	r0, dd2 <cbvprintf+0xaa>
     dc6:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     dca:	f040 0020 	orr.w	r0, r0, #32
     dce:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     dd2:	b12a      	cbz	r2, de0 <cbvprintf+0xb8>
     dd4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     dd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     ddc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     de0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     de4:	f002 0044 	and.w	r0, r2, #68	; 0x44
     de8:	2844      	cmp	r0, #68	; 0x44
     dea:	d103      	bne.n	df4 <cbvprintf+0xcc>
		conv->flag_zero = false;
     dec:	f36f 1286 	bfc	r2, #6, #1
     df0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     df4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     df8:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     dfe:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     e02:	d17b      	bne.n	efc <cbvprintf+0x1d4>
		conv->width_star = true;
     e04:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e08:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     e0c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     e0e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     e12:	781a      	ldrb	r2, [r3, #0]
     e14:	2a2e      	cmp	r2, #46	; 0x2e
     e16:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     e1a:	bf0c      	ite	eq
     e1c:	2101      	moveq	r1, #1
     e1e:	2100      	movne	r1, #0
     e20:	f361 0241 	bfi	r2, r1, #1, #1
     e24:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     e28:	d174      	bne.n	f14 <cbvprintf+0x1ec>
	if (*sp == '*') {
     e2a:	785a      	ldrb	r2, [r3, #1]
     e2c:	2a2a      	cmp	r2, #42	; 0x2a
     e2e:	d06a      	beq.n	f06 <cbvprintf+0x1de>
	++sp;
     e30:	3301      	adds	r3, #1
	size_t val = 0;
     e32:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     e34:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     e36:	4618      	mov	r0, r3
     e38:	f810 2b01 	ldrb.w	r2, [r0], #1
     e3c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e40:	2f09      	cmp	r7, #9
     e42:	f240 808e 	bls.w	f62 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     e46:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     e4a:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     e4c:	f3c2 0040 	ubfx	r0, r2, #1, #1
     e50:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     e54:	f361 0241 	bfi	r2, r1, #1, #1
     e58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     e5c:	e05a      	b.n	f14 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     e5e:	f10a 0702 	add.w	r7, sl, #2
     e62:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     e66:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e6a:	07d9      	lsls	r1, r3, #31
     e6c:	f140 8149 	bpl.w	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
			width = va_arg(ap, int);
     e70:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     e74:	f1b9 0f00 	cmp.w	r9, #0
     e78:	da07      	bge.n	e8a <cbvprintf+0x162>
				conv->flag_dash = true;
     e7a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e7e:	f042 0204 	orr.w	r2, r2, #4
     e82:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     e86:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     e8a:	075a      	lsls	r2, r3, #29
     e8c:	f140 8142 	bpl.w	1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>
			int arg = va_arg(ap, int);
     e90:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     e94:	f1b8 0f00 	cmp.w	r8, #0
     e98:	f280 8141 	bge.w	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
				conv->prec_present = false;
     e9c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ea0:	f36f 0341 	bfc	r3, #1, #1
     ea4:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     ea8:	f04f 38ff 	mov.w	r8, #4294967295
     eac:	e137      	b.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
		switch (*sp) {
     eae:	2b2d      	cmp	r3, #45	; 0x2d
     eb0:	d00c      	beq.n	ecc <cbvprintf+0x1a4>
     eb2:	2b30      	cmp	r3, #48	; 0x30
     eb4:	f47f af6d 	bne.w	d92 <cbvprintf+0x6a>
			conv->flag_zero = true;
     eb8:	2201      	movs	r2, #1
	} while (loop);
     eba:	e75c      	b.n	d76 <cbvprintf+0x4e>
			conv->flag_plus = true;
     ebc:	f04f 0c01 	mov.w	ip, #1
     ec0:	e759      	b.n	d76 <cbvprintf+0x4e>
			conv->flag_space = true;
     ec2:	f04f 0e01 	mov.w	lr, #1
     ec6:	e756      	b.n	d76 <cbvprintf+0x4e>
			conv->flag_hash = true;
     ec8:	2001      	movs	r0, #1
     eca:	e754      	b.n	d76 <cbvprintf+0x4e>
		switch (*sp) {
     ecc:	2601      	movs	r6, #1
     ece:	e752      	b.n	d76 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     ed0:	fb0c 0202 	mla	r2, ip, r2, r0
     ed4:	3a30      	subs	r2, #48	; 0x30
     ed6:	4633      	mov	r3, r6
     ed8:	461e      	mov	r6, r3
     eda:	f816 0b01 	ldrb.w	r0, [r6], #1
     ede:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     ee2:	2f09      	cmp	r7, #9
     ee4:	d9f4      	bls.n	ed0 <cbvprintf+0x1a8>
	if (sp != wp) {
     ee6:	4299      	cmp	r1, r3
     ee8:	d093      	beq.n	e12 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     eea:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     eee:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     ef0:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     ef2:	f362 0141 	bfi	r1, r2, #1, #1
     ef6:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     efa:	e78a      	b.n	e12 <cbvprintf+0xea>
     efc:	460b      	mov	r3, r1
	size_t val = 0;
     efe:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     f00:	f04f 0c0a 	mov.w	ip, #10
     f04:	e7e8      	b.n	ed8 <cbvprintf+0x1b0>
		conv->prec_star = true;
     f06:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f0a:	f042 0204 	orr.w	r2, r2, #4
     f0e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     f12:	3302      	adds	r3, #2
	switch (*sp) {
     f14:	461f      	mov	r7, r3
     f16:	f817 2b01 	ldrb.w	r2, [r7], #1
     f1a:	2a6c      	cmp	r2, #108	; 0x6c
     f1c:	d041      	beq.n	fa2 <cbvprintf+0x27a>
     f1e:	d825      	bhi.n	f6c <cbvprintf+0x244>
     f20:	2a68      	cmp	r2, #104	; 0x68
     f22:	d02b      	beq.n	f7c <cbvprintf+0x254>
     f24:	2a6a      	cmp	r2, #106	; 0x6a
     f26:	d046      	beq.n	fb6 <cbvprintf+0x28e>
     f28:	2a4c      	cmp	r2, #76	; 0x4c
     f2a:	d04c      	beq.n	fc6 <cbvprintf+0x29e>
     f2c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     f2e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     f32:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     f36:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     f3a:	2a78      	cmp	r2, #120	; 0x78
     f3c:	f200 80d9 	bhi.w	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
     f40:	2a57      	cmp	r2, #87	; 0x57
     f42:	d84d      	bhi.n	fe0 <cbvprintf+0x2b8>
     f44:	2a41      	cmp	r2, #65	; 0x41
     f46:	d003      	beq.n	f50 <cbvprintf+0x228>
     f48:	3a45      	subs	r2, #69	; 0x45
     f4a:	2a02      	cmp	r2, #2
     f4c:	f200 80d1 	bhi.w	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
		conv->specifier_cat = SPECIFIER_FP;
     f50:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     f54:	2204      	movs	r2, #4
     f56:	f362 0302 	bfi	r3, r2, #0, #3
     f5a:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     f5e:	2301      	movs	r3, #1
			break;
     f60:	e09e      	b.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
		val = 10U * val + *sp++ - '0';
     f62:	fb06 2101 	mla	r1, r6, r1, r2
     f66:	3930      	subs	r1, #48	; 0x30
     f68:	4603      	mov	r3, r0
     f6a:	e764      	b.n	e36 <cbvprintf+0x10e>
	switch (*sp) {
     f6c:	2a74      	cmp	r2, #116	; 0x74
     f6e:	d026      	beq.n	fbe <cbvprintf+0x296>
     f70:	2a7a      	cmp	r2, #122	; 0x7a
     f72:	d1db      	bne.n	f2c <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     f74:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f78:	2206      	movs	r2, #6
     f7a:	e00d      	b.n	f98 <cbvprintf+0x270>
		if (*++sp == 'h') {
     f7c:	785a      	ldrb	r2, [r3, #1]
     f7e:	2a68      	cmp	r2, #104	; 0x68
     f80:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f84:	d106      	bne.n	f94 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     f86:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     f88:	f361 02c6 	bfi	r2, r1, #3, #4
     f8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     f90:	1c9f      	adds	r7, r3, #2
     f92:	e7cc      	b.n	f2e <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     f94:	4613      	mov	r3, r2
     f96:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     f98:	f362 03c6 	bfi	r3, r2, #3, #4
     f9c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     fa0:	e7c5      	b.n	f2e <cbvprintf+0x206>
		if (*++sp == 'l') {
     fa2:	785a      	ldrb	r2, [r3, #1]
     fa4:	2a6c      	cmp	r2, #108	; 0x6c
     fa6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     faa:	d101      	bne.n	fb0 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     fac:	2104      	movs	r1, #4
     fae:	e7eb      	b.n	f88 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     fb0:	4613      	mov	r3, r2
     fb2:	2203      	movs	r2, #3
     fb4:	e7f0      	b.n	f98 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     fb6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fba:	2205      	movs	r2, #5
     fbc:	e7ec      	b.n	f98 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     fbe:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fc2:	2207      	movs	r2, #7
     fc4:	e7e8      	b.n	f98 <cbvprintf+0x270>
		conv->unsupported = true;
     fc6:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     fca:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     fce:	f023 0302 	bic.w	r3, r3, #2
     fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     fd6:	f043 0302 	orr.w	r3, r3, #2
     fda:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     fde:	e7a6      	b.n	f2e <cbvprintf+0x206>
	switch (conv->specifier) {
     fe0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     fe4:	2920      	cmp	r1, #32
     fe6:	f200 8084 	bhi.w	10f2 <CONFIG_FPROTECT_BLOCK_SIZE+0xf2>
     fea:	a001      	add	r0, pc, #4	; (adr r0, ff0 <cbvprintf+0x2c8>)
     fec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     ff0:	000010b5 	.word	0x000010b5
     ff4:	000010f3 	.word	0x000010f3
     ff8:	000010f3 	.word	0x000010f3
     ffc:	000010f3 	.word	0x000010f3
    1000:	000010f3 	.word	0x000010f3
    1004:	000010f3 	.word	0x000010f3
    1008:	000010f3 	.word	0x000010f3
    100c:	000010f3 	.word	0x000010f3
    1010:	000010f3 	.word	0x000010f3
    1014:	00000f51 	.word	0x00000f51
    1018:	000010f3 	.word	0x000010f3
    101c:	000010b5 	.word	0x000010b5
    1020:	00001075 	.word	0x00001075
    1024:	00000f51 	.word	0x00000f51
    1028:	00000f51 	.word	0x00000f51
    102c:	00000f51 	.word	0x00000f51
    1030:	000010f3 	.word	0x000010f3
    1034:	00001075 	.word	0x00001075
    1038:	000010f3 	.word	0x000010f3
    103c:	000010f3 	.word	0x000010f3
    1040:	000010f3 	.word	0x000010f3
    1044:	000010f3 	.word	0x000010f3
    1048:	000010bd 	.word	0x000010bd
    104c:	000010b5 	.word	0x000010b5
    1050:	000010d9 	.word	0x000010d9
    1054:	000010f3 	.word	0x000010f3
    1058:	000010f3 	.word	0x000010f3
    105c:	000010d9 	.word	0x000010d9
    1060:	000010f3 	.word	0x000010f3
    1064:	000010b5 	.word	0x000010b5
    1068:	000010f3 	.word	0x000010f3
    106c:	000010f3 	.word	0x000010f3
    1070:	000010b5 	.word	0x000010b5
		conv->specifier_cat = SPECIFIER_SINT;
    1074:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1078:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    107a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    107e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1082:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1084:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1088:	bf02      	ittt	eq
    108a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    108e:	f041 0101 	orreq.w	r1, r1, #1
    1092:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1096:	2a63      	cmp	r2, #99	; 0x63
    1098:	d131      	bne.n	10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
			unsupported = (conv->length_mod != LENGTH_NONE);
    109a:	3b00      	subs	r3, #0
    109c:	bf18      	it	ne
    109e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    10a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    10a4:	f3c2 0140 	ubfx	r1, r2, #1, #1
    10a8:	430b      	orrs	r3, r1
    10aa:	f363 0241 	bfi	r2, r3, #1, #1
    10ae:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    10b2:	e6d8      	b.n	e66 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    10b4:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    10b8:	2002      	movs	r0, #2
    10ba:	e7de      	b.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
		conv->specifier_cat = SPECIFIER_PTR;
    10bc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10c0:	f003 0378 	and.w	r3, r3, #120	; 0x78
    10c4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    10c8:	2103      	movs	r1, #3
    10ca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ce:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    10d0:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    10d4:	4143      	adcs	r3, r0
    10d6:	e7e3      	b.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
		conv->specifier_cat = SPECIFIER_PTR;
    10d8:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    10dc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    10de:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    10e2:	f361 0202 	bfi	r2, r1, #0, #3
    10e6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    10ea:	bf14      	ite	ne
    10ec:	2301      	movne	r3, #1
    10ee:	2300      	moveq	r3, #0
    10f0:	e7d6      	b.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
		conv->invalid = true;
    10f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    10f6:	f043 0301 	orr.w	r3, r3, #1
    10fa:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    10fe:	2300      	movs	r3, #0
    1100:	e7ce      	b.n	10a0 <CONFIG_FPROTECT_BLOCK_SIZE+0xa0>
		} else if (conv->width_present) {
    1102:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1106:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1108:	bfb4      	ite	lt
    110a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    110e:	f04f 39ff 	movge.w	r9, #4294967295
    1112:	e6ba      	b.n	e8a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1114:	079b      	lsls	r3, r3, #30
    1116:	f57f aec7 	bpl.w	ea8 <cbvprintf+0x180>
			precision = conv->prec_value;
    111a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    111e:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    1122:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1124:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1128:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    112c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1130:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1132:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1136:	d138      	bne.n	11aa <CONFIG_FPROTECT_BLOCK_SIZE+0x1aa>
			switch (length_mod) {
    1138:	1ecb      	subs	r3, r1, #3
    113a:	2b04      	cmp	r3, #4
    113c:	d822      	bhi.n	1184 <CONFIG_FPROTECT_BLOCK_SIZE+0x184>
    113e:	e8df f003 	tbb	[pc, r3]
    1142:	0903      	.short	0x0903
    1144:	2109      	.short	0x2109
    1146:	21          	.byte	0x21
    1147:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    1148:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    114c:	17da      	asrs	r2, r3, #31
    114e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    1152:	e006      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
					(sint_value_type)va_arg(ap, intmax_t);
    1154:	3407      	adds	r4, #7
    1156:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    115a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    115e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1162:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1166:	f013 0603 	ands.w	r6, r3, #3
    116a:	d056      	beq.n	121a <CONFIG_FPROTECT_BLOCK_SIZE+0x21a>
			OUTS(sp, fp);
    116c:	9802      	ldr	r0, [sp, #8]
    116e:	463b      	mov	r3, r7
    1170:	4652      	mov	r2, sl
    1172:	4659      	mov	r1, fp
    1174:	f005 fb1d 	bl	67b2 <outs>
    1178:	2800      	cmp	r0, #0
    117a:	f2c0 8142 	blt.w	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    117e:	4405      	add	r5, r0
			continue;
    1180:	46ba      	mov	sl, r7
    1182:	e5d9      	b.n	d38 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1184:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1188:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    118a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    118e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1192:	d105      	bne.n	11a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1a0>
				value->uint = (unsigned char)value->uint;
    1194:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1198:	930a      	str	r3, [sp, #40]	; 0x28
    119a:	2300      	movs	r3, #0
    119c:	930b      	str	r3, [sp, #44]	; 0x2c
    119e:	e7e0      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
			} else if (length_mod == LENGTH_H) {
    11a0:	2902      	cmp	r1, #2
    11a2:	d1de      	bne.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
				value->sint = (short)value->sint;
    11a4:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    11a8:	e7d0      	b.n	114c <CONFIG_FPROTECT_BLOCK_SIZE+0x14c>
		} else if (specifier_cat == SPECIFIER_UINT) {
    11aa:	2b02      	cmp	r3, #2
    11ac:	d123      	bne.n	11f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x1f6>
			switch (length_mod) {
    11ae:	1ecb      	subs	r3, r1, #3
    11b0:	2b04      	cmp	r3, #4
    11b2:	d813      	bhi.n	11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    11b4:	e8df f003 	tbb	[pc, r3]
    11b8:	120a0a03 	.word	0x120a0a03
    11bc:	12          	.byte	0x12
    11bd:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    11be:	6822      	ldr	r2, [r4, #0]
    11c0:	920a      	str	r2, [sp, #40]	; 0x28
    11c2:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    11c4:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    11c6:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    11c8:	4604      	mov	r4, r0
    11ca:	e7ca      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
					(uint_value_type)va_arg(ap,
    11cc:	1de0      	adds	r0, r4, #7
    11ce:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    11d2:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    11d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    11da:	e7f5      	b.n	11c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c8>
					(uint_value_type)va_arg(ap, size_t);
    11dc:	f854 3b04 	ldr.w	r3, [r4], #4
    11e0:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    11e2:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    11e4:	f04f 0300 	mov.w	r3, #0
    11e8:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    11ea:	d0d3      	beq.n	1194 <CONFIG_FPROTECT_BLOCK_SIZE+0x194>
			} else if (length_mod == LENGTH_H) {
    11ec:	2902      	cmp	r1, #2
    11ee:	d1b8      	bne.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
				value->uint = (unsigned short)value->uint;
    11f0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    11f4:	e7d0      	b.n	1198 <CONFIG_FPROTECT_BLOCK_SIZE+0x198>
		} else if (specifier_cat == SPECIFIER_FP) {
    11f6:	2b04      	cmp	r3, #4
    11f8:	d109      	bne.n	120e <CONFIG_FPROTECT_BLOCK_SIZE+0x20e>
					(sint_value_type)va_arg(ap, long long);
    11fa:	1de3      	adds	r3, r4, #7
    11fc:	f023 0307 	bic.w	r3, r3, #7
    1200:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1204:	e9d3 2300 	ldrd	r2, r3, [r3]
    1208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    120c:	e7a9      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
		} else if (specifier_cat == SPECIFIER_PTR) {
    120e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1210:	bf04      	itt	eq
    1212:	f854 3b04 	ldreq.w	r3, [r4], #4
    1216:	930a      	streq	r3, [sp, #40]	; 0x28
    1218:	e7a3      	b.n	1162 <CONFIG_FPROTECT_BLOCK_SIZE+0x162>
		switch (conv->specifier) {
    121a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    121e:	2878      	cmp	r0, #120	; 0x78
    1220:	d8ae      	bhi.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1222:	2862      	cmp	r0, #98	; 0x62
    1224:	d822      	bhi.n	126c <CONFIG_FPROTECT_BLOCK_SIZE+0x26c>
    1226:	2825      	cmp	r0, #37	; 0x25
    1228:	f43f ad8f 	beq.w	d4a <cbvprintf+0x22>
    122c:	2858      	cmp	r0, #88	; 0x58
    122e:	d1a7      	bne.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1230:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1234:	9300      	str	r3, [sp, #0]
    1236:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    123a:	ab04      	add	r3, sp, #16
    123c:	aa0c      	add	r2, sp, #48	; 0x30
    123e:	f005 fa72 	bl	6726 <encode_uint>
    1242:	4682      	mov	sl, r0
			if (precision >= 0) {
    1244:	f1b8 0f00 	cmp.w	r8, #0
    1248:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    124c:	db0c      	blt.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
				conv->flag_zero = false;
    124e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1252:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1256:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    125a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    125c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1260:	d902      	bls.n	1268 <CONFIG_FPROTECT_BLOCK_SIZE+0x268>
					conv->pad0_value = precision - (int)len;
    1262:	eba8 0303 	sub.w	r3, r8, r3
    1266:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1268:	4680      	mov	r8, r0
    126a:	e03d      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
		switch (conv->specifier) {
    126c:	3863      	subs	r0, #99	; 0x63
    126e:	2815      	cmp	r0, #21
    1270:	d886      	bhi.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    1272:	a201      	add	r2, pc, #4	; (adr r2, 1278 <CONFIG_FPROTECT_BLOCK_SIZE+0x278>)
    1274:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1278:	000012f9 	.word	0x000012f9
    127c:	0000135d 	.word	0x0000135d
    1280:	00001181 	.word	0x00001181
    1284:	00001181 	.word	0x00001181
    1288:	00001181 	.word	0x00001181
    128c:	00001181 	.word	0x00001181
    1290:	0000135d 	.word	0x0000135d
    1294:	00001181 	.word	0x00001181
    1298:	00001181 	.word	0x00001181
    129c:	00001181 	.word	0x00001181
    12a0:	00001181 	.word	0x00001181
    12a4:	000013b7 	.word	0x000013b7
    12a8:	00001385 	.word	0x00001385
    12ac:	00001389 	.word	0x00001389
    12b0:	00001181 	.word	0x00001181
    12b4:	00001181 	.word	0x00001181
    12b8:	000012d1 	.word	0x000012d1
    12bc:	00001181 	.word	0x00001181
    12c0:	00001385 	.word	0x00001385
    12c4:	00001181 	.word	0x00001181
    12c8:	00001181 	.word	0x00001181
    12cc:	00001385 	.word	0x00001385
			if (precision >= 0) {
    12d0:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    12d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    12d8:	db0a      	blt.n	12f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f0>
				len = strnlen(bps, precision);
    12da:	4641      	mov	r1, r8
    12dc:	4650      	mov	r0, sl
    12de:	f005 fd67 	bl	6db0 <strnlen>
			bpe = bps + len;
    12e2:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    12e6:	2600      	movs	r6, #0
		if (bps == NULL) {
    12e8:	f1ba 0f00 	cmp.w	sl, #0
    12ec:	d10c      	bne.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    12ee:	e747      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
				len = strlen(bps);
    12f0:	4650      	mov	r0, sl
    12f2:	f005 fd56 	bl	6da2 <strlen>
    12f6:	e7f4      	b.n	12e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    12f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    12fa:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    12fe:	2600      	movs	r6, #0
			bps = buf;
    1300:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1304:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1308:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    130c:	b106      	cbz	r6, 1310 <CONFIG_FPROTECT_BLOCK_SIZE+0x310>
			nj_len += 1U;
    130e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1310:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1314:	06d0      	lsls	r0, r2, #27
    1316:	d568      	bpl.n	13ea <CONFIG_FPROTECT_BLOCK_SIZE+0x3ea>
			nj_len += 2U;
    1318:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    131a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    131c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    131e:	bf48      	it	mi
    1320:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1322:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1324:	bf48      	it	mi
    1326:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1328:	f1b9 0f00 	cmp.w	r9, #0
    132c:	dd76      	ble.n	141c <CONFIG_FPROTECT_BLOCK_SIZE+0x41c>
			if (!conv->flag_dash) {
    132e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1332:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1336:	f3c2 0380 	ubfx	r3, r2, #2, #1
    133a:	9303      	str	r3, [sp, #12]
    133c:	0753      	lsls	r3, r2, #29
    133e:	d46d      	bmi.n	141c <CONFIG_FPROTECT_BLOCK_SIZE+0x41c>
				if (conv->flag_zero) {
    1340:	0650      	lsls	r0, r2, #25
    1342:	d561      	bpl.n	1408 <CONFIG_FPROTECT_BLOCK_SIZE+0x408>
					if (sign != 0) {
    1344:	b146      	cbz	r6, 1358 <CONFIG_FPROTECT_BLOCK_SIZE+0x358>
						OUTC(sign);
    1346:	9b02      	ldr	r3, [sp, #8]
    1348:	4659      	mov	r1, fp
    134a:	4630      	mov	r0, r6
    134c:	4798      	blx	r3
    134e:	2800      	cmp	r0, #0
    1350:	db57      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
						sign = 0;
    1352:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1354:	3501      	adds	r5, #1
						sign = 0;
    1356:	461e      	mov	r6, r3
					pad = '0';
    1358:	2330      	movs	r3, #48	; 0x30
    135a:	e056      	b.n	140a <CONFIG_FPROTECT_BLOCK_SIZE+0x40a>
			if (conv->flag_plus) {
    135c:	071e      	lsls	r6, r3, #28
    135e:	d40f      	bmi.n	1380 <CONFIG_FPROTECT_BLOCK_SIZE+0x380>
				sign = ' ';
    1360:	f013 0610 	ands.w	r6, r3, #16
    1364:	bf18      	it	ne
    1366:	2620      	movne	r6, #32
			sint = value->sint;
    1368:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    136c:	2b00      	cmp	r3, #0
    136e:	f6bf af5f 	bge.w	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
				value->uint = (uint_value_type)-sint;
    1372:	4252      	negs	r2, r2
    1374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1378:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    137c:	262d      	movs	r6, #45	; 0x2d
    137e:	e757      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
				sign = '+';
    1380:	262b      	movs	r6, #43	; 0x2b
    1382:	e7f1      	b.n	1368 <CONFIG_FPROTECT_BLOCK_SIZE+0x368>
		switch (conv->specifier) {
    1384:	2600      	movs	r6, #0
    1386:	e753      	b.n	1230 <CONFIG_FPROTECT_BLOCK_SIZE+0x230>
			if (value->ptr != NULL) {
    1388:	980a      	ldr	r0, [sp, #40]	; 0x28
    138a:	b340      	cbz	r0, 13de <CONFIG_FPROTECT_BLOCK_SIZE+0x3de>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    138c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1390:	9300      	str	r3, [sp, #0]
    1392:	aa0c      	add	r2, sp, #48	; 0x30
    1394:	ab04      	add	r3, sp, #16
    1396:	2100      	movs	r1, #0
    1398:	f005 f9c5 	bl	6726 <encode_uint>
				conv->altform_0c = true;
    139c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    13a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    13a4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    13a8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    13ac:	4682      	mov	sl, r0
				conv->altform_0c = true;
    13ae:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    13b2:	2600      	movs	r6, #0
				goto prec_int_pad0;
    13b4:	e746      	b.n	1244 <CONFIG_FPROTECT_BLOCK_SIZE+0x244>
				store_count(conv, value->ptr, count);
    13b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    13b8:	2907      	cmp	r1, #7
    13ba:	f63f aee1 	bhi.w	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
    13be:	e8df f001 	tbb	[pc, r1]
    13c2:	040c      	.short	0x040c
    13c4:	08080c06 	.word	0x08080c06
    13c8:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    13ca:	701d      	strb	r5, [r3, #0]
		break;
    13cc:	e6d8      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
		*(short *)dp = (short)count;
    13ce:	801d      	strh	r5, [r3, #0]
		break;
    13d0:	e6d6      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
		*(intmax_t *)dp = (intmax_t)count;
    13d2:	17ea      	asrs	r2, r5, #31
    13d4:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    13d8:	e6d2      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    13da:	601d      	str	r5, [r3, #0]
		break;
    13dc:	e6d0      	b.n	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
			bps = "(nil)";
    13de:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 14a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a8>
    13e2:	4606      	mov	r6, r0
			bpe = bps + 5;
    13e4:	f10a 0805 	add.w	r8, sl, #5
    13e8:	e78e      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		} else if (conv->altform_0) {
    13ea:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    13ec:	bf48      	it	mi
    13ee:	3301      	addmi	r3, #1
    13f0:	e793      	b.n	131a <CONFIG_FPROTECT_BLOCK_SIZE+0x31a>
					OUTC(pad);
    13f2:	4618      	mov	r0, r3
    13f4:	9303      	str	r3, [sp, #12]
    13f6:	4659      	mov	r1, fp
    13f8:	9b02      	ldr	r3, [sp, #8]
    13fa:	4798      	blx	r3
    13fc:	2800      	cmp	r0, #0
    13fe:	9b03      	ldr	r3, [sp, #12]
    1400:	da04      	bge.n	140c <CONFIG_FPROTECT_BLOCK_SIZE+0x40c>
#undef OUTS
#undef OUTC
}
    1402:	b011      	add	sp, #68	; 0x44
    1404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1408:	2320      	movs	r3, #32
    140a:	444d      	add	r5, r9
    140c:	464a      	mov	r2, r9
				while (width-- > 0) {
    140e:	2a00      	cmp	r2, #0
    1410:	eba5 0109 	sub.w	r1, r5, r9
    1414:	f109 39ff 	add.w	r9, r9, #4294967295
    1418:	dceb      	bgt.n	13f2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f2>
    141a:	460d      	mov	r5, r1
		if (sign != 0) {
    141c:	b136      	cbz	r6, 142c <CONFIG_FPROTECT_BLOCK_SIZE+0x42c>
			OUTC(sign);
    141e:	9b02      	ldr	r3, [sp, #8]
    1420:	4659      	mov	r1, fp
    1422:	4630      	mov	r0, r6
    1424:	4798      	blx	r3
    1426:	2800      	cmp	r0, #0
    1428:	dbeb      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    142a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    142c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1430:	06d9      	lsls	r1, r3, #27
    1432:	d401      	bmi.n	1438 <CONFIG_FPROTECT_BLOCK_SIZE+0x438>
    1434:	071a      	lsls	r2, r3, #28
    1436:	d506      	bpl.n	1446 <CONFIG_FPROTECT_BLOCK_SIZE+0x446>
				OUTC('0');
    1438:	9b02      	ldr	r3, [sp, #8]
    143a:	4659      	mov	r1, fp
    143c:	2030      	movs	r0, #48	; 0x30
    143e:	4798      	blx	r3
    1440:	2800      	cmp	r0, #0
    1442:	dbde      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    1444:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1446:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    144a:	06db      	lsls	r3, r3, #27
    144c:	d507      	bpl.n	145e <CONFIG_FPROTECT_BLOCK_SIZE+0x45e>
				OUTC(conv->specifier);
    144e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1452:	9b02      	ldr	r3, [sp, #8]
    1454:	4659      	mov	r1, fp
    1456:	4798      	blx	r3
    1458:	2800      	cmp	r0, #0
    145a:	dbd2      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    145c:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    145e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1460:	442e      	add	r6, r5
    1462:	1b73      	subs	r3, r6, r5
    1464:	2b00      	cmp	r3, #0
    1466:	dc16      	bgt.n	1496 <CONFIG_FPROTECT_BLOCK_SIZE+0x496>
			OUTS(bps, bpe);
    1468:	9802      	ldr	r0, [sp, #8]
    146a:	4643      	mov	r3, r8
    146c:	4652      	mov	r2, sl
    146e:	4659      	mov	r1, fp
    1470:	f005 f99f 	bl	67b2 <outs>
    1474:	2800      	cmp	r0, #0
    1476:	dbc4      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    1478:	4405      	add	r5, r0
		while (width > 0) {
    147a:	44a9      	add	r9, r5
    147c:	eba9 0305 	sub.w	r3, r9, r5
    1480:	2b00      	cmp	r3, #0
    1482:	f77f ae7d 	ble.w	1180 <CONFIG_FPROTECT_BLOCK_SIZE+0x180>
			OUTC(' ');
    1486:	9b02      	ldr	r3, [sp, #8]
    1488:	4659      	mov	r1, fp
    148a:	2020      	movs	r0, #32
    148c:	4798      	blx	r3
    148e:	2800      	cmp	r0, #0
    1490:	dbb7      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    1492:	3501      	adds	r5, #1
			--width;
    1494:	e7f2      	b.n	147c <CONFIG_FPROTECT_BLOCK_SIZE+0x47c>
				OUTC('0');
    1496:	9b02      	ldr	r3, [sp, #8]
    1498:	4659      	mov	r1, fp
    149a:	2030      	movs	r0, #48	; 0x30
    149c:	4798      	blx	r3
    149e:	2800      	cmp	r0, #0
    14a0:	dbaf      	blt.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    14a2:	3501      	adds	r5, #1
    14a4:	e7dd      	b.n	1462 <CONFIG_FPROTECT_BLOCK_SIZE+0x462>
    14a6:	bf00      	nop
    14a8:	00007e8e 	.word	0x00007e8e

000014ac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    14ac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    14ae:	4910      	ldr	r1, [pc, #64]	; (14f0 <enable_logger+0x44>)
    14b0:	4810      	ldr	r0, [pc, #64]	; (14f4 <enable_logger+0x48>)
{
    14b2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    14b4:	2200      	movs	r2, #0
    14b6:	f006 f984 	bl	77c2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    14ba:	4d0f      	ldr	r5, [pc, #60]	; (14f8 <enable_logger+0x4c>)
    14bc:	490f      	ldr	r1, [pc, #60]	; (14fc <enable_logger+0x50>)
    14be:	2200      	movs	r2, #0
    14c0:	2300      	movs	r3, #0
    14c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    14c6:	2400      	movs	r4, #0
    14c8:	230e      	movs	r3, #14
    14ca:	e9cd 3403 	strd	r3, r4, [sp, #12]
    14ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
    14d2:	4b0b      	ldr	r3, [pc, #44]	; (1500 <enable_logger+0x54>)
    14d4:	9400      	str	r4, [sp, #0]
    14d6:	f44f 7240 	mov.w	r2, #768	; 0x300
    14da:	4628      	mov	r0, r5
    14dc:	f004 f90e 	bl	56fc <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    14e0:	4908      	ldr	r1, [pc, #32]	; (1504 <enable_logger+0x58>)
    14e2:	4628      	mov	r0, r5
    14e4:	f006 f83e 	bl	7564 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    14e8:	4620      	mov	r0, r4
    14ea:	b009      	add	sp, #36	; 0x24
    14ec:	bd30      	pop	{r4, r5, pc}
    14ee:	bf00      	nop
    14f0:	00001509 	.word	0x00001509
    14f4:	20000600 	.word	0x20000600
    14f8:	20000638 	.word	0x20000638
    14fc:	20000ec0 	.word	0x20000ec0
    1500:	0000172d 	.word	0x0000172d
    1504:	00007e94 	.word	0x00007e94

00001508 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1508:	4801      	ldr	r0, [pc, #4]	; (1510 <log_process_thread_timer_expiry_fn+0x8>)
    150a:	f004 ba55 	b.w	59b8 <z_impl_k_sem_give>
    150e:	bf00      	nop
    1510:	200001ec 	.word	0x200001ec

00001514 <log_format_func_t_get>:
}
    1514:	4b01      	ldr	r3, [pc, #4]	; (151c <log_format_func_t_get+0x8>)
    1516:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    151a:	4770      	bx	lr
    151c:	00007b28 	.word	0x00007b28

00001520 <log_init>:
{
    1520:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1522:	4b12      	ldr	r3, [pc, #72]	; (156c <log_init+0x4c>)
    1524:	f3bf 8f5b 	dmb	ish
    1528:	e853 5f00 	ldrex	r5, [r3]
    152c:	1c6a      	adds	r2, r5, #1
    152e:	e843 2100 	strex	r1, r2, [r3]
    1532:	2900      	cmp	r1, #0
    1534:	d1f8      	bne.n	1528 <log_init+0x8>
    1536:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    153a:	b92d      	cbnz	r5, 1548 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    153c:	4c0c      	ldr	r4, [pc, #48]	; (1570 <log_init+0x50>)
    153e:	4e0d      	ldr	r6, [pc, #52]	; (1574 <log_init+0x54>)
    1540:	1b36      	subs	r6, r6, r4
    1542:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    1544:	42b5      	cmp	r5, r6
    1546:	db00      	blt.n	154a <log_init+0x2a>
}
    1548:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    154a:	7b23      	ldrb	r3, [r4, #12]
    154c:	b153      	cbz	r3, 1564 <log_init+0x44>
			if (backend->api->init != NULL) {
    154e:	6823      	ldr	r3, [r4, #0]
    1550:	699b      	ldr	r3, [r3, #24]
    1552:	b10b      	cbz	r3, 1558 <log_init+0x38>
				backend->api->init(backend);
    1554:	4620      	mov	r0, r4
    1556:	4798      	blx	r3
			log_backend_enable(backend,
    1558:	6863      	ldr	r3, [r4, #4]
    155a:	2204      	movs	r2, #4
    155c:	6819      	ldr	r1, [r3, #0]
    155e:	4620      	mov	r0, r4
    1560:	f000 f992 	bl	1888 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1564:	3501      	adds	r5, #1
    1566:	3410      	adds	r4, #16
    1568:	e7ec      	b.n	1544 <log_init+0x24>
    156a:	bf00      	nop
    156c:	200007e8 	.word	0x200007e8
    1570:	00007ac4 	.word	0x00007ac4
    1574:	00007ae4 	.word	0x00007ae4

00001578 <z_log_notify_backend_enabled>:
{
    1578:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    157a:	4c04      	ldr	r4, [pc, #16]	; (158c <z_log_notify_backend_enabled+0x14>)
    157c:	7823      	ldrb	r3, [r4, #0]
    157e:	b913      	cbnz	r3, 1586 <z_log_notify_backend_enabled+0xe>
    1580:	4803      	ldr	r0, [pc, #12]	; (1590 <z_log_notify_backend_enabled+0x18>)
    1582:	f004 fa19 	bl	59b8 <z_impl_k_sem_give>
	backend_attached = true;
    1586:	2301      	movs	r3, #1
    1588:	7023      	strb	r3, [r4, #0]
}
    158a:	bd10      	pop	{r4, pc}
    158c:	20000a92 	.word	0x20000a92
    1590:	200001ec 	.word	0x200001ec

00001594 <z_log_dropped>:
    1594:	4b0c      	ldr	r3, [pc, #48]	; (15c8 <z_log_dropped+0x34>)
    1596:	f3bf 8f5b 	dmb	ish
    159a:	e853 2f00 	ldrex	r2, [r3]
    159e:	3201      	adds	r2, #1
    15a0:	e843 2100 	strex	r1, r2, [r3]
    15a4:	2900      	cmp	r1, #0
    15a6:	d1f8      	bne.n	159a <z_log_dropped+0x6>
    15a8:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    15ac:	b158      	cbz	r0, 15c6 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    15ae:	f3bf 8f5b 	dmb	ish
    15b2:	4b06      	ldr	r3, [pc, #24]	; (15cc <z_log_dropped+0x38>)
    15b4:	e853 2f00 	ldrex	r2, [r3]
    15b8:	3a01      	subs	r2, #1
    15ba:	e843 2100 	strex	r1, r2, [r3]
    15be:	2900      	cmp	r1, #0
    15c0:	d1f8      	bne.n	15b4 <z_log_dropped+0x20>
    15c2:	f3bf 8f5b 	dmb	ish
}
    15c6:	4770      	bx	lr
    15c8:	200007e4 	.word	0x200007e4
    15cc:	200007e0 	.word	0x200007e0

000015d0 <z_log_dropped_read_and_clear>:
}
    15d0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    15d2:	4b06      	ldr	r3, [pc, #24]	; (15ec <z_log_dropped_read_and_clear+0x1c>)
    15d4:	f3bf 8f5b 	dmb	ish
    15d8:	4602      	mov	r2, r0
    15da:	e853 0f00 	ldrex	r0, [r3]
    15de:	e843 2100 	strex	r1, r2, [r3]
    15e2:	2900      	cmp	r1, #0
    15e4:	d1f9      	bne.n	15da <z_log_dropped_read_and_clear+0xa>
    15e6:	f3bf 8f5b 	dmb	ish
    15ea:	4770      	bx	lr
    15ec:	200007e4 	.word	0x200007e4

000015f0 <dropped_notify>:
{
    15f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    15f2:	f7ff ffed 	bl	15d0 <z_log_dropped_read_and_clear>
    15f6:	4c0a      	ldr	r4, [pc, #40]	; (1620 <dropped_notify+0x30>)
    15f8:	4d0a      	ldr	r5, [pc, #40]	; (1624 <dropped_notify+0x34>)
    15fa:	1b2d      	subs	r5, r5, r4
    15fc:	4607      	mov	r7, r0
    15fe:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1600:	2600      	movs	r6, #0
    1602:	42ae      	cmp	r6, r5
    1604:	db00      	blt.n	1608 <dropped_notify+0x18>
}
    1606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1608:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    160a:	795b      	ldrb	r3, [r3, #5]
    160c:	b12b      	cbz	r3, 161a <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    160e:	6823      	ldr	r3, [r4, #0]
    1610:	691b      	ldr	r3, [r3, #16]
    1612:	b113      	cbz	r3, 161a <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    1614:	4639      	mov	r1, r7
    1616:	4620      	mov	r0, r4
    1618:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    161a:	3601      	adds	r6, #1
    161c:	3410      	adds	r4, #16
    161e:	e7f0      	b.n	1602 <dropped_notify+0x12>
    1620:	00007ac4 	.word	0x00007ac4
    1624:	00007ae4 	.word	0x00007ae4

00001628 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1628:	4901      	ldr	r1, [pc, #4]	; (1630 <z_log_msg2_init+0x8>)
    162a:	4802      	ldr	r0, [pc, #8]	; (1634 <z_log_msg2_init+0xc>)
    162c:	f005 b98c 	b.w	6948 <mpsc_pbuf_init>
    1630:	00007b34 	.word	0x00007b34
    1634:	200007ec 	.word	0x200007ec

00001638 <log_core_init>:
	panic_mode = false;
    1638:	4a08      	ldr	r2, [pc, #32]	; (165c <log_core_init+0x24>)
{
    163a:	b508      	push	{r3, lr}
	panic_mode = false;
    163c:	2300      	movs	r3, #0
    163e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1640:	4a07      	ldr	r2, [pc, #28]	; (1660 <log_core_init+0x28>)
    1642:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    1644:	4b07      	ldr	r3, [pc, #28]	; (1664 <log_core_init+0x2c>)
    1646:	4a08      	ldr	r2, [pc, #32]	; (1668 <log_core_init+0x30>)
    1648:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    164a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    164e:	f000 fafb 	bl	1c48 <log_output_timestamp_freq_set>
}
    1652:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    1656:	f7ff bfe7 	b.w	1628 <z_log_msg2_init>
    165a:	bf00      	nop
    165c:	20000a93 	.word	0x20000a93
    1660:	200007e4 	.word	0x200007e4
    1664:	20000004 	.word	0x20000004
    1668:	00006bf1 	.word	0x00006bf1

0000166c <z_log_msg2_alloc>:
{
    166c:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    166e:	2200      	movs	r2, #0
    1670:	4801      	ldr	r0, [pc, #4]	; (1678 <z_log_msg2_alloc+0xc>)
    1672:	2300      	movs	r3, #0
    1674:	f005 b989 	b.w	698a <mpsc_pbuf_alloc>
    1678:	200007ec 	.word	0x200007ec

0000167c <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    167c:	4801      	ldr	r0, [pc, #4]	; (1684 <z_log_msg2_claim+0x8>)
    167e:	f005 ba1a 	b.w	6ab6 <mpsc_pbuf_claim>
    1682:	bf00      	nop
    1684:	200007ec 	.word	0x200007ec

00001688 <z_log_msg2_free>:
{
    1688:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    168a:	4801      	ldr	r0, [pc, #4]	; (1690 <z_log_msg2_free+0x8>)
    168c:	f005 ba5f 	b.w	6b4e <mpsc_pbuf_free>
    1690:	200007ec 	.word	0x200007ec

00001694 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1694:	4801      	ldr	r0, [pc, #4]	; (169c <z_log_msg2_pending+0x8>)
    1696:	f005 ba8e 	b.w	6bb6 <mpsc_pbuf_is_pending>
    169a:	bf00      	nop
    169c:	200007ec 	.word	0x200007ec

000016a0 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    16a0:	4b1d      	ldr	r3, [pc, #116]	; (1718 <z_impl_log_process+0x78>)
    16a2:	781b      	ldrb	r3, [r3, #0]
{
    16a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16a8:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    16aa:	b903      	cbnz	r3, 16ae <z_impl_log_process+0xe>
    16ac:	b388      	cbz	r0, 1712 <z_impl_log_process+0x72>
	msg = get_msg();
    16ae:	f005 fab4 	bl	6c1a <get_msg>
	if (msg.msg) {
    16b2:	4606      	mov	r6, r0
    16b4:	b118      	cbz	r0, 16be <z_impl_log_process+0x1e>
		if (!bypass) {
    16b6:	b16d      	cbz	r5, 16d4 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    16b8:	4630      	mov	r0, r6
    16ba:	f7ff ffe5 	bl	1688 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    16be:	b92d      	cbnz	r5, 16cc <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    16c0:	4b16      	ldr	r3, [pc, #88]	; (171c <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    16c2:	681b      	ldr	r3, [r3, #0]
    16c4:	2b00      	cmp	r3, #0
    16c6:	dd01      	ble.n	16cc <z_impl_log_process+0x2c>
		dropped_notify();
    16c8:	f7ff ff92 	bl	15f0 <dropped_notify>
}
    16cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    16d0:	f7ff bfe0 	b.w	1694 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    16d4:	4b12      	ldr	r3, [pc, #72]	; (1720 <z_impl_log_process+0x80>)
    16d6:	f3bf 8f5b 	dmb	ish
    16da:	e853 2f00 	ldrex	r2, [r3]
    16de:	3a01      	subs	r2, #1
    16e0:	e843 2100 	strex	r1, r2, [r3]
    16e4:	2900      	cmp	r1, #0
    16e6:	d1f8      	bne.n	16da <z_impl_log_process+0x3a>
    16e8:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    16ec:	4c0d      	ldr	r4, [pc, #52]	; (1724 <z_impl_log_process+0x84>)
    16ee:	4f0e      	ldr	r7, [pc, #56]	; (1728 <z_impl_log_process+0x88>)
    16f0:	1b3f      	subs	r7, r7, r4
    16f2:	113f      	asrs	r7, r7, #4
    16f4:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    16f6:	45b8      	cmp	r8, r7
    16f8:	dade      	bge.n	16b8 <z_impl_log_process+0x18>
	return backend->cb->active;
    16fa:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    16fc:	795b      	ldrb	r3, [r3, #5]
    16fe:	b123      	cbz	r3, 170a <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1700:	6823      	ldr	r3, [r4, #0]
    1702:	4631      	mov	r1, r6
    1704:	681b      	ldr	r3, [r3, #0]
    1706:	4620      	mov	r0, r4
    1708:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    170a:	f108 0801 	add.w	r8, r8, #1
    170e:	3410      	adds	r4, #16
    1710:	e7f1      	b.n	16f6 <z_impl_log_process+0x56>
}
    1712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1716:	bf00      	nop
    1718:	20000a92 	.word	0x20000a92
    171c:	200007e4 	.word	0x200007e4
    1720:	200007e0 	.word	0x200007e0
    1724:	00007ac4 	.word	0x00007ac4
    1728:	00007ae4 	.word	0x00007ae4

0000172c <log_process_thread_func>:
{
    172c:	b510      	push	{r4, lr}
	log_init();
    172e:	f7ff fef7 	bl	1520 <log_init>
	return z_impl_z_current_get();
    1732:	f004 fc7b 	bl	602c <z_impl_z_current_get>
	proc_tid = process_tid;
    1736:	4b0c      	ldr	r3, [pc, #48]	; (1768 <log_process_thread_func+0x3c>)
    1738:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    173a:	b130      	cbz	r0, 174a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    173c:	4b0b      	ldr	r3, [pc, #44]	; (176c <log_process_thread_func+0x40>)
	    process_tid &&
    173e:	681b      	ldr	r3, [r3, #0]
    1740:	2b09      	cmp	r3, #9
    1742:	dd02      	ble.n	174a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1744:	480a      	ldr	r0, [pc, #40]	; (1770 <log_process_thread_func+0x44>)
    1746:	f004 f937 	bl	59b8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    174a:	4c09      	ldr	r4, [pc, #36]	; (1770 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    174c:	2000      	movs	r0, #0
    174e:	f7ff ffa7 	bl	16a0 <z_impl_log_process>
		if (log_process(false) == false) {
    1752:	2800      	cmp	r0, #0
    1754:	d1fa      	bne.n	174c <log_process_thread_func+0x20>
    1756:	f04f 32ff 	mov.w	r2, #4294967295
    175a:	f04f 33ff 	mov.w	r3, #4294967295
    175e:	4620      	mov	r0, r4
    1760:	f004 f94a 	bl	59f8 <z_impl_k_sem_take>
    1764:	e7f2      	b.n	174c <log_process_thread_func+0x20>
    1766:	bf00      	nop
    1768:	20000824 	.word	0x20000824
    176c:	200007e0 	.word	0x200007e0
    1770:	200001ec 	.word	0x200001ec

00001774 <z_log_msg_post_finalize>:
{
    1774:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1776:	4b1d      	ldr	r3, [pc, #116]	; (17ec <z_log_msg_post_finalize+0x78>)
    1778:	f3bf 8f5b 	dmb	ish
    177c:	e853 2f00 	ldrex	r2, [r3]
    1780:	1c51      	adds	r1, r2, #1
    1782:	e843 1000 	strex	r0, r1, [r3]
    1786:	2800      	cmp	r0, #0
    1788:	d1f8      	bne.n	177c <z_log_msg_post_finalize+0x8>
    178a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    178e:	4b18      	ldr	r3, [pc, #96]	; (17f0 <z_log_msg_post_finalize+0x7c>)
    1790:	781b      	ldrb	r3, [r3, #0]
    1792:	b183      	cbz	r3, 17b6 <z_log_msg_post_finalize+0x42>
    1794:	f04f 0320 	mov.w	r3, #32
    1798:	f3ef 8411 	mrs	r4, BASEPRI
    179c:	f383 8812 	msr	BASEPRI_MAX, r3
    17a0:	f3bf 8f6f 	isb	sy
    17a4:	2000      	movs	r0, #0
    17a6:	f7ff ff7b 	bl	16a0 <z_impl_log_process>
	__asm__ volatile(
    17aa:	f384 8811 	msr	BASEPRI, r4
    17ae:	f3bf 8f6f 	isb	sy
}
    17b2:	b002      	add	sp, #8
    17b4:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    17b6:	4b0f      	ldr	r3, [pc, #60]	; (17f4 <z_log_msg_post_finalize+0x80>)
    17b8:	681b      	ldr	r3, [r3, #0]
    17ba:	2b00      	cmp	r3, #0
    17bc:	d0f9      	beq.n	17b2 <z_log_msg_post_finalize+0x3e>
    17be:	b952      	cbnz	r2, 17d6 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    17c0:	2200      	movs	r2, #0
    17c2:	2300      	movs	r3, #0
    17c4:	e9cd 2300 	strd	r2, r3, [sp]
    17c8:	480b      	ldr	r0, [pc, #44]	; (17f8 <z_log_msg_post_finalize+0x84>)
    17ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    17ce:	2300      	movs	r3, #0
    17d0:	f004 fe1c 	bl	640c <z_impl_k_timer_start>
    17d4:	e7ed      	b.n	17b2 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    17d6:	2a0a      	cmp	r2, #10
    17d8:	d1eb      	bne.n	17b2 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    17da:	4807      	ldr	r0, [pc, #28]	; (17f8 <z_log_msg_post_finalize+0x84>)
    17dc:	f005 fffd 	bl	77da <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    17e0:	4806      	ldr	r0, [pc, #24]	; (17fc <z_log_msg_post_finalize+0x88>)
}
    17e2:	b002      	add	sp, #8
    17e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17e8:	f004 b8e6 	b.w	59b8 <z_impl_k_sem_give>
    17ec:	200007e0 	.word	0x200007e0
    17f0:	20000a93 	.word	0x20000a93
    17f4:	20000824 	.word	0x20000824
    17f8:	20000600 	.word	0x20000600
    17fc:	200001ec 	.word	0x200001ec

00001800 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1800:	4b06      	ldr	r3, [pc, #24]	; (181c <z_log_msg2_commit+0x1c>)
{
    1802:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1804:	681b      	ldr	r3, [r3, #0]
{
    1806:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1808:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    180a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    180c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    180e:	4804      	ldr	r0, [pc, #16]	; (1820 <z_log_msg2_commit+0x20>)
    1810:	f005 f931 	bl	6a76 <mpsc_pbuf_commit>
}
    1814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1818:	f7ff bfac 	b.w	1774 <z_log_msg_post_finalize>
    181c:	20000004 	.word	0x20000004
    1820:	200007ec 	.word	0x200007ec

00001824 <z_impl_log_panic>:
{
    1824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1826:	4f0e      	ldr	r7, [pc, #56]	; (1860 <z_impl_log_panic+0x3c>)
    1828:	783d      	ldrb	r5, [r7, #0]
    182a:	b975      	cbnz	r5, 184a <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    182c:	4c0d      	ldr	r4, [pc, #52]	; (1864 <z_impl_log_panic+0x40>)
    182e:	4e0e      	ldr	r6, [pc, #56]	; (1868 <z_impl_log_panic+0x44>)
	log_init();
    1830:	f7ff fe76 	bl	1520 <log_init>
    1834:	1b36      	subs	r6, r6, r4
    1836:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1838:	42b5      	cmp	r5, r6
    183a:	db07      	blt.n	184c <z_impl_log_panic+0x28>
    183c:	2000      	movs	r0, #0
    183e:	f7ff ff2f 	bl	16a0 <z_impl_log_process>
		while (log_process(false) == true) {
    1842:	2800      	cmp	r0, #0
    1844:	d1fa      	bne.n	183c <z_impl_log_panic+0x18>
	panic_mode = true;
    1846:	2301      	movs	r3, #1
    1848:	703b      	strb	r3, [r7, #0]
}
    184a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    184c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    184e:	795b      	ldrb	r3, [r3, #5]
    1850:	b11b      	cbz	r3, 185a <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1852:	6823      	ldr	r3, [r4, #0]
    1854:	4620      	mov	r0, r4
    1856:	695b      	ldr	r3, [r3, #20]
    1858:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    185a:	3501      	adds	r5, #1
    185c:	3410      	adds	r4, #16
    185e:	e7eb      	b.n	1838 <z_impl_log_panic+0x14>
    1860:	20000a93 	.word	0x20000a93
    1864:	00007ac4 	.word	0x00007ac4
    1868:	00007ae4 	.word	0x00007ae4

0000186c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    186c:	4a04      	ldr	r2, [pc, #16]	; (1880 <log_source_name_get+0x14>)
    186e:	4b05      	ldr	r3, [pc, #20]	; (1884 <log_source_name_get+0x18>)
    1870:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1872:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1876:	bf34      	ite	cc
    1878:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    187c:	2000      	movcs	r0, #0
}
    187e:	4770      	bx	lr
    1880:	00007a6c 	.word	0x00007a6c
    1884:	00007ac4 	.word	0x00007ac4

00001888 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1888:	4a05      	ldr	r2, [pc, #20]	; (18a0 <log_backend_enable+0x18>)
	backend->cb->id = id;
    188a:	6843      	ldr	r3, [r0, #4]
    188c:	1a80      	subs	r0, r0, r2
    188e:	1100      	asrs	r0, r0, #4
    1890:	3001      	adds	r0, #1
	backend->cb->active = true;
    1892:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1894:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1896:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1898:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    189a:	f7ff be6d 	b.w	1578 <z_log_notify_backend_enabled>
    189e:	bf00      	nop
    18a0:	00007ac4 	.word	0x00007ac4

000018a4 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    18a4:	b40e      	push	{r1, r2, r3}
    18a6:	b503      	push	{r0, r1, lr}
    18a8:	ab03      	add	r3, sp, #12
    18aa:	4601      	mov	r1, r0
    18ac:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    18b0:	4804      	ldr	r0, [pc, #16]	; (18c4 <print_formatted+0x20>)
	va_start(args, fmt);
    18b2:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    18b4:	f7ff fa38 	bl	d28 <cbvprintf>
	va_end(args);

	return length;
}
    18b8:	b002      	add	sp, #8
    18ba:	f85d eb04 	ldr.w	lr, [sp], #4
    18be:	b003      	add	sp, #12
    18c0:	4770      	bx	lr
    18c2:	bf00      	nop
    18c4:	00006c5b 	.word	0x00006c5b

000018c8 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    18c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    18cc:	461d      	mov	r5, r3
    18ce:	9b08      	ldr	r3, [sp, #32]
    18d0:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    18d2:	06da      	lsls	r2, r3, #27
{
    18d4:	4604      	mov	r4, r0
    18d6:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    18d8:	d405      	bmi.n	18e6 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    18da:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    18dc:	bf4c      	ite	mi
    18de:	492a      	ldrmi	r1, [pc, #168]	; (1988 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    18e0:	492a      	ldrpl	r1, [pc, #168]	; (198c <hexdump_line_print+0xc4>)
    18e2:	f7ff ffdf 	bl	18a4 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    18e6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1990 <hexdump_line_print+0xc8>
{
    18ea:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    18ee:	45a8      	cmp	r8, r5
    18f0:	db2a      	blt.n	1948 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    18f2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1994 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    18f6:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1998 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    18fa:	f8df a094 	ldr.w	sl, [pc, #148]	; 1990 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18fe:	2500      	movs	r5, #0
		if (i < length) {
    1900:	42bd      	cmp	r5, r7
    1902:	d22f      	bcs.n	1964 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1904:	5d72      	ldrb	r2, [r6, r5]
    1906:	4649      	mov	r1, r9
    1908:	4620      	mov	r0, r4
    190a:	f7ff ffcb 	bl	18a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    190e:	3501      	adds	r5, #1
    1910:	2d10      	cmp	r5, #16
    1912:	d120      	bne.n	1956 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1914:	4921      	ldr	r1, [pc, #132]	; (199c <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1916:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1990 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    191a:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19a0 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    191e:	4620      	mov	r0, r4
    1920:	f7ff ffc0 	bl	18a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1924:	2500      	movs	r5, #0
		if (i < length) {
    1926:	42af      	cmp	r7, r5
    1928:	d928      	bls.n	197c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    192a:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    192c:	f1a2 0320 	sub.w	r3, r2, #32
    1930:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1932:	bf28      	it	cs
    1934:	222e      	movcs	r2, #46	; 0x2e
    1936:	4649      	mov	r1, r9
    1938:	4620      	mov	r0, r4
    193a:	f7ff ffb3 	bl	18a4 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    193e:	3501      	adds	r5, #1
    1940:	2d10      	cmp	r5, #16
    1942:	d114      	bne.n	196e <hexdump_line_print+0xa6>
		}
	}
}
    1944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1948:	4649      	mov	r1, r9
    194a:	4620      	mov	r0, r4
    194c:	f7ff ffaa 	bl	18a4 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1950:	f108 0801 	add.w	r8, r8, #1
    1954:	e7cb      	b.n	18ee <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1956:	076a      	lsls	r2, r5, #29
    1958:	d1d2      	bne.n	1900 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    195a:	4651      	mov	r1, sl
    195c:	4620      	mov	r0, r4
    195e:	f7ff ffa1 	bl	18a4 <print_formatted>
    1962:	e7cd      	b.n	1900 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1964:	4641      	mov	r1, r8
    1966:	4620      	mov	r0, r4
    1968:	f7ff ff9c 	bl	18a4 <print_formatted>
    196c:	e7cf      	b.n	190e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    196e:	076b      	lsls	r3, r5, #29
    1970:	d1d9      	bne.n	1926 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1972:	4641      	mov	r1, r8
    1974:	4620      	mov	r0, r4
    1976:	f7ff ff95 	bl	18a4 <print_formatted>
    197a:	e7d4      	b.n	1926 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    197c:	4641      	mov	r1, r8
    197e:	4620      	mov	r0, r4
    1980:	f7ff ff90 	bl	18a4 <print_formatted>
    1984:	e7db      	b.n	193e <hexdump_line_print+0x76>
    1986:	bf00      	nop
    1988:	00008407 	.word	0x00008407
    198c:	00008406 	.word	0x00008406
    1990:	00007ea8 	.word	0x00007ea8
    1994:	00007ea6 	.word	0x00007ea6
    1998:	00007ea0 	.word	0x00007ea0
    199c:	00007eaa 	.word	0x00007eaa
    19a0:	00007eac 	.word	0x00007eac

000019a4 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    19a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19a8:	b087      	sub	sp, #28
    19aa:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    19ac:	f001 0301 	and.w	r3, r1, #1
{
    19b0:	9205      	str	r2, [sp, #20]
    19b2:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    19b6:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    19ba:	9304      	str	r3, [sp, #16]
{
    19bc:	4607      	mov	r7, r0
    19be:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    19c0:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    19c4:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    19c8:	f005 f92b 	bl	6c22 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    19cc:	4602      	mov	r2, r0
    19ce:	2800      	cmp	r0, #0
    19d0:	d044      	beq.n	1a5c <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    19d2:	493a      	ldr	r1, [pc, #232]	; (1abc <prefix_print+0x118>)
    19d4:	4638      	mov	r0, r7
    19d6:	f7ff ff65 	bl	18a4 <print_formatted>
    19da:	4605      	mov	r5, r0
	}

	if (stamp) {
    19dc:	f1bb 0f00 	cmp.w	fp, #0
    19e0:	d008      	beq.n	19f4 <prefix_print+0x50>
	if (!format) {
    19e2:	f018 0f44 	tst.w	r8, #68	; 0x44
    19e6:	d13b      	bne.n	1a60 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    19e8:	4935      	ldr	r1, [pc, #212]	; (1ac0 <prefix_print+0x11c>)
    19ea:	4622      	mov	r2, r4
    19ec:	4638      	mov	r0, r7
    19ee:	f7ff ff59 	bl	18a4 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    19f2:	4405      	add	r5, r0
	if (color) {
    19f4:	9b04      	ldr	r3, [sp, #16]
    19f6:	b153      	cbz	r3, 1a0e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    19f8:	4b32      	ldr	r3, [pc, #200]	; (1ac4 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    19fa:	4933      	ldr	r1, [pc, #204]	; (1ac8 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    19fc:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1a00:	4b32      	ldr	r3, [pc, #200]	; (1acc <prefix_print+0x128>)
    1a02:	4638      	mov	r0, r7
    1a04:	2a00      	cmp	r2, #0
    1a06:	bf08      	it	eq
    1a08:	461a      	moveq	r2, r3
    1a0a:	f7ff ff4b 	bl	18a4 <print_formatted>
	if (level_on) {
    1a0e:	b13e      	cbz	r6, 1a20 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1a10:	4b2f      	ldr	r3, [pc, #188]	; (1ad0 <prefix_print+0x12c>)
    1a12:	4930      	ldr	r1, [pc, #192]	; (1ad4 <prefix_print+0x130>)
    1a14:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1a18:	4638      	mov	r0, r7
    1a1a:	f7ff ff43 	bl	18a4 <print_formatted>
    1a1e:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1a20:	f1ba 0f00 	cmp.w	sl, #0
    1a24:	db16      	blt.n	1a54 <prefix_print+0xb0>
		total += print_formatted(output,
    1a26:	9b05      	ldr	r3, [sp, #20]
    1a28:	2b00      	cmp	r3, #0
    1a2a:	d045      	beq.n	1ab8 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1a2c:	2301      	movs	r3, #1
    1a2e:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1a32:	4b29      	ldr	r3, [pc, #164]	; (1ad8 <prefix_print+0x134>)
    1a34:	4c29      	ldr	r4, [pc, #164]	; (1adc <prefix_print+0x138>)
    1a36:	f019 0f10 	tst.w	r9, #16
    1a3a:	bf18      	it	ne
    1a3c:	461c      	movne	r4, r3
    1a3e:	4651      	mov	r1, sl
    1a40:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1a44:	f7ff ff12 	bl	186c <log_source_name_get>
    1a48:	4621      	mov	r1, r4
    1a4a:	4602      	mov	r2, r0
    1a4c:	4638      	mov	r0, r7
    1a4e:	f7ff ff29 	bl	18a4 <print_formatted>
    1a52:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1a54:	1970      	adds	r0, r6, r5
    1a56:	b007      	add	sp, #28
    1a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1a5c:	4605      	mov	r5, r0
    1a5e:	e7bd      	b.n	19dc <prefix_print+0x38>
	} else if (freq != 0U) {
    1a60:	4b1f      	ldr	r3, [pc, #124]	; (1ae0 <prefix_print+0x13c>)
    1a62:	6818      	ldr	r0, [r3, #0]
    1a64:	2800      	cmp	r0, #0
    1a66:	d0c4      	beq.n	19f2 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1a68:	4b1e      	ldr	r3, [pc, #120]	; (1ae4 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1a6a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1a6e:	681b      	ldr	r3, [r3, #0]
    1a70:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1a74:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1a78:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1a7c:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1a80:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1a84:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1a88:	fbb3 f2f1 	udiv	r2, r3, r1
    1a8c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a90:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1a94:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a98:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1a9c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1aa0:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1aa4:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1aa6:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1aaa:	490f      	ldr	r1, [pc, #60]	; (1ae8 <prefix_print+0x144>)
    1aac:	e9cd e001 	strd	lr, r0, [sp, #4]
    1ab0:	4638      	mov	r0, r7
    1ab2:	f7ff fef7 	bl	18a4 <print_formatted>
    1ab6:	e79c      	b.n	19f2 <prefix_print+0x4e>
		total += print_formatted(output,
    1ab8:	4c08      	ldr	r4, [pc, #32]	; (1adc <prefix_print+0x138>)
    1aba:	e7c0      	b.n	1a3e <prefix_print+0x9a>
    1abc:	00007ebd 	.word	0x00007ebd
    1ac0:	00007ec1 	.word	0x00007ec1
    1ac4:	00007b48 	.word	0x00007b48
    1ac8:	00008599 	.word	0x00008599
    1acc:	00007eaf 	.word	0x00007eaf
    1ad0:	00007b5c 	.word	0x00007b5c
    1ad4:	00007ee6 	.word	0x00007ee6
    1ad8:	00007eb9 	.word	0x00007eb9
    1adc:	00007eb4 	.word	0x00007eb4
    1ae0:	20000828 	.word	0x20000828
    1ae4:	2000082c 	.word	0x2000082c
    1ae8:	00007eca 	.word	0x00007eca

00001aec <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1aec:	b538      	push	{r3, r4, r5, lr}
    1aee:	460c      	mov	r4, r1
	if (color) {
    1af0:	07e1      	lsls	r1, r4, #31
{
    1af2:	4605      	mov	r5, r0
	if (color) {
    1af4:	d503      	bpl.n	1afe <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1af6:	4a08      	ldr	r2, [pc, #32]	; (1b18 <postfix_print+0x2c>)
    1af8:	4908      	ldr	r1, [pc, #32]	; (1b1c <postfix_print+0x30>)
    1afa:	f7ff fed3 	bl	18a4 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1afe:	06e2      	lsls	r2, r4, #27
    1b00:	d408      	bmi.n	1b14 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1b02:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1b04:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1b06:	bf4c      	ite	mi
    1b08:	4905      	ldrmi	r1, [pc, #20]	; (1b20 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1b0a:	4906      	ldrpl	r1, [pc, #24]	; (1b24 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1b10:	f7ff bec8 	b.w	18a4 <print_formatted>
}
    1b14:	bd38      	pop	{r3, r4, r5, pc}
    1b16:	bf00      	nop
    1b18:	00007eaf 	.word	0x00007eaf
    1b1c:	00008599 	.word	0x00008599
    1b20:	00008407 	.word	0x00008407
    1b24:	00008406 	.word	0x00008406

00001b28 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1b28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1b2c:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1b2e:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1b32:	4606      	mov	r6, r0
    1b34:	460c      	mov	r4, r1
    1b36:	4690      	mov	r8, r2
    1b38:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1b3c:	d04d      	beq.n	1bda <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1b3e:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1b40:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1b42:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1b46:	2b00      	cmp	r3, #0
    1b48:	d044      	beq.n	1bd4 <log_output_msg2_process+0xac>
    1b4a:	4925      	ldr	r1, [pc, #148]	; (1be0 <log_output_msg2_process+0xb8>)
    1b4c:	1a5b      	subs	r3, r3, r1
    1b4e:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1b52:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1b56:	f8cd 9000 	str.w	r9, [sp]
    1b5a:	68a3      	ldr	r3, [r4, #8]
    1b5c:	2200      	movs	r2, #0
    1b5e:	4641      	mov	r1, r8
    1b60:	4630      	mov	r0, r6
    1b62:	f7ff ff1f 	bl	19a4 <prefix_print>
    1b66:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1b68:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1b6a:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1b6e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b72:	b153      	cbz	r3, 1b8a <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1b74:	4f1b      	ldr	r7, [pc, #108]	; (1be4 <log_output_msg2_process+0xbc>)
    1b76:	481c      	ldr	r0, [pc, #112]	; (1be8 <log_output_msg2_process+0xc0>)
    1b78:	491c      	ldr	r1, [pc, #112]	; (1bec <log_output_msg2_process+0xc4>)
    1b7a:	462b      	mov	r3, r5
    1b7c:	4632      	mov	r2, r6
    1b7e:	f1b9 0f00 	cmp.w	r9, #0
    1b82:	bf08      	it	eq
    1b84:	4638      	moveq	r0, r7
    1b86:	f004 fc9f 	bl	64c8 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1b8a:	8867      	ldrh	r7, [r4, #2]
    1b8c:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1b90:	b197      	cbz	r7, 1bb8 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1b92:	6823      	ldr	r3, [r4, #0]
    1b94:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b98:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1b9a:	2f10      	cmp	r7, #16
    1b9c:	463c      	mov	r4, r7
    1b9e:	bf28      	it	cs
    1ba0:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1ba2:	4629      	mov	r1, r5
    1ba4:	f8cd 8000 	str.w	r8, [sp]
    1ba8:	4653      	mov	r3, sl
    1baa:	4622      	mov	r2, r4
    1bac:	4630      	mov	r0, r6
    1bae:	f7ff fe8b 	bl	18c8 <hexdump_line_print>
	} while (len);
    1bb2:	1b3f      	subs	r7, r7, r4
		data += length;
    1bb4:	4425      	add	r5, r4
	} while (len);
    1bb6:	d1f0      	bne.n	1b9a <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1bb8:	f1b9 0f00 	cmp.w	r9, #0
    1bbc:	d004      	beq.n	1bc8 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1bbe:	464a      	mov	r2, r9
    1bc0:	4641      	mov	r1, r8
    1bc2:	4630      	mov	r0, r6
    1bc4:	f7ff ff92 	bl	1aec <postfix_print>
	}

	log_output_flush(output);
    1bc8:	4630      	mov	r0, r6
}
    1bca:	b004      	add	sp, #16
    1bcc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1bd0:	f005 b836 	b.w	6c40 <log_output_flush>
		int16_t source_id = source ?
    1bd4:	f04f 33ff 	mov.w	r3, #4294967295
    1bd8:	e7bb      	b.n	1b52 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1bda:	46ca      	mov	sl, r9
    1bdc:	e7c4      	b.n	1b68 <log_output_msg2_process+0x40>
    1bde:	bf00      	nop
    1be0:	00007a6c 	.word	0x00007a6c
    1be4:	00006c91 	.word	0x00006c91
    1be8:	00006c5b 	.word	0x00006c5b
    1bec:	00000d29 	.word	0x00000d29

00001bf0 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1bf0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bf2:	f242 730f 	movw	r3, #9999	; 0x270f
    1bf6:	428b      	cmp	r3, r1
    1bf8:	bf28      	it	cs
    1bfa:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1bfc:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bfe:	4a0f      	ldr	r2, [pc, #60]	; (1c3c <log_output_dropped_process+0x4c>)
{
    1c00:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1c02:	2105      	movs	r1, #5
    1c04:	4668      	mov	r0, sp
    1c06:	f004 fccc 	bl	65a2 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1c0a:	6863      	ldr	r3, [r4, #4]
    1c0c:	490c      	ldr	r1, [pc, #48]	; (1c40 <log_output_dropped_process+0x50>)
    1c0e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1c10:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1c12:	220b      	movs	r2, #11
    1c14:	4628      	mov	r0, r5
    1c16:	f005 f806 	bl	6c26 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1c1a:	6863      	ldr	r3, [r4, #4]
    1c1c:	4632      	mov	r2, r6
    1c1e:	4669      	mov	r1, sp
    1c20:	4628      	mov	r0, r5
    1c22:	685b      	ldr	r3, [r3, #4]
    1c24:	f004 ffff 	bl	6c26 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1c28:	6863      	ldr	r3, [r4, #4]
    1c2a:	4906      	ldr	r1, [pc, #24]	; (1c44 <log_output_dropped_process+0x54>)
    1c2c:	685b      	ldr	r3, [r3, #4]
    1c2e:	221b      	movs	r2, #27
    1c30:	4628      	mov	r0, r5
    1c32:	f004 fff8 	bl	6c26 <buffer_write>
		     output->control_block->ctx);
}
    1c36:	b002      	add	sp, #8
    1c38:	bd70      	pop	{r4, r5, r6, pc}
    1c3a:	bf00      	nop
    1c3c:	0000873d 	.word	0x0000873d
    1c40:	00007f28 	.word	0x00007f28
    1c44:	00007f0c 	.word	0x00007f0c

00001c48 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1c48:	4a08      	ldr	r2, [pc, #32]	; (1c6c <log_output_timestamp_freq_set+0x24>)
{
    1c4a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1c4c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1c4e:	4c08      	ldr	r4, [pc, #32]	; (1c70 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1c50:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1c52:	2100      	movs	r1, #0
    1c54:	42a0      	cmp	r0, r4
    1c56:	d804      	bhi.n	1c62 <log_output_timestamp_freq_set+0x1a>
    1c58:	b101      	cbz	r1, 1c5c <log_output_timestamp_freq_set+0x14>
    1c5a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1c5c:	4b05      	ldr	r3, [pc, #20]	; (1c74 <log_output_timestamp_freq_set+0x2c>)
    1c5e:	6018      	str	r0, [r3, #0]
}
    1c60:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1c62:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c64:	005b      	lsls	r3, r3, #1
    1c66:	2101      	movs	r1, #1
    1c68:	e7f4      	b.n	1c54 <log_output_timestamp_freq_set+0xc>
    1c6a:	bf00      	nop
    1c6c:	2000082c 	.word	0x2000082c
    1c70:	000f4240 	.word	0x000f4240
    1c74:	20000828 	.word	0x20000828

00001c78 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c7c:	b087      	sub	sp, #28
    1c7e:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    1c82:	469a      	mov	sl, r3
    1c84:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c86:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    1c8a:	9303      	str	r3, [sp, #12]
    1c8c:	4604      	mov	r4, r0
    1c8e:	4689      	mov	r9, r1
    1c90:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    1c92:	b3cf      	cbz	r7, 1d08 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1c94:	f8cd b000 	str.w	fp, [sp]
    1c98:	463b      	mov	r3, r7
    1c9a:	462a      	mov	r2, r5
    1c9c:	2110      	movs	r1, #16
    1c9e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1ca0:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1ca4:	f7fe fbba 	bl	41c <cbvprintf_package>
    1ca8:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1caa:	9a03      	ldr	r2, [sp, #12]
    1cac:	f008 0307 	and.w	r3, r8, #7
    1cb0:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1cb4:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    1cb8:	4c14      	ldr	r4, [pc, #80]	; (1d0c <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1cba:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    1cbe:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1cc2:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    1cc4:	4b12      	ldr	r3, [pc, #72]	; (1d10 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    1cc6:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1cca:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1cce:	ea48 0804 	orr.w	r8, r8, r4
    1cd2:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    1cd6:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1cd8:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1cdc:	f7ff fcc6 	bl	166c <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1ce0:	4604      	mov	r4, r0
    1ce2:	b140      	cbz	r0, 1cf6 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1ce4:	b13f      	cbz	r7, 1cf6 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1ce6:	f8cd b000 	str.w	fp, [sp]
    1cea:	463b      	mov	r3, r7
    1cec:	462a      	mov	r2, r5
    1cee:	4631      	mov	r1, r6
    1cf0:	3010      	adds	r0, #16
    1cf2:	f7fe fb93 	bl	41c <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1cf6:	4653      	mov	r3, sl
    1cf8:	4642      	mov	r2, r8
    1cfa:	4649      	mov	r1, r9
    1cfc:	4620      	mov	r0, r4
	}
}
    1cfe:	b007      	add	sp, #28
    1d00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    1d04:	f004 bfd1 	b.w	6caa <z_log_msg2_finalize>
		plen = 0;
    1d08:	463e      	mov	r6, r7
    1d0a:	e7ce      	b.n	1caa <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1d0c:	0007fe00 	.word	0x0007fe00
    1d10:	7ff80000 	.word	0x7ff80000

00001d14 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
			uart_poll_out(uart_dev, data[i]);
    1d16:	4f07      	ldr	r7, [pc, #28]	; (1d34 <char_out+0x20>)
{
    1d18:	460d      	mov	r5, r1
    1d1a:	4604      	mov	r4, r0
    1d1c:	1846      	adds	r6, r0, r1
		for (size_t i = 0; i < length; i++) {
    1d1e:	42b4      	cmp	r4, r6
    1d20:	d101      	bne.n	1d26 <char_out+0x12>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1d22:	4628      	mov	r0, r5
    1d24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			uart_poll_out(uart_dev, data[i]);
    1d26:	6838      	ldr	r0, [r7, #0]
    1d28:	f814 1b01 	ldrb.w	r1, [r4], #1
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1d2c:	6883      	ldr	r3, [r0, #8]
    1d2e:	685b      	ldr	r3, [r3, #4]
    1d30:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1d32:	e7f4      	b.n	1d1e <char_out+0xa>
    1d34:	20000848 	.word	0x20000848

00001d38 <format_set>:
	log_output_func(&log_output_uart, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1d38:	4b01      	ldr	r3, [pc, #4]	; (1d40 <format_set+0x8>)
	return 0;
}
    1d3a:	2000      	movs	r0, #0
	log_format_current = log_type;
    1d3c:	6019      	str	r1, [r3, #0]
}
    1d3e:	4770      	bx	lr
    1d40:	20000838 	.word	0x20000838

00001d44 <log_backend_uart_init>:

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1d44:	4b01      	ldr	r3, [pc, #4]	; (1d4c <log_backend_uart_init+0x8>)
    1d46:	4a02      	ldr	r2, [pc, #8]	; (1d50 <log_backend_uart_init+0xc>)
    1d48:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1d4a:	4770      	bx	lr
    1d4c:	20000848 	.word	0x20000848
    1d50:	000078bc 	.word	0x000078bc

00001d54 <panic>:

static void panic(struct log_backend const *const backend)
{
	in_panic = true;
    1d54:	4b02      	ldr	r3, [pc, #8]	; (1d60 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1d56:	4803      	ldr	r0, [pc, #12]	; (1d64 <panic+0x10>)
    1d58:	2201      	movs	r2, #1
    1d5a:	701a      	strb	r2, [r3, #0]
    1d5c:	f004 bf70 	b.w	6c40 <log_output_flush>
    1d60:	20000a94 	.word	0x20000a94
    1d64:	00007b90 	.word	0x00007b90

00001d68 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1d68:	4801      	ldr	r0, [pc, #4]	; (1d70 <dropped+0x8>)
    1d6a:	f7ff bf41 	b.w	1bf0 <log_output_dropped_process>
    1d6e:	bf00      	nop
    1d70:	00007b90 	.word	0x00007b90

00001d74 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1d74:	4b06      	ldr	r3, [pc, #24]	; (1d90 <process+0x1c>)
{
    1d76:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1d78:	6818      	ldr	r0, [r3, #0]
{
    1d7a:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1d7c:	f7ff fbca 	bl	1514 <log_format_func_t_get>
	log_output_func(&log_output_uart, &msg->log, flags);
    1d80:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1d82:	4603      	mov	r3, r0
}
    1d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_uart, &msg->log, flags);
    1d88:	4802      	ldr	r0, [pc, #8]	; (1d94 <process+0x20>)
    1d8a:	220f      	movs	r2, #15
    1d8c:	4718      	bx	r3
    1d8e:	bf00      	nop
    1d90:	20000838 	.word	0x20000838
    1d94:	00007b90 	.word	0x00007b90

00001d98 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1d98:	4b01      	ldr	r3, [pc, #4]	; (1da0 <log_backend_rtt_init+0x8>)
    1d9a:	2201      	movs	r2, #1
    1d9c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1d9e:	4770      	bx	lr
    1da0:	20000aa6 	.word	0x20000aa6

00001da4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1da4:	4b01      	ldr	r3, [pc, #4]	; (1dac <format_set+0x8>)
	return 0;
}
    1da6:	2000      	movs	r0, #0
	log_format_current = log_type;
    1da8:	6019      	str	r1, [r3, #0]
}
    1daa:	4770      	bx	lr
    1dac:	20000854 	.word	0x20000854

00001db0 <panic>:
	panic_mode = true;
    1db0:	4b02      	ldr	r3, [pc, #8]	; (1dbc <panic+0xc>)
	log_output_flush(output);
    1db2:	4803      	ldr	r0, [pc, #12]	; (1dc0 <panic+0x10>)
    1db4:	2201      	movs	r2, #1
    1db6:	701a      	strb	r2, [r3, #0]
    1db8:	f004 bf42 	b.w	6c40 <log_output_flush>
    1dbc:	20000aa7 	.word	0x20000aa7
    1dc0:	00007bc0 	.word	0x00007bc0

00001dc4 <dropped>:
	log_output_dropped_process(output, cnt);
    1dc4:	4801      	ldr	r0, [pc, #4]	; (1dcc <dropped+0x8>)
    1dc6:	f7ff bf13 	b.w	1bf0 <log_output_dropped_process>
    1dca:	bf00      	nop
    1dcc:	00007bc0 	.word	0x00007bc0

00001dd0 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1dd0:	4b06      	ldr	r3, [pc, #24]	; (1dec <process+0x1c>)
{
    1dd2:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1dd4:	6818      	ldr	r0, [r3, #0]
{
    1dd6:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1dd8:	f7ff fb9c 	bl	1514 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ddc:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1dde:	4603      	mov	r3, r0
}
    1de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1de4:	4802      	ldr	r0, [pc, #8]	; (1df0 <process+0x20>)
    1de6:	220f      	movs	r2, #15
    1de8:	4718      	bx	r3
    1dea:	bf00      	nop
    1dec:	20000854 	.word	0x20000854
    1df0:	00007bc0 	.word	0x00007bc0

00001df4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1df4:	4b05      	ldr	r3, [pc, #20]	; (1e0c <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1df6:	781b      	ldrb	r3, [r3, #0]
    1df8:	b11b      	cbz	r3, 1e02 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1dfa:	f241 3088 	movw	r0, #5000	; 0x1388
    1dfe:	f005 bcdc 	b.w	77ba <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1e02:	20a4      	movs	r0, #164	; 0xa4
    1e04:	2100      	movs	r1, #0
    1e06:	f004 b8f7 	b.w	5ff8 <z_impl_k_sleep>
    1e0a:	bf00      	nop
    1e0c:	20000aa7 	.word	0x20000aa7

00001e10 <data_out_block_mode>:
{
    1e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1e14:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1ea4 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1e18:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1ea8 <data_out_block_mode+0x98>
{
    1e1c:	4680      	mov	r8, r0
    1e1e:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1e20:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1e22:	f899 5000 	ldrb.w	r5, [r9]
    1e26:	b9cd      	cbnz	r5, 1e5c <data_out_block_mode+0x4c>
    1e28:	f04f 33ff 	mov.w	r3, #4294967295
    1e2c:	f04f 32ff 	mov.w	r2, #4294967295
    1e30:	4650      	mov	r0, sl
    1e32:	f003 fd07 	bl	5844 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1e36:	463a      	mov	r2, r7
    1e38:	4641      	mov	r1, r8
    1e3a:	4628      	mov	r0, r5
    1e3c:	f003 fa4c 	bl	52d8 <SEGGER_RTT_WriteSkipNoLock>
    1e40:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1e42:	4650      	mov	r0, sl
    1e44:	f003 fd76 	bl	5934 <z_impl_k_mutex_unlock>
		if (ret) {
    1e48:	4d18      	ldr	r5, [pc, #96]	; (1eac <data_out_block_mode+0x9c>)
    1e4a:	b1fe      	cbz	r6, 1e8c <data_out_block_mode+0x7c>
	host_present = true;
    1e4c:	2301      	movs	r3, #1
    1e4e:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1e50:	f899 3000 	ldrb.w	r3, [r9]
    1e54:	b96b      	cbnz	r3, 1e72 <data_out_block_mode+0x62>
}
    1e56:	4638      	mov	r0, r7
    1e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1e5c:	463a      	mov	r2, r7
    1e5e:	4641      	mov	r1, r8
    1e60:	2000      	movs	r0, #0
    1e62:	f003 fa39 	bl	52d8 <SEGGER_RTT_WriteSkipNoLock>
    1e66:	4606      	mov	r6, r0
    1e68:	e7ee      	b.n	1e48 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    1e6a:	b95c      	cbnz	r4, 1e84 <data_out_block_mode+0x74>
		host_present = false;
    1e6c:	702c      	strb	r4, [r5, #0]
    1e6e:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1e72:	2000      	movs	r0, #0
    1e74:	f003 fa7c 	bl	5370 <SEGGER_RTT_HasDataUp>
    1e78:	2800      	cmp	r0, #0
    1e7a:	d0ec      	beq.n	1e56 <data_out_block_mode+0x46>
    1e7c:	782b      	ldrb	r3, [r5, #0]
    1e7e:	2b00      	cmp	r3, #0
    1e80:	d1f3      	bne.n	1e6a <data_out_block_mode+0x5a>
    1e82:	e7e8      	b.n	1e56 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    1e84:	3c01      	subs	r4, #1
    1e86:	f7ff ffb5 	bl	1df4 <on_failed_write.part.0>
    1e8a:	e7f2      	b.n	1e72 <data_out_block_mode+0x62>
		} else if (host_present) {
    1e8c:	782b      	ldrb	r3, [r5, #0]
    1e8e:	b113      	cbz	r3, 1e96 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    1e90:	3c01      	subs	r4, #1
    1e92:	d104      	bne.n	1e9e <data_out_block_mode+0x8e>
		host_present = false;
    1e94:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1e96:	782b      	ldrb	r3, [r5, #0]
    1e98:	2b00      	cmp	r3, #0
    1e9a:	d1c2      	bne.n	1e22 <data_out_block_mode+0x12>
    1e9c:	e7db      	b.n	1e56 <data_out_block_mode+0x46>
    1e9e:	f7ff ffa9 	bl	1df4 <on_failed_write.part.0>
    1ea2:	e7f8      	b.n	1e96 <data_out_block_mode+0x86>
    1ea4:	20000aa7 	.word	0x20000aa7
    1ea8:	200001d8 	.word	0x200001d8
    1eac:	20000aa6 	.word	0x20000aa6

00001eb0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1eb4:	4605      	mov	r5, r0
	__asm__ volatile(
    1eb6:	f04f 0320 	mov.w	r3, #32
    1eba:	f3ef 8611 	mrs	r6, BASEPRI
    1ebe:	f383 8812 	msr	BASEPRI_MAX, r3
    1ec2:	f3bf 8f6f 	isb	sy
	return list->head;
    1ec6:	4b0e      	ldr	r3, [pc, #56]	; (1f00 <pm_state_notify+0x50>)
    1ec8:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1eca:	b19c      	cbz	r4, 1ef4 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1ecc:	4f0d      	ldr	r7, [pc, #52]	; (1f04 <pm_state_notify+0x54>)
    1ece:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1f08 <pm_state_notify+0x58>
    1ed2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1ed6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1eda:	2d00      	cmp	r5, #0
    1edc:	bf08      	it	eq
    1ede:	4613      	moveq	r3, r2
		if (callback) {
    1ee0:	b12b      	cbz	r3, 1eee <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1ee2:	f898 2014 	ldrb.w	r2, [r8, #20]
    1ee6:	fb09 f202 	mul.w	r2, r9, r2
    1eea:	5cb8      	ldrb	r0, [r7, r2]
    1eec:	4798      	blx	r3
	return node->next;
    1eee:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1ef0:	2c00      	cmp	r4, #0
    1ef2:	d1f0      	bne.n	1ed6 <pm_state_notify+0x26>
	__asm__ volatile(
    1ef4:	f386 8811 	msr	BASEPRI, r6
    1ef8:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1f00:	20000864 	.word	0x20000864
    1f04:	2000086c 	.word	0x2000086c
    1f08:	20000a54 	.word	0x20000a54

00001f0c <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f0c:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f0e:	2301      	movs	r3, #1
    1f10:	f000 001f 	and.w	r0, r0, #31
    1f14:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f18:	4b07      	ldr	r3, [pc, #28]	; (1f38 <atomic_clear_bit.constprop.0+0x2c>)
    1f1a:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f1e:	43c0      	mvns	r0, r0
    1f20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1f24:	e853 2f00 	ldrex	r2, [r3]
    1f28:	4002      	ands	r2, r0
    1f2a:	e843 2100 	strex	r1, r2, [r3]
    1f2e:	2900      	cmp	r1, #0
    1f30:	d1f8      	bne.n	1f24 <atomic_clear_bit.constprop.0+0x18>
    1f32:	f3bf 8f5b 	dmb	ish
}
    1f36:	4770      	bx	lr
    1f38:	20000878 	.word	0x20000878

00001f3c <pm_system_resume>:

void pm_system_resume(void)
{
    1f3c:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    1f3e:	4b1a      	ldr	r3, [pc, #104]	; (1fa8 <pm_system_resume+0x6c>)
    1f40:	7d1c      	ldrb	r4, [r3, #20]
    1f42:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    1f46:	f004 031f 	and.w	r3, r4, #31
    1f4a:	2201      	movs	r2, #1
    1f4c:	409a      	lsls	r2, r3
    1f4e:	4b17      	ldr	r3, [pc, #92]	; (1fac <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1f50:	0961      	lsrs	r1, r4, #5
    1f52:	43d0      	mvns	r0, r2
    1f54:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    1f58:	e853 1f00 	ldrex	r1, [r3]
    1f5c:	ea01 0500 	and.w	r5, r1, r0
    1f60:	e843 5c00 	strex	ip, r5, [r3]
    1f64:	f1bc 0f00 	cmp.w	ip, #0
    1f68:	d1f6      	bne.n	1f58 <pm_system_resume+0x1c>
    1f6a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    1f6e:	4211      	tst	r1, r2
    1f70:	d013      	beq.n	1f9a <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    1f72:	4b0f      	ldr	r3, [pc, #60]	; (1fb0 <pm_system_resume+0x74>)
    1f74:	4d0f      	ldr	r5, [pc, #60]	; (1fb4 <pm_system_resume+0x78>)
    1f76:	b18b      	cbz	r3, 1f9c <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    1f78:	230c      	movs	r3, #12
    1f7a:	4363      	muls	r3, r4
    1f7c:	18ea      	adds	r2, r5, r3
    1f7e:	5ce8      	ldrb	r0, [r5, r3]
    1f80:	7851      	ldrb	r1, [r2, #1]
    1f82:	f004 ff41 	bl	6e08 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    1f86:	2000      	movs	r0, #0
    1f88:	f7ff ff92 	bl	1eb0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    1f8c:	230c      	movs	r3, #12
    1f8e:	435c      	muls	r4, r3
    1f90:	192a      	adds	r2, r5, r4
    1f92:	2300      	movs	r3, #0
    1f94:	512b      	str	r3, [r5, r4]
    1f96:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    1f9a:	bd38      	pop	{r3, r4, r5, pc}
    1f9c:	f383 8811 	msr	BASEPRI, r3
    1fa0:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1fa4:	e7ef      	b.n	1f86 <pm_system_resume+0x4a>
    1fa6:	bf00      	nop
    1fa8:	20000a54 	.word	0x20000a54
    1fac:	2000087c 	.word	0x2000087c
    1fb0:	00006e09 	.word	0x00006e09
    1fb4:	2000086c 	.word	0x2000086c

00001fb8 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    1fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    1fbc:	4b32      	ldr	r3, [pc, #200]	; (2088 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1fbe:	4a33      	ldr	r2, [pc, #204]	; (208c <pm_system_suspend+0xd4>)
    1fc0:	7d1c      	ldrb	r4, [r3, #20]
    1fc2:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    1fc6:	0963      	lsrs	r3, r4, #5
    1fc8:	ea4f 0983 	mov.w	r9, r3, lsl #2
    1fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    1fd0:	4e2f      	ldr	r6, [pc, #188]	; (2090 <pm_system_suspend+0xd8>)
    1fd2:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    1fd6:	f004 081f 	and.w	r8, r4, #31
    1fda:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1fde:	f013 0f01 	tst.w	r3, #1
{
    1fe2:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    1fe4:	d10a      	bne.n	1ffc <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    1fe6:	4601      	mov	r1, r0
    1fe8:	4620      	mov	r0, r4
    1fea:	f000 f869 	bl	20c0 <pm_policy_next_state>
		if (info != NULL) {
    1fee:	b128      	cbz	r0, 1ffc <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    1ff0:	c807      	ldmia	r0, {r0, r1, r2}
    1ff2:	230c      	movs	r3, #12
    1ff4:	fb03 6304 	mla	r3, r3, r4, r6
    1ff8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    1ffc:	230c      	movs	r3, #12
    1ffe:	4363      	muls	r3, r4
    2000:	18f2      	adds	r2, r6, r3
    2002:	5cf5      	ldrb	r5, [r6, r3]
    2004:	b92d      	cbnz	r5, 2012 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2006:	4620      	mov	r0, r4
    2008:	f7ff ff80 	bl	1f0c <atomic_clear_bit.constprop.0>
		ret = false;
    200c:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2012:	1c7b      	adds	r3, r7, #1
    2014:	d00f      	beq.n	2036 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2016:	f8d2 c008 	ldr.w	ip, [r2, #8]
    201a:	481e      	ldr	r0, [pc, #120]	; (2094 <pm_system_suspend+0xdc>)
    201c:	4a1e      	ldr	r2, [pc, #120]	; (2098 <pm_system_suspend+0xe0>)
    201e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2022:	2100      	movs	r1, #0
    2024:	2300      	movs	r3, #0
    2026:	fbec 0105 	umlal	r0, r1, ip, r5
    202a:	f7fe f857 	bl	dc <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    202e:	2101      	movs	r1, #1
    2030:	1a38      	subs	r0, r7, r0
    2032:	f005 fba4 	bl	777e <z_set_timeout_expiry>
	k_sched_lock();
    2036:	f003 fd5f 	bl	5af8 <k_sched_lock>
	pm_state_notify(true);
    203a:	2001      	movs	r0, #1
    203c:	f7ff ff38 	bl	1eb0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2040:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2044:	2301      	movs	r3, #1
    2046:	fa03 f808 	lsl.w	r8, r3, r8
    204a:	4b14      	ldr	r3, [pc, #80]	; (209c <pm_system_suspend+0xe4>)
    204c:	4499      	add	r9, r3
    204e:	e859 3f00 	ldrex	r3, [r9]
    2052:	ea43 0308 	orr.w	r3, r3, r8
    2056:	e849 3200 	strex	r2, r3, [r9]
    205a:	2a00      	cmp	r2, #0
    205c:	d1f7      	bne.n	204e <pm_system_suspend+0x96>
    205e:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2062:	4b0f      	ldr	r3, [pc, #60]	; (20a0 <pm_system_suspend+0xe8>)
    2064:	b133      	cbz	r3, 2074 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2066:	230c      	movs	r3, #12
    2068:	4363      	muls	r3, r4
    206a:	18f2      	adds	r2, r6, r3
    206c:	5cf0      	ldrb	r0, [r6, r3]
    206e:	7851      	ldrb	r1, [r2, #1]
    2070:	f004 febe 	bl	6df0 <pm_state_set>
	pm_system_resume();
    2074:	f7ff ff62 	bl	1f3c <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2078:	4620      	mov	r0, r4
    207a:	f7ff ff47 	bl	1f0c <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    207e:	f003 ff0b 	bl	5e98 <k_sched_unlock>
	bool ret = true;
    2082:	2001      	movs	r0, #1
    2084:	e7c3      	b.n	200e <pm_system_suspend+0x56>
    2086:	bf00      	nop
    2088:	20000a54 	.word	0x20000a54
    208c:	20000878 	.word	0x20000878
    2090:	2000086c 	.word	0x2000086c
    2094:	000f423f 	.word	0x000f423f
    2098:	000f4240 	.word	0x000f4240
    209c:	2000087c 	.word	0x2000087c
    20a0:	00006df1 	.word	0x00006df1

000020a4 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20a4:	4b05      	ldr	r3, [pc, #20]	; (20bc <pm_policy_state_lock_is_active+0x18>)
    20a6:	f3bf 8f5b 	dmb	ish
    20aa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    20ae:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    20b2:	3800      	subs	r0, #0
    20b4:	bf18      	it	ne
    20b6:	2001      	movne	r0, #1
    20b8:	4770      	bx	lr
    20ba:	bf00      	nop
    20bc:	20000880 	.word	0x20000880

000020c0 <pm_policy_next_state>:
{
    20c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    20c4:	b085      	sub	sp, #20
    20c6:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    20c8:	a903      	add	r1, sp, #12
    20ca:	f000 f847 	bl	215c <pm_state_cpu_get_all>
    20ce:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2150 <pm_policy_next_state+0x90>
    20d2:	f8df a080 	ldr.w	sl, [pc, #128]	; 2154 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    20d6:	1e44      	subs	r4, r0, #1
    20d8:	b224      	sxth	r4, r4
    20da:	f04f 0b00 	mov.w	fp, #0
    20de:	1c63      	adds	r3, r4, #1
    20e0:	d104      	bne.n	20ec <pm_policy_next_state+0x2c>
	return NULL;
    20e2:	2600      	movs	r6, #0
}
    20e4:	4630      	mov	r0, r6
    20e6:	b005      	add	sp, #20
    20e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    20ec:	9a03      	ldr	r2, [sp, #12]
    20ee:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    20f2:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    20f6:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    20fa:	f7ff ffd3 	bl	20a4 <pm_policy_state_lock_is_active>
    20fe:	4605      	mov	r5, r0
    2100:	bb10      	cbnz	r0, 2148 <pm_policy_next_state+0x88>
    2102:	6870      	ldr	r0, [r6, #4]
    2104:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2108:	46c4      	mov	ip, r8
    210a:	4629      	mov	r1, r5
    210c:	fbe0 c109 	umlal	ip, r1, r0, r9
    2110:	4652      	mov	r2, sl
    2112:	465b      	mov	r3, fp
    2114:	4660      	mov	r0, ip
    2116:	f7fd ffe1 	bl	dc <__aeabi_uldivmod>
    211a:	9001      	str	r0, [sp, #4]
    211c:	68b0      	ldr	r0, [r6, #8]
    211e:	46c4      	mov	ip, r8
    2120:	4629      	mov	r1, r5
    2122:	fbe0 c109 	umlal	ip, r1, r0, r9
    2126:	465b      	mov	r3, fp
    2128:	4652      	mov	r2, sl
    212a:	4660      	mov	r0, ip
    212c:	f7fd ffd6 	bl	dc <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2130:	4b09      	ldr	r3, [pc, #36]	; (2158 <pm_policy_next_state+0x98>)
    2132:	681b      	ldr	r3, [r3, #0]
    2134:	1c59      	adds	r1, r3, #1
    2136:	d001      	beq.n	213c <pm_policy_next_state+0x7c>
    2138:	4283      	cmp	r3, r0
    213a:	d905      	bls.n	2148 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    213c:	1c7a      	adds	r2, r7, #1
    213e:	d0d1      	beq.n	20e4 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2140:	9b01      	ldr	r3, [sp, #4]
    2142:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2144:	42b8      	cmp	r0, r7
    2146:	d9cd      	bls.n	20e4 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2148:	3c01      	subs	r4, #1
    214a:	b224      	sxth	r4, r4
    214c:	e7c7      	b.n	20de <pm_policy_next_state+0x1e>
    214e:	bf00      	nop
    2150:	000f423f 	.word	0x000f423f
    2154:	000f4240 	.word	0x000f4240
    2158:	20000008 	.word	0x20000008

0000215c <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    215c:	b908      	cbnz	r0, 2162 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    215e:	4b02      	ldr	r3, [pc, #8]	; (2168 <pm_state_cpu_get_all+0xc>)
    2160:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2162:	2000      	movs	r0, #0
    2164:	4770      	bx	lr
    2166:	bf00      	nop
    2168:	00007bd0 	.word	0x00007bd0

0000216c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    216c:	4901      	ldr	r1, [pc, #4]	; (2174 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    216e:	2210      	movs	r2, #16
	str	r2, [r1]
    2170:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2172:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2174:	e000ed10 	.word	0xe000ed10

00002178 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2178:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    217a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    217c:	f380 8811 	msr	BASEPRI, r0
	isb
    2180:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2184:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2188:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    218a:	b662      	cpsie	i
	isb
    218c:	f3bf 8f6f 	isb	sy

	bx	lr
    2190:	4770      	bx	lr
    2192:	bf00      	nop

00002194 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2194:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2196:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2198:	f381 8811 	msr	BASEPRI, r1

	wfe
    219c:	bf20      	wfe

	msr	BASEPRI, r0
    219e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    21a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    21a4:	4770      	bx	lr
    21a6:	bf00      	nop

000021a8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    21a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    21ac:	4681      	mov	r9, r0
    21ae:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    21b0:	460c      	mov	r4, r1
    21b2:	2900      	cmp	r1, #0
    21b4:	d04c      	beq.n	2250 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    21b6:	466e      	mov	r6, sp
    21b8:	b08a      	sub	sp, #40	; 0x28
    21ba:	466d      	mov	r5, sp
    21bc:	e9d1 1200 	ldrd	r1, r2, [r1]
    21c0:	68a3      	ldr	r3, [r4, #8]
    21c2:	4827      	ldr	r0, [pc, #156]	; (2260 <z_arm_fatal_error+0xb8>)
    21c4:	46a8      	mov	r8, r5
    21c6:	f04f 0a05 	mov.w	sl, #5
    21ca:	e9c5 0105 	strd	r0, r1, [r5, #20]
    21ce:	e9c5 2307 	strd	r2, r3, [r5, #28]
    21d2:	f848 af10 	str.w	sl, [r8, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    21d6:	4823      	ldr	r0, [pc, #140]	; (2264 <z_arm_fatal_error+0xbc>)
    21d8:	4642      	mov	r2, r8
    21da:	2300      	movs	r3, #0
    21dc:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    21e0:	f004 fd7e 	bl	6ce0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    21e4:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    21e8:	6963      	ldr	r3, [r4, #20]
    21ea:	481f      	ldr	r0, [pc, #124]	; (2268 <z_arm_fatal_error+0xc0>)
    21ec:	f8c5 a010 	str.w	sl, [r5, #16]
    21f0:	46b5      	mov	sp, r6
    21f2:	e9c5 0105 	strd	r0, r1, [r5, #20]
    21f6:	46ad      	mov	sp, r5
    21f8:	e9c5 2307 	strd	r2, r3, [r5, #28]
    21fc:	4819      	ldr	r0, [pc, #100]	; (2264 <z_arm_fatal_error+0xbc>)
    21fe:	4642      	mov	r2, r8
    2200:	2300      	movs	r3, #0
    2202:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2206:	f004 fd6b 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    220a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    220c:	b088      	sub	sp, #32
    220e:	466d      	mov	r5, sp
    2210:	69e3      	ldr	r3, [r4, #28]
    2212:	4a16      	ldr	r2, [pc, #88]	; (226c <z_arm_fatal_error+0xc4>)
    2214:	46a8      	mov	r8, r5
    2216:	f04f 0a03 	mov.w	sl, #3
    221a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    221e:	f848 af10 	str.w	sl, [r8, #16]!
    2222:	4810      	ldr	r0, [pc, #64]	; (2264 <z_arm_fatal_error+0xbc>)
    2224:	4642      	mov	r2, r8
    2226:	2300      	movs	r3, #0
    2228:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    222c:	f004 fd58 	bl	6ce0 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2230:	4a0f      	ldr	r2, [pc, #60]	; (2270 <z_arm_fatal_error+0xc8>)
    2232:	69a3      	ldr	r3, [r4, #24]
    2234:	f8c5 a010 	str.w	sl, [r5, #16]
    2238:	46b5      	mov	sp, r6
    223a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    223e:	46ad      	mov	sp, r5
    2240:	4808      	ldr	r0, [pc, #32]	; (2264 <z_arm_fatal_error+0xbc>)
    2242:	2300      	movs	r3, #0
    2244:	4642      	mov	r2, r8
    2246:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    224a:	f004 fd49 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    224e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2250:	4621      	mov	r1, r4
    2252:	4648      	mov	r0, r9
    2254:	f003 f8b6 	bl	53c4 <z_fatal_error>
}
    2258:	46bd      	mov	sp, r7
    225a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    225e:	bf00      	nop
    2260:	00007f61 	.word	0x00007f61
    2264:	00007a9c 	.word	0x00007a9c
    2268:	00007f90 	.word	0x00007f90
    226c:	00007fbf 	.word	0x00007fbf
    2270:	00007fce 	.word	0x00007fce

00002274 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2274:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2276:	2b00      	cmp	r3, #0
    2278:	db08      	blt.n	228c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    227a:	2201      	movs	r2, #1
    227c:	f000 001f 	and.w	r0, r0, #31
    2280:	fa02 f000 	lsl.w	r0, r2, r0
    2284:	095b      	lsrs	r3, r3, #5
    2286:	4a02      	ldr	r2, [pc, #8]	; (2290 <arch_irq_enable+0x1c>)
    2288:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    228c:	4770      	bx	lr
    228e:	bf00      	nop
    2290:	e000e100 	.word	0xe000e100

00002294 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2294:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2296:	2b00      	cmp	r3, #0
    2298:	db0d      	blt.n	22b6 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    229a:	2201      	movs	r2, #1
    229c:	095b      	lsrs	r3, r3, #5
    229e:	f000 001f 	and.w	r0, r0, #31
    22a2:	fa02 f000 	lsl.w	r0, r2, r0
    22a6:	3320      	adds	r3, #32
    22a8:	4a03      	ldr	r2, [pc, #12]	; (22b8 <arch_irq_disable+0x24>)
    22aa:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    22ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    22b2:	f3bf 8f6f 	isb	sy
}
    22b6:	4770      	bx	lr
    22b8:	e000e100 	.word	0xe000e100

000022bc <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    22bc:	4b05      	ldr	r3, [pc, #20]	; (22d4 <arch_irq_is_enabled+0x18>)
    22be:	0942      	lsrs	r2, r0, #5
    22c0:	f000 001f 	and.w	r0, r0, #31
    22c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    22c8:	2301      	movs	r3, #1
    22ca:	fa03 f000 	lsl.w	r0, r3, r0
}
    22ce:	4010      	ands	r0, r2
    22d0:	4770      	bx	lr
    22d2:	bf00      	nop
    22d4:	e000e100 	.word	0xe000e100

000022d8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    22d8:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    22da:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22dc:	bfa8      	it	ge
    22de:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    22e2:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22e6:	bfb8      	it	lt
    22e8:	4b06      	ldrlt	r3, [pc, #24]	; (2304 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22ea:	ea4f 1141 	mov.w	r1, r1, lsl #5
    22ee:	bfac      	ite	ge
    22f0:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f4:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22f8:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22fa:	bfb4      	ite	lt
    22fc:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    22fe:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2302:	4770      	bx	lr
    2304:	e000ed14 	.word	0xe000ed14

00002308 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2308:	bf30      	wfi
    b z_SysNmiOnReset
    230a:	f7ff bffd 	b.w	2308 <z_SysNmiOnReset>
    230e:	bf00      	nop

00002310 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2310:	4a0b      	ldr	r2, [pc, #44]	; (2340 <z_arm_prep_c+0x30>)
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2312:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2314:	4b0b      	ldr	r3, [pc, #44]	; (2344 <z_arm_prep_c+0x34>)
    2316:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    231a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    231c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2320:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    2324:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2328:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    232c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2330:	f003 f8e0 	bl	54f4 <z_bss_zero>
	z_data_copy();
    2334:	f003 fed2 	bl	60dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2338:	f000 fbb8 	bl	2aac <z_arm_interrupt_init>
	z_cstart();
    233c:	f003 f91e 	bl	557c <z_cstart>
    2340:	00000000 	.word	0x00000000
    2344:	e000ed00 	.word	0xe000ed00

00002348 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2348:	4a09      	ldr	r2, [pc, #36]	; (2370 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    234a:	490a      	ldr	r1, [pc, #40]	; (2374 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    234c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    234e:	6809      	ldr	r1, [r1, #0]
    2350:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2352:	4909      	ldr	r1, [pc, #36]	; (2378 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2354:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2356:	684b      	ldr	r3, [r1, #4]
    2358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    235c:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    235e:	2300      	movs	r3, #0
    2360:	f383 8811 	msr	BASEPRI, r3
    2364:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2368:	6893      	ldr	r3, [r2, #8]
}
    236a:	6f98      	ldr	r0, [r3, #120]	; 0x78
    236c:	4770      	bx	lr
    236e:	bf00      	nop
    2370:	20000a54 	.word	0x20000a54
    2374:	00007de0 	.word	0x00007de0
    2378:	e000ed00 	.word	0xe000ed00

0000237c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    237c:	4912      	ldr	r1, [pc, #72]	; (23c8 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    237e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2380:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2384:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2386:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    238a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    238e:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2390:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2394:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2398:	4f0c      	ldr	r7, [pc, #48]	; (23cc <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    239a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    239e:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    23a0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    23a2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    23a4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    23a6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    23a8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    23aa:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    23ae:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    23b0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    23b2:	f000 fc17 	bl	2be4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    23b6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    23ba:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    23be:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    23c2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    23c6:	4770      	bx	lr
    ldr r1, =_kernel
    23c8:	20000a54 	.word	0x20000a54
    ldr v4, =_SCS_ICSR
    23cc:	e000ed04 	.word	0xe000ed04

000023d0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    23d0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    23d4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    23d6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    23da:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    23de:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    23e0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    23e4:	2902      	cmp	r1, #2
    beq _oops
    23e6:	d0ff      	beq.n	23e8 <_oops>

000023e8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    23e8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    23ea:	f004 fcbe 	bl	6d6a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    23ee:	bd01      	pop	{r0, pc}

000023f0 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    23f0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    23f4:	9b00      	ldr	r3, [sp, #0]
    23f6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    23fa:	490a      	ldr	r1, [pc, #40]	; (2424 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    23fc:	9b01      	ldr	r3, [sp, #4]
    23fe:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2402:	9b02      	ldr	r3, [sp, #8]
    2404:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2408:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    240c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2410:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2414:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2418:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    241a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    241c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    241e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2420:	4770      	bx	lr
    2422:	bf00      	nop
    2424:	00006713 	.word	0x00006713

00002428 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2428:	4a09      	ldr	r2, [pc, #36]	; (2450 <z_check_thread_stack_fail+0x28>)
{
    242a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    242c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    242e:	b170      	cbz	r0, 244e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2430:	f113 0f16 	cmn.w	r3, #22
    2434:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2436:	d005      	beq.n	2444 <z_check_thread_stack_fail+0x1c>
    2438:	f1a0 0220 	sub.w	r2, r0, #32
    243c:	429a      	cmp	r2, r3
    243e:	d805      	bhi.n	244c <z_check_thread_stack_fail+0x24>
    2440:	4283      	cmp	r3, r0
    2442:	d203      	bcs.n	244c <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2444:	4281      	cmp	r1, r0
    2446:	bf28      	it	cs
    2448:	2000      	movcs	r0, #0
    244a:	4770      	bx	lr
    244c:	2000      	movs	r0, #0
}
    244e:	4770      	bx	lr
    2450:	20000a54 	.word	0x20000a54

00002454 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2454:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2456:	4b09      	ldr	r3, [pc, #36]	; (247c <arch_switch_to_main_thread+0x28>)
    2458:	6098      	str	r0, [r3, #8]
{
    245a:	460d      	mov	r5, r1
    245c:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    245e:	f000 fbc1 	bl	2be4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2462:	4620      	mov	r0, r4
    2464:	f385 8809 	msr	PSP, r5
    2468:	2100      	movs	r1, #0
    246a:	b663      	cpsie	if
    246c:	f381 8811 	msr	BASEPRI, r1
    2470:	f3bf 8f6f 	isb	sy
    2474:	2200      	movs	r2, #0
    2476:	2300      	movs	r3, #0
    2478:	f004 f94b 	bl	6712 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    247c:	20000a54 	.word	0x20000a54

00002480 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2480:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2482:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2484:	4a0b      	ldr	r2, [pc, #44]	; (24b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2486:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2488:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    248a:	bf1e      	ittt	ne
	movne	r1, #0
    248c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    248e:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2490:	f005 f86d 	blne	756e <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2494:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2496:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    249a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    249e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    24a2:	4905      	ldr	r1, [pc, #20]	; (24b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    24a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    24a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    24a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    24aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    24ae:	4903      	ldr	r1, [pc, #12]	; (24bc <_isr_wrapper+0x3c>)
	bx r1
    24b0:	4708      	bx	r1
    24b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    24b4:	20000a54 	.word	0x20000a54
	ldr r1, =_sw_isr_table
    24b8:	00007934 	.word	0x00007934
	ldr r1, =z_arm_int_exit
    24bc:	000024c1 	.word	0x000024c1

000024c0 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    24c0:	4b04      	ldr	r3, [pc, #16]	; (24d4 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    24c2:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    24c4:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    24c6:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    24c8:	d003      	beq.n	24d2 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    24ca:	4903      	ldr	r1, [pc, #12]	; (24d8 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    24cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    24d0:	600a      	str	r2, [r1, #0]

000024d2 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    24d2:	4770      	bx	lr
	ldr r3, =_kernel
    24d4:	20000a54 	.word	0x20000a54
	ldr r1, =_SCS_ICSR
    24d8:	e000ed04 	.word	0xe000ed04

000024dc <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    24dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24e0:	b086      	sub	sp, #24
    24e2:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    24e4:	4b3f      	ldr	r3, [pc, #252]	; (25e4 <bus_fault.constprop.0+0x108>)
    24e6:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    24e8:	4606      	mov	r6, r0
    24ea:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    24ec:	483e      	ldr	r0, [pc, #248]	; (25e8 <bus_fault.constprop.0+0x10c>)
    24ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24f2:	2402      	movs	r4, #2
    24f4:	f107 0210 	add.w	r2, r7, #16
    24f8:	613c      	str	r4, [r7, #16]
    24fa:	f004 fc45 	bl	6d88 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    24fe:	4b3b      	ldr	r3, [pc, #236]	; (25ec <bus_fault.constprop.0+0x110>)
    2500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2502:	04d9      	lsls	r1, r3, #19
    2504:	d509      	bpl.n	251a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2506:	4b3a      	ldr	r3, [pc, #232]	; (25f0 <bus_fault.constprop.0+0x114>)
    2508:	4837      	ldr	r0, [pc, #220]	; (25e8 <bus_fault.constprop.0+0x10c>)
    250a:	f107 0210 	add.w	r2, r7, #16
    250e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2512:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2516:	f004 fc37 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    251a:	4b34      	ldr	r3, [pc, #208]	; (25ec <bus_fault.constprop.0+0x110>)
    251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    251e:	051a      	lsls	r2, r3, #20
    2520:	d50a      	bpl.n	2538 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2522:	4b34      	ldr	r3, [pc, #208]	; (25f4 <bus_fault.constprop.0+0x118>)
    2524:	617b      	str	r3, [r7, #20]
    2526:	4830      	ldr	r0, [pc, #192]	; (25e8 <bus_fault.constprop.0+0x10c>)
    2528:	2302      	movs	r3, #2
    252a:	f107 0210 	add.w	r2, r7, #16
    252e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2532:	613b      	str	r3, [r7, #16]
    2534:	f004 fc28 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2538:	4c2c      	ldr	r4, [pc, #176]	; (25ec <bus_fault.constprop.0+0x110>)
    253a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    253c:	059b      	lsls	r3, r3, #22
    253e:	d522      	bpl.n	2586 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2540:	4b2d      	ldr	r3, [pc, #180]	; (25f8 <bus_fault.constprop.0+0x11c>)
    2542:	4829      	ldr	r0, [pc, #164]	; (25e8 <bus_fault.constprop.0+0x10c>)
    2544:	617b      	str	r3, [r7, #20]
    2546:	f107 0210 	add.w	r2, r7, #16
    254a:	2302      	movs	r3, #2
    254c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2550:	613b      	str	r3, [r7, #16]
    2552:	f004 fc19 	bl	6d88 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2556:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2558:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    255a:	0410      	lsls	r0, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    255c:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    255e:	d512      	bpl.n	2586 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2560:	b088      	sub	sp, #32
    2562:	4926      	ldr	r1, [pc, #152]	; (25fc <bus_fault.constprop.0+0x120>)
    2564:	4820      	ldr	r0, [pc, #128]	; (25e8 <bus_fault.constprop.0+0x10c>)
    2566:	466a      	mov	r2, sp
    2568:	e9c2 1305 	strd	r1, r3, [r2, #20]
    256c:	2303      	movs	r3, #3
    256e:	f842 3f10 	str.w	r3, [r2, #16]!
    2572:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2576:	f004 fc07 	bl	6d88 <z_log_msg2_static_create.constprop.0>
    257a:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    257c:	b11e      	cbz	r6, 2586 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    257e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2580:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2584:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2586:	4b19      	ldr	r3, [pc, #100]	; (25ec <bus_fault.constprop.0+0x110>)
    2588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    258a:	0559      	lsls	r1, r3, #21
    258c:	d50a      	bpl.n	25a4 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    258e:	4b1c      	ldr	r3, [pc, #112]	; (2600 <bus_fault.constprop.0+0x124>)
    2590:	617b      	str	r3, [r7, #20]
    2592:	4815      	ldr	r0, [pc, #84]	; (25e8 <bus_fault.constprop.0+0x10c>)
    2594:	2302      	movs	r3, #2
    2596:	f107 0210 	add.w	r2, r7, #16
    259a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    259e:	613b      	str	r3, [r7, #16]
    25a0:	f004 fbf2 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    25a4:	4b11      	ldr	r3, [pc, #68]	; (25ec <bus_fault.constprop.0+0x110>)
    25a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    25a8:	05d2      	lsls	r2, r2, #23
    25aa:	d515      	bpl.n	25d8 <bus_fault.constprop.0+0xfc>
		PR_FAULT_INFO("  Instruction bus error");
    25ac:	4b15      	ldr	r3, [pc, #84]	; (2604 <bus_fault.constprop.0+0x128>)
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25ae:	617b      	str	r3, [r7, #20]
    25b0:	480d      	ldr	r0, [pc, #52]	; (25e8 <bus_fault.constprop.0+0x10c>)
    25b2:	2302      	movs	r3, #2
    25b4:	f107 0210 	add.w	r2, r7, #16
    25b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25bc:	613b      	str	r3, [r7, #16]
    25be:	f004 fbe3 	bl	6d88 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25c2:	4a0a      	ldr	r2, [pc, #40]	; (25ec <bus_fault.constprop.0+0x110>)
    25c4:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    25c6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    25cc:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    25ce:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    25d0:	7028      	strb	r0, [r5, #0]
}
    25d2:	46bd      	mov	sp, r7
    25d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    25d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25da:	049b      	lsls	r3, r3, #18
    25dc:	d5f1      	bpl.n	25c2 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    25de:	4b0a      	ldr	r3, [pc, #40]	; (2608 <bus_fault.constprop.0+0x12c>)
    25e0:	e7e5      	b.n	25ae <bus_fault.constprop.0+0xd2>
    25e2:	bf00      	nop
    25e4:	00007ffc 	.word	0x00007ffc
    25e8:	00007a9c 	.word	0x00007a9c
    25ec:	e000ed00 	.word	0xe000ed00
    25f0:	00008012 	.word	0x00008012
    25f4:	00008023 	.word	0x00008023
    25f8:	00008036 	.word	0x00008036
    25fc:	0000804f 	.word	0x0000804f
    2600:	00008064 	.word	0x00008064
    2604:	0000807f 	.word	0x0000807f
    2608:	00008097 	.word	0x00008097

0000260c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    260c:	b510      	push	{r4, lr}
    260e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2610:	4b33      	ldr	r3, [pc, #204]	; (26e0 <usage_fault.constprop.0+0xd4>)
    2612:	4834      	ldr	r0, [pc, #208]	; (26e4 <usage_fault.constprop.0+0xd8>)
    2614:	9305      	str	r3, [sp, #20]
    2616:	2402      	movs	r4, #2
    2618:	aa04      	add	r2, sp, #16
    261a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    261e:	9404      	str	r4, [sp, #16]
    2620:	f004 fbb2 	bl	6d88 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2624:	4b30      	ldr	r3, [pc, #192]	; (26e8 <usage_fault.constprop.0+0xdc>)
    2626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2628:	019b      	lsls	r3, r3, #6
    262a:	d508      	bpl.n	263e <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    262c:	4b2f      	ldr	r3, [pc, #188]	; (26ec <usage_fault.constprop.0+0xe0>)
    262e:	482d      	ldr	r0, [pc, #180]	; (26e4 <usage_fault.constprop.0+0xd8>)
    2630:	aa04      	add	r2, sp, #16
    2632:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2636:	e9cd 4304 	strd	r4, r3, [sp, #16]
    263a:	f004 fba5 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    263e:	4b2a      	ldr	r3, [pc, #168]	; (26e8 <usage_fault.constprop.0+0xdc>)
    2640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2642:	01dc      	lsls	r4, r3, #7
    2644:	d509      	bpl.n	265a <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2646:	4b2a      	ldr	r3, [pc, #168]	; (26f0 <usage_fault.constprop.0+0xe4>)
    2648:	9305      	str	r3, [sp, #20]
    264a:	4826      	ldr	r0, [pc, #152]	; (26e4 <usage_fault.constprop.0+0xd8>)
    264c:	2302      	movs	r3, #2
    264e:	aa04      	add	r2, sp, #16
    2650:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2654:	9304      	str	r3, [sp, #16]
    2656:	f004 fb97 	bl	6d88 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    265a:	4b23      	ldr	r3, [pc, #140]	; (26e8 <usage_fault.constprop.0+0xdc>)
    265c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    265e:	0318      	lsls	r0, r3, #12
    2660:	d509      	bpl.n	2676 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2662:	4b24      	ldr	r3, [pc, #144]	; (26f4 <usage_fault.constprop.0+0xe8>)
    2664:	9305      	str	r3, [sp, #20]
    2666:	481f      	ldr	r0, [pc, #124]	; (26e4 <usage_fault.constprop.0+0xd8>)
    2668:	2302      	movs	r3, #2
    266a:	aa04      	add	r2, sp, #16
    266c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2670:	9304      	str	r3, [sp, #16]
    2672:	f004 fb89 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2676:	4b1c      	ldr	r3, [pc, #112]	; (26e8 <usage_fault.constprop.0+0xdc>)
    2678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    267a:	0359      	lsls	r1, r3, #13
    267c:	d509      	bpl.n	2692 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    267e:	4b1e      	ldr	r3, [pc, #120]	; (26f8 <usage_fault.constprop.0+0xec>)
    2680:	9305      	str	r3, [sp, #20]
    2682:	4818      	ldr	r0, [pc, #96]	; (26e4 <usage_fault.constprop.0+0xd8>)
    2684:	2302      	movs	r3, #2
    2686:	aa04      	add	r2, sp, #16
    2688:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    268c:	9304      	str	r3, [sp, #16]
    268e:	f004 fb7b 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2692:	4b15      	ldr	r3, [pc, #84]	; (26e8 <usage_fault.constprop.0+0xdc>)
    2694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2696:	039a      	lsls	r2, r3, #14
    2698:	d509      	bpl.n	26ae <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    269a:	4b18      	ldr	r3, [pc, #96]	; (26fc <usage_fault.constprop.0+0xf0>)
    269c:	9305      	str	r3, [sp, #20]
    269e:	4811      	ldr	r0, [pc, #68]	; (26e4 <usage_fault.constprop.0+0xd8>)
    26a0:	2302      	movs	r3, #2
    26a2:	aa04      	add	r2, sp, #16
    26a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26a8:	9304      	str	r3, [sp, #16]
    26aa:	f004 fb6d 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    26ae:	4b0e      	ldr	r3, [pc, #56]	; (26e8 <usage_fault.constprop.0+0xdc>)
    26b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    26b2:	03db      	lsls	r3, r3, #15
    26b4:	d509      	bpl.n	26ca <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    26b6:	4b12      	ldr	r3, [pc, #72]	; (2700 <usage_fault.constprop.0+0xf4>)
    26b8:	9305      	str	r3, [sp, #20]
    26ba:	480a      	ldr	r0, [pc, #40]	; (26e4 <usage_fault.constprop.0+0xd8>)
    26bc:	2302      	movs	r3, #2
    26be:	aa04      	add	r2, sp, #16
    26c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26c4:	9304      	str	r3, [sp, #16]
    26c6:	f004 fb5f 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    26ca:	4a07      	ldr	r2, [pc, #28]	; (26e8 <usage_fault.constprop.0+0xdc>)
    26cc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    26ce:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    26d2:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    26d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    26d8:	6293      	str	r3, [r2, #40]	; 0x28
}
    26da:	b006      	add	sp, #24
    26dc:	bd10      	pop	{r4, pc}
    26de:	bf00      	nop
    26e0:	000080c6 	.word	0x000080c6
    26e4:	00007a9c 	.word	0x00007a9c
    26e8:	e000ed00 	.word	0xe000ed00
    26ec:	000080de 	.word	0x000080de
    26f0:	000080f1 	.word	0x000080f1
    26f4:	0000810b 	.word	0x0000810b
    26f8:	00008129 	.word	0x00008129
    26fc:	0000814e 	.word	0x0000814e
    2700:	00008168 	.word	0x00008168

00002704 <mem_manage_fault>:
{
    2704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2708:	b086      	sub	sp, #24
    270a:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    270c:	4b50      	ldr	r3, [pc, #320]	; (2850 <mem_manage_fault+0x14c>)
    270e:	617b      	str	r3, [r7, #20]
{
    2710:	4606      	mov	r6, r0
    2712:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2714:	484f      	ldr	r0, [pc, #316]	; (2854 <mem_manage_fault+0x150>)
{
    2716:	4614      	mov	r4, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2718:	2502      	movs	r5, #2
    271a:	f107 0210 	add.w	r2, r7, #16
    271e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2722:	613d      	str	r5, [r7, #16]
    2724:	f004 fb30 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2728:	4b4b      	ldr	r3, [pc, #300]	; (2858 <mem_manage_fault+0x154>)
    272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    272c:	06d8      	lsls	r0, r3, #27
    272e:	d509      	bpl.n	2744 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2730:	4b4a      	ldr	r3, [pc, #296]	; (285c <mem_manage_fault+0x158>)
    2732:	4848      	ldr	r0, [pc, #288]	; (2854 <mem_manage_fault+0x150>)
    2734:	f107 0210 	add.w	r2, r7, #16
    2738:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    273c:	e9c7 5304 	strd	r5, r3, [r7, #16]
    2740:	f004 fb22 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2744:	4b44      	ldr	r3, [pc, #272]	; (2858 <mem_manage_fault+0x154>)
    2746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2748:	0719      	lsls	r1, r3, #28
    274a:	d50a      	bpl.n	2762 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    274c:	4b44      	ldr	r3, [pc, #272]	; (2860 <mem_manage_fault+0x15c>)
    274e:	617b      	str	r3, [r7, #20]
    2750:	4840      	ldr	r0, [pc, #256]	; (2854 <mem_manage_fault+0x150>)
    2752:	2302      	movs	r3, #2
    2754:	f107 0210 	add.w	r2, r7, #16
    2758:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    275c:	613b      	str	r3, [r7, #16]
    275e:	f004 fb13 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2762:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2858 <mem_manage_fault+0x154>
    2766:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    276a:	079a      	lsls	r2, r3, #30
    276c:	d439      	bmi.n	27e2 <mem_manage_fault+0xde>
	uint32_t mmfar = -EINVAL;
    276e:	f06f 0515 	mvn.w	r5, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2772:	4b39      	ldr	r3, [pc, #228]	; (2858 <mem_manage_fault+0x154>)
    2774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2776:	07d8      	lsls	r0, r3, #31
    2778:	d50a      	bpl.n	2790 <mem_manage_fault+0x8c>
		PR_FAULT_INFO("  Instruction Access Violation");
    277a:	4b3a      	ldr	r3, [pc, #232]	; (2864 <mem_manage_fault+0x160>)
    277c:	617b      	str	r3, [r7, #20]
    277e:	4835      	ldr	r0, [pc, #212]	; (2854 <mem_manage_fault+0x150>)
    2780:	2302      	movs	r3, #2
    2782:	f107 0210 	add.w	r2, r7, #16
    2786:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    278a:	613b      	str	r3, [r7, #16]
    278c:	f004 fafc 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2790:	4b31      	ldr	r3, [pc, #196]	; (2858 <mem_manage_fault+0x154>)
    2792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2794:	0699      	lsls	r1, r3, #26
    2796:	d50a      	bpl.n	27ae <mem_manage_fault+0xaa>
		PR_FAULT_INFO(
    2798:	4b33      	ldr	r3, [pc, #204]	; (2868 <mem_manage_fault+0x164>)
    279a:	617b      	str	r3, [r7, #20]
    279c:	482d      	ldr	r0, [pc, #180]	; (2854 <mem_manage_fault+0x150>)
    279e:	2302      	movs	r3, #2
    27a0:	f107 0210 	add.w	r2, r7, #16
    27a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27a8:	613b      	str	r3, [r7, #16]
    27aa:	f004 faed 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27ae:	4b2a      	ldr	r3, [pc, #168]	; (2858 <mem_manage_fault+0x154>)
    27b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27b2:	06d2      	lsls	r2, r2, #27
    27b4:	d43f      	bmi.n	2836 <mem_manage_fault+0x132>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    27b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    27b8:	0790      	lsls	r0, r2, #30
    27ba:	d43c      	bmi.n	2836 <mem_manage_fault+0x132>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    27bc:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    27be:	4b26      	ldr	r3, [pc, #152]	; (2858 <mem_manage_fault+0x154>)
    27c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27c2:	0692      	lsls	r2, r2, #26
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
    27c4:	bf42      	ittt	mi
    27c6:	6a5a      	ldrmi	r2, [r3, #36]	; 0x24
    27c8:	f422 5200 	bicmi.w	r2, r2, #8192	; 0x2000
    27cc:	625a      	strmi	r2, [r3, #36]	; 0x24
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    27ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    27d0:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    27d4:	629a      	str	r2, [r3, #40]	; 0x28
}
    27d6:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    27d8:	2300      	movs	r3, #0
    27da:	7023      	strb	r3, [r4, #0]
}
    27dc:	46bd      	mov	sp, r7
    27de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    27e2:	4b22      	ldr	r3, [pc, #136]	; (286c <mem_manage_fault+0x168>)
    27e4:	617b      	str	r3, [r7, #20]
    27e6:	481b      	ldr	r0, [pc, #108]	; (2854 <mem_manage_fault+0x150>)
    27e8:	2302      	movs	r3, #2
    27ea:	f107 0210 	add.w	r2, r7, #16
    27ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27f2:	613b      	str	r3, [r7, #16]
    27f4:	f004 fac8 	bl	6d88 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    27f8:	f8da 5034 	ldr.w	r5, [sl, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    27fc:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    2800:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    2802:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2804:	d5b3      	bpl.n	276e <mem_manage_fault+0x6a>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2806:	b088      	sub	sp, #32
    2808:	4b19      	ldr	r3, [pc, #100]	; (2870 <mem_manage_fault+0x16c>)
    280a:	4812      	ldr	r0, [pc, #72]	; (2854 <mem_manage_fault+0x150>)
    280c:	466a      	mov	r2, sp
    280e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    2812:	2303      	movs	r3, #3
    2814:	f842 3f10 	str.w	r3, [r2, #16]!
    2818:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    281c:	f004 fab4 	bl	6d88 <z_log_msg2_static_create.constprop.0>
    2820:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    2822:	f1b8 0f00 	cmp.w	r8, #0
    2826:	d0a4      	beq.n	2772 <mem_manage_fault+0x6e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2828:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    282c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2830:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
    2834:	e79d      	b.n	2772 <mem_manage_fault+0x6e>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2836:	685b      	ldr	r3, [r3, #4]
    2838:	0519      	lsls	r1, r3, #20
    283a:	d5bf      	bpl.n	27bc <mem_manage_fault+0xb8>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    283c:	4631      	mov	r1, r6
    283e:	4628      	mov	r0, r5
    2840:	f7ff fdf2 	bl	2428 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2844:	2800      	cmp	r0, #0
    2846:	d0b9      	beq.n	27bc <mem_manage_fault+0xb8>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2848:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    284c:	2002      	movs	r0, #2
    284e:	e7b6      	b.n	27be <mem_manage_fault+0xba>
    2850:	00008193 	.word	0x00008193
    2854:	00007a9c 	.word	0x00007a9c
    2858:	e000ed00 	.word	0xe000ed00
    285c:	000081a9 	.word	0x000081a9
    2860:	00008023 	.word	0x00008023
    2864:	0000820a 	.word	0x0000820a
    2868:	00008097 	.word	0x00008097
    286c:	000081dc 	.word	0x000081dc
    2870:	000081f4 	.word	0x000081f4

00002874 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2878:	4b76      	ldr	r3, [pc, #472]	; (2a54 <z_arm_fault+0x1e0>)
{
    287a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    287c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2880:	af00      	add	r7, sp, #0
    2882:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2884:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2888:	2600      	movs	r6, #0
    288a:	f386 8811 	msr	BASEPRI, r6
    288e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2892:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2896:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    289a:	d10e      	bne.n	28ba <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    289c:	f002 030c 	and.w	r3, r2, #12
    28a0:	2b08      	cmp	r3, #8
    28a2:	d10c      	bne.n	28be <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    28a4:	4b6c      	ldr	r3, [pc, #432]	; (2a58 <z_arm_fault+0x1e4>)
    28a6:	61fb      	str	r3, [r7, #28]
    28a8:	486c      	ldr	r0, [pc, #432]	; (2a5c <z_arm_fault+0x1e8>)
    28aa:	2302      	movs	r3, #2
    28ac:	f107 0218 	add.w	r2, r7, #24
    28b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28b4:	61bb      	str	r3, [r7, #24]
    28b6:	f004 fa67 	bl	6d88 <z_log_msg2_static_create.constprop.0>
		return NULL;
    28ba:	4635      	mov	r5, r6
    28bc:	e003      	b.n	28c6 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    28be:	0712      	lsls	r2, r2, #28
    28c0:	d401      	bmi.n	28c6 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    28c2:	4605      	mov	r5, r0
			*nested_exc = true;
    28c4:	2601      	movs	r6, #1
	*recoverable = false;
    28c6:	2300      	movs	r3, #0
    28c8:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    28ca:	1ee3      	subs	r3, r4, #3
    28cc:	2b09      	cmp	r3, #9
    28ce:	f200 80a1 	bhi.w	2a14 <z_arm_fault+0x1a0>
    28d2:	e8df f003 	tbb	[pc, r3]
    28d6:	9405      	.short	0x9405
    28d8:	9f9f9197 	.word	0x9f9f9197
    28dc:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28e0:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2a54 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    28e4:	4b5e      	ldr	r3, [pc, #376]	; (2a60 <z_arm_fault+0x1ec>)
    28e6:	485d      	ldr	r0, [pc, #372]	; (2a5c <z_arm_fault+0x1e8>)
    28e8:	61fb      	str	r3, [r7, #28]
    28ea:	f04f 0a02 	mov.w	sl, #2
    28ee:	f107 0218 	add.w	r2, r7, #24
    28f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28f6:	f8c7 a018 	str.w	sl, [r7, #24]
    28fa:	f004 fa45 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    28fe:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2902:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2906:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    290a:	46e9      	mov	r9, sp
	*recoverable = false;
    290c:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2910:	d00b      	beq.n	292a <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2912:	4b54      	ldr	r3, [pc, #336]	; (2a64 <z_arm_fault+0x1f0>)
    2914:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2918:	4850      	ldr	r0, [pc, #320]	; (2a5c <z_arm_fault+0x1e8>)
    291a:	f107 0218 	add.w	r2, r7, #24
    291e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2922:	f004 fa31 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2926:	2400      	movs	r4, #0
}
    2928:	e00d      	b.n	2946 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    292a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    292e:	2b00      	cmp	r3, #0
    2930:	da25      	bge.n	297e <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    2932:	4b4d      	ldr	r3, [pc, #308]	; (2a68 <z_arm_fault+0x1f4>)
    2934:	4849      	ldr	r0, [pc, #292]	; (2a5c <z_arm_fault+0x1e8>)
    2936:	f107 0218 	add.w	r2, r7, #24
    293a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    293e:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2942:	f004 fa21 	bl	6d88 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2946:	79fb      	ldrb	r3, [r7, #7]
    2948:	b9ab      	cbnz	r3, 2976 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    294a:	2220      	movs	r2, #32
    294c:	4629      	mov	r1, r5
    294e:	f107 0008 	add.w	r0, r7, #8
    2952:	f004 fa36 	bl	6dc2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2958:	2e00      	cmp	r6, #0
    295a:	d076      	beq.n	2a4a <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    295c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2960:	b922      	cbnz	r2, 296c <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2962:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2966:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    296a:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    296c:	f107 0108 	add.w	r1, r7, #8
    2970:	4620      	mov	r0, r4
    2972:	f7ff fc19 	bl	21a8 <z_arm_fatal_error>
}
    2976:	372c      	adds	r7, #44	; 0x2c
    2978:	46bd      	mov	sp, r7
    297a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    297e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2982:	005b      	lsls	r3, r3, #1
    2984:	d5df      	bpl.n	2946 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    2986:	4b39      	ldr	r3, [pc, #228]	; (2a6c <z_arm_fault+0x1f8>)
    2988:	4834      	ldr	r0, [pc, #208]	; (2a5c <z_arm_fault+0x1e8>)
    298a:	f107 0218 	add.w	r2, r7, #24
    298e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2992:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2996:	f004 f9f7 	bl	6d88 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    299a:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    299c:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    29a0:	f64d 7302 	movw	r3, #57090	; 0xdf02
    29a4:	429a      	cmp	r2, r3
    29a6:	d009      	beq.n	29bc <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    29a8:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    29ac:	b1bb      	cbz	r3, 29de <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    29ae:	1dfa      	adds	r2, r7, #7
    29b0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    29b2:	4628      	mov	r0, r5
    29b4:	f7ff fea6 	bl	2704 <mem_manage_fault>
    29b8:	4604      	mov	r4, r0
		break;
    29ba:	e7c4      	b.n	2946 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    29bc:	b088      	sub	sp, #32
    29be:	682b      	ldr	r3, [r5, #0]
    29c0:	492b      	ldr	r1, [pc, #172]	; (2a70 <z_arm_fault+0x1fc>)
    29c2:	4826      	ldr	r0, [pc, #152]	; (2a5c <z_arm_fault+0x1e8>)
    29c4:	466a      	mov	r2, sp
    29c6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    29ca:	2303      	movs	r3, #3
    29cc:	f842 3f10 	str.w	r3, [r2, #16]!
    29d0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29d4:	f004 f9d8 	bl	6d88 <z_log_msg2_static_create.constprop.0>
    29d8:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    29da:	682c      	ldr	r4, [r5, #0]
    29dc:	e7b3      	b.n	2946 <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    29de:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    29e2:	b123      	cbz	r3, 29ee <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    29e4:	1df9      	adds	r1, r7, #7
    29e6:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    29e8:	f7ff fd78 	bl	24dc <bus_fault.constprop.0>
    29ec:	e7e4      	b.n	29b8 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    29ee:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    29f2:	b29b      	uxth	r3, r3
    29f4:	2b00      	cmp	r3, #0
    29f6:	d0a6      	beq.n	2946 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    29f8:	f7ff fe08 	bl	260c <usage_fault.constprop.0>
    29fc:	e7dc      	b.n	29b8 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    29fe:	1dfa      	adds	r2, r7, #7
    2a00:	2100      	movs	r1, #0
    2a02:	e7d6      	b.n	29b2 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    2a04:	1df9      	adds	r1, r7, #7
    2a06:	2000      	movs	r0, #0
    2a08:	e7ee      	b.n	29e8 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    2a0a:	4b1a      	ldr	r3, [pc, #104]	; (2a74 <z_arm_fault+0x200>)
    2a0c:	61fb      	str	r3, [r7, #28]
    2a0e:	2302      	movs	r3, #2
    2a10:	61bb      	str	r3, [r7, #24]
    2a12:	e781      	b.n	2918 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2a14:	4a18      	ldr	r2, [pc, #96]	; (2a78 <z_arm_fault+0x204>)
    2a16:	4b19      	ldr	r3, [pc, #100]	; (2a7c <z_arm_fault+0x208>)
    2a18:	4919      	ldr	r1, [pc, #100]	; (2a80 <z_arm_fault+0x20c>)
    2a1a:	4810      	ldr	r0, [pc, #64]	; (2a5c <z_arm_fault+0x1e8>)
    2a1c:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2a20:	46e8      	mov	r8, sp
    2a22:	b08a      	sub	sp, #40	; 0x28
    2a24:	bf18      	it	ne
    2a26:	4613      	movne	r3, r2
    2a28:	466a      	mov	r2, sp
    2a2a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2a2e:	2302      	movs	r3, #2
    2a30:	f882 3020 	strb.w	r3, [r2, #32]
    2a34:	3c10      	subs	r4, #16
    2a36:	4b13      	ldr	r3, [pc, #76]	; (2a84 <z_arm_fault+0x210>)
    2a38:	61d4      	str	r4, [r2, #28]
    2a3a:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2a3e:	f842 3f10 	str.w	r3, [r2, #16]!
    2a42:	f004 f9a1 	bl	6d88 <z_log_msg2_static_create.constprop.0>
    2a46:	46c5      	mov	sp, r8
    2a48:	e76d      	b.n	2926 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a4a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2a4e:	f023 0301 	bic.w	r3, r3, #1
    2a52:	e78a      	b.n	296a <z_arm_fault+0xf6>
    2a54:	e000ed00 	.word	0xe000ed00
    2a58:	00008257 	.word	0x00008257
    2a5c:	00007a9c 	.word	0x00007a9c
    2a60:	00008282 	.word	0x00008282
    2a64:	00008299 	.word	0x00008299
    2a68:	000082ba 	.word	0x000082ba
    2a6c:	000082c8 	.word	0x000082c8
    2a70:	000082e7 	.word	0x000082e7
    2a74:	00008303 	.word	0x00008303
    2a78:	0000823e 	.word	0x0000823e
    2a7c:	00008229 	.word	0x00008229
    2a80:	00008327 	.word	0x00008327
    2a84:	01000004 	.word	0x01000004

00002a88 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2a88:	4a02      	ldr	r2, [pc, #8]	; (2a94 <z_arm_fault_init+0xc>)
    2a8a:	6953      	ldr	r3, [r2, #20]
    2a8c:	f043 0310 	orr.w	r3, r3, #16
    2a90:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2a92:	4770      	bx	lr
    2a94:	e000ed00 	.word	0xe000ed00

00002a98 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2a98:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2a9c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2aa0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2aa2:	4672      	mov	r2, lr
	bl z_arm_fault
    2aa4:	f7ff fee6 	bl	2874 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2aa8:	bd01      	pop	{r0, pc}
    2aaa:	bf00      	nop

00002aac <z_arm_interrupt_init>:
    2aac:	4804      	ldr	r0, [pc, #16]	; (2ac0 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2aae:	2300      	movs	r3, #0
    2ab0:	2120      	movs	r1, #32
    2ab2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2ab4:	3301      	adds	r3, #1
    2ab6:	2b27      	cmp	r3, #39	; 0x27
    2ab8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2abc:	d1f9      	bne.n	2ab2 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2abe:	4770      	bx	lr
    2ac0:	e000e100 	.word	0xe000e100

00002ac4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2ac4:	2000      	movs	r0, #0
    msr CONTROL, r0
    2ac6:	f380 8814 	msr	CONTROL, r0
    isb
    2aca:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2ace:	f004 fea3 	bl	7818 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2ad2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2ad4:	490d      	ldr	r1, [pc, #52]	; (2b0c <__start+0x48>)
    str r0, [r1]
    2ad6:	6008      	str	r0, [r1, #0]
    dsb
    2ad8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2adc:	480c      	ldr	r0, [pc, #48]	; (2b10 <__start+0x4c>)
    msr msp, r0
    2ade:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2ae2:	f000 f82b 	bl	2b3c <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2ae6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2ae8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2aec:	4809      	ldr	r0, [pc, #36]	; (2b14 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2aee:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2af2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2af4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2af8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2afc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2afe:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2b00:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2b04:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2b08:	f7ff fc02 	bl	2310 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2b0c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2b10:	200015e0 	.word	0x200015e0
    ldr r0, =z_interrupt_stacks
    2b14:	20001760 	.word	0x20001760

00002b18 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2b18:	4907      	ldr	r1, [pc, #28]	; (2b38 <z_arm_clear_arm_mpu_config+0x20>)
    2b1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2b1e:	2300      	movs	r3, #0
	int num_regions =
    2b20:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2b24:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2b26:	4293      	cmp	r3, r2
    2b28:	d100      	bne.n	2b2c <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2b2a:	4770      	bx	lr
  MPU->RNR = rnr;
    2b2c:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2b30:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2b34:	3301      	adds	r3, #1
    2b36:	e7f6      	b.n	2b26 <z_arm_clear_arm_mpu_config+0xe>
    2b38:	e000ed00 	.word	0xe000ed00

00002b3c <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2b3c:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2b3e:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2b40:	2300      	movs	r3, #0
    2b42:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2b46:	f7ff ffe7 	bl	2b18 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2b4a:	4b14      	ldr	r3, [pc, #80]	; (2b9c <z_arm_init_arch_hw_at_boot+0x60>)
    2b4c:	f04f 32ff 	mov.w	r2, #4294967295
    2b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2b54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2b58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2b5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2b64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2b68:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2b6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2b70:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2b74:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2b78:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2b7c:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2b80:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2b84:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2b88:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2b8c:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2b90:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2b92:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b96:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2b9a:	bd08      	pop	{r3, pc}
    2b9c:	e000e100 	.word	0xe000e100

00002ba0 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2ba0:	4b08      	ldr	r3, [pc, #32]	; (2bc4 <z_impl_k_thread_abort+0x24>)
    2ba2:	689b      	ldr	r3, [r3, #8]
    2ba4:	4283      	cmp	r3, r0
    2ba6:	d10b      	bne.n	2bc0 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2ba8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2bac:	b143      	cbz	r3, 2bc0 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bae:	4b06      	ldr	r3, [pc, #24]	; (2bc8 <z_impl_k_thread_abort+0x28>)
    2bb0:	685a      	ldr	r2, [r3, #4]
    2bb2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2bb6:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2bb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2bba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2bbe:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2bc0:	f003 ba3a 	b.w	6038 <z_thread_abort>
    2bc4:	20000a54 	.word	0x20000a54
    2bc8:	e000ed00 	.word	0xe000ed00

00002bcc <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2bcc:	4b02      	ldr	r3, [pc, #8]	; (2bd8 <z_arm_configure_static_mpu_regions+0xc>)
    2bce:	4a03      	ldr	r2, [pc, #12]	; (2bdc <z_arm_configure_static_mpu_regions+0x10>)
    2bd0:	4803      	ldr	r0, [pc, #12]	; (2be0 <z_arm_configure_static_mpu_regions+0x14>)
    2bd2:	2101      	movs	r1, #1
    2bd4:	f000 b890 	b.w	2cf8 <arm_core_mpu_configure_static_mpu_regions>
    2bd8:	20010000 	.word	0x20010000
    2bdc:	20000000 	.word	0x20000000
    2be0:	00007bd0 	.word	0x00007bd0

00002be4 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2be4:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2be6:	4b05      	ldr	r3, [pc, #20]	; (2bfc <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2be8:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2bea:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2bec:	4a04      	ldr	r2, [pc, #16]	; (2c00 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2bee:	2120      	movs	r1, #32
    2bf0:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2bf4:	4618      	mov	r0, r3
    2bf6:	2101      	movs	r1, #1
    2bf8:	f000 b888 	b.w	2d0c <arm_core_mpu_configure_dynamic_mpu_regions>
    2bfc:	2000089c 	.word	0x2000089c
    2c00:	150b0000 	.word	0x150b0000

00002c04 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2c06:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2cbc <mpu_configure_regions+0xb8>
    2c0a:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2c0c:	2500      	movs	r5, #0
    2c0e:	428d      	cmp	r5, r1
    2c10:	da1a      	bge.n	2c48 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2c12:	6844      	ldr	r4, [r0, #4]
    2c14:	2c00      	cmp	r4, #0
    2c16:	d04d      	beq.n	2cb4 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2c18:	b1fb      	cbz	r3, 2c5a <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2c1a:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2c1e:	ea14 0f0e 	tst.w	r4, lr
    2c22:	d014      	beq.n	2c4e <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2c24:	4b26      	ldr	r3, [pc, #152]	; (2cc0 <mpu_configure_regions+0xbc>)
    2c26:	466c      	mov	r4, sp
    2c28:	b088      	sub	sp, #32
    2c2a:	466a      	mov	r2, sp
    2c2c:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c30:	2303      	movs	r3, #3
    2c32:	f842 3f10 	str.w	r3, [r2, #16]!
    2c36:	4823      	ldr	r0, [pc, #140]	; (2cc4 <mpu_configure_regions+0xc0>)
    2c38:	2300      	movs	r3, #0
    2c3a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c3e:	f004 f84f 	bl	6ce0 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c42:	f06f 0215 	mvn.w	r2, #21
    2c46:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2c48:	4610      	mov	r0, r2
    2c4a:	46bd      	mov	sp, r7
    2c4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2c4e:	2c1f      	cmp	r4, #31
    2c50:	d9e8      	bls.n	2c24 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2c52:	6806      	ldr	r6, [r0, #0]
		&&
    2c54:	ea1e 0f06 	tst.w	lr, r6
    2c58:	d1e4      	bne.n	2c24 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2c5a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2c5c:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c5e:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2c62:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2c64:	d914      	bls.n	2c90 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2c66:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2c6a:	d813      	bhi.n	2c94 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2c6c:	3c01      	subs	r4, #1
    2c6e:	fab4 f484 	clz	r4, r4
    2c72:	f1c4 041f 	rsb	r4, r4, #31
    2c76:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2c78:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2c7a:	ea4e 0404 	orr.w	r4, lr, r4
    2c7e:	d90b      	bls.n	2c98 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2c80:	4911      	ldr	r1, [pc, #68]	; (2cc8 <mpu_configure_regions+0xc4>)
    2c82:	466c      	mov	r4, sp
    2c84:	b088      	sub	sp, #32
    2c86:	466b      	mov	r3, sp
    2c88:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2c8c:	461a      	mov	r2, r3
    2c8e:	e7cf      	b.n	2c30 <mpu_configure_regions+0x2c>
		return REGION_32B;
    2c90:	2408      	movs	r4, #8
    2c92:	e7f1      	b.n	2c78 <mpu_configure_regions+0x74>
		return REGION_4G;
    2c94:	243e      	movs	r4, #62	; 0x3e
    2c96:	e7ef      	b.n	2c78 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2c98:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2c9c:	4316      	orrs	r6, r2
    2c9e:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2ca2:	f044 0401 	orr.w	r4, r4, #1
    2ca6:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2caa:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2cae:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2cb0:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2cb4:	3501      	adds	r5, #1
    2cb6:	300c      	adds	r0, #12
    2cb8:	e7a9      	b.n	2c0e <mpu_configure_regions+0xa>
    2cba:	bf00      	nop
    2cbc:	e000ed00 	.word	0xe000ed00
    2cc0:	0000833e 	.word	0x0000833e
    2cc4:	00007a94 	.word	0x00007a94
    2cc8:	00008361 	.word	0x00008361

00002ccc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2ccc:	4b04      	ldr	r3, [pc, #16]	; (2ce0 <arm_core_mpu_enable+0x14>)
    2cce:	2205      	movs	r2, #5
    2cd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2cd4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cd8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2cdc:	4770      	bx	lr
    2cde:	bf00      	nop
    2ce0:	e000ed00 	.word	0xe000ed00

00002ce4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2ce4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2ce8:	4b02      	ldr	r3, [pc, #8]	; (2cf4 <arm_core_mpu_disable+0x10>)
    2cea:	2200      	movs	r2, #0
    2cec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2cf0:	4770      	bx	lr
    2cf2:	bf00      	nop
    2cf4:	e000ed00 	.word	0xe000ed00

00002cf8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2cf8:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2cfa:	4c03      	ldr	r4, [pc, #12]	; (2d08 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2cfc:	2301      	movs	r3, #1
    2cfe:	7822      	ldrb	r2, [r4, #0]
    2d00:	f7ff ff80 	bl	2c04 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2d04:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2d06:	bd10      	pop	{r4, pc}
    2d08:	20000aa8 	.word	0x20000aa8

00002d0c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2d0c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2d0e:	4a09      	ldr	r2, [pc, #36]	; (2d34 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2d10:	2300      	movs	r3, #0
    2d12:	7812      	ldrb	r2, [r2, #0]
    2d14:	f7ff ff76 	bl	2c04 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2d18:	f110 0f16 	cmn.w	r0, #22
    2d1c:	d003      	beq.n	2d26 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2d1e:	4b06      	ldr	r3, [pc, #24]	; (2d38 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2d20:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2d22:	2807      	cmp	r0, #7
    2d24:	dd00      	ble.n	2d28 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2d26:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2d28:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2d2c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2d30:	3001      	adds	r0, #1
    2d32:	e7f6      	b.n	2d22 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2d34:	20000aa8 	.word	0x20000aa8
    2d38:	e000ed00 	.word	0xe000ed00

00002d3c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2d3c:	4914      	ldr	r1, [pc, #80]	; (2d90 <z_arm_mpu_init+0x54>)
    2d3e:	6808      	ldr	r0, [r1, #0]
    2d40:	2808      	cmp	r0, #8
{
    2d42:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2d44:	d821      	bhi.n	2d8a <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2d46:	f7ff ffcd 	bl	2ce4 <arm_core_mpu_disable>
    2d4a:	4c12      	ldr	r4, [pc, #72]	; (2d94 <z_arm_mpu_init+0x58>)
    2d4c:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d4e:	2200      	movs	r2, #0
    2d50:	4290      	cmp	r0, r2
    2d52:	f101 010c 	add.w	r1, r1, #12
    2d56:	d105      	bne.n	2d64 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2d58:	4b0f      	ldr	r3, [pc, #60]	; (2d98 <z_arm_mpu_init+0x5c>)
    2d5a:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2d5c:	f7ff ffb6 	bl	2ccc <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2d60:	2000      	movs	r0, #0
}
    2d62:	bd10      	pop	{r4, pc}
    2d64:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d68:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2d6c:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2d70:	4313      	orrs	r3, r2
    2d72:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d76:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2d7e:	f043 0301 	orr.w	r3, r3, #1
    2d82:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2d86:	3201      	adds	r2, #1
    2d88:	e7e2      	b.n	2d50 <z_arm_mpu_init+0x14>
		return -1;
    2d8a:	f04f 30ff 	mov.w	r0, #4294967295
    2d8e:	e7e8      	b.n	2d62 <z_arm_mpu_init+0x26>
    2d90:	00007bdc 	.word	0x00007bdc
    2d94:	e000ed00 	.word	0xe000ed00
    2d98:	20000aa8 	.word	0x20000aa8

00002d9c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2d9c:	4b01      	ldr	r3, [pc, #4]	; (2da4 <__stdout_hook_install+0x8>)
    2d9e:	6018      	str	r0, [r3, #0]
}
    2da0:	4770      	bx	lr
    2da2:	bf00      	nop
    2da4:	2000000c 	.word	0x2000000c

00002da8 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    2da8:	f04f 0320 	mov.w	r3, #32
    2dac:	f3ef 8211 	mrs	r2, BASEPRI
    2db0:	f383 8812 	msr	BASEPRI_MAX, r3
    2db4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    2db8:	4906      	ldr	r1, [pc, #24]	; (2dd4 <nordicsemi_nrf52_init+0x2c>)
    2dba:	2301      	movs	r3, #1
    2dbc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    2dc0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2dc4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    2dc8:	f382 8811 	msr	BASEPRI, r2
    2dcc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    2dd0:	2000      	movs	r0, #0
    2dd2:	4770      	bx	lr
    2dd4:	4001e000 	.word	0x4001e000

00002dd8 <sys_arch_reboot>:
    *p_gpregret = val;
    2dd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ddc:	b2c0      	uxtb	r0, r0
    2dde:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2de2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2de6:	4905      	ldr	r1, [pc, #20]	; (2dfc <sys_arch_reboot+0x24>)
    2de8:	4b05      	ldr	r3, [pc, #20]	; (2e00 <sys_arch_reboot+0x28>)
    2dea:	68ca      	ldr	r2, [r1, #12]
    2dec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2df0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2df2:	60cb      	str	r3, [r1, #12]
    2df4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2df8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2dfa:	e7fd      	b.n	2df8 <sys_arch_reboot+0x20>
    2dfc:	e000ed00 	.word	0xe000ed00
    2e00:	05fa0004 	.word	0x05fa0004

00002e04 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2e04:	b120      	cbz	r0, 2e10 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2e06:	4b03      	ldr	r3, [pc, #12]	; (2e14 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2e08:	0180      	lsls	r0, r0, #6
    2e0a:	f043 0301 	orr.w	r3, r3, #1
    2e0e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2e10:	4770      	bx	lr
    2e12:	bf00      	nop
    2e14:	00007b20 	.word	0x00007b20

00002e18 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2e18:	4b08      	ldr	r3, [pc, #32]	; (2e3c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e1a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2e1c:	1ac3      	subs	r3, r0, r3
{
    2e1e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e20:	4907      	ldr	r1, [pc, #28]	; (2e40 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2e22:	109b      	asrs	r3, r3, #2
{
    2e24:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e26:	4359      	muls	r1, r3
    2e28:	4806      	ldr	r0, [pc, #24]	; (2e44 <onoff_stop+0x2c>)
    2e2a:	2240      	movs	r2, #64	; 0x40
    2e2c:	f004 f80e 	bl	6e4c <stop>
	notify(mgr, res);
    2e30:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e32:	4601      	mov	r1, r0
	notify(mgr, res);
    2e34:	4620      	mov	r0, r4
}
    2e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2e3a:	4718      	bx	r3
    2e3c:	200008b8 	.word	0x200008b8
    2e40:	b6db6db7 	.word	0xb6db6db7
    2e44:	0000788c 	.word	0x0000788c

00002e48 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2e4a:	4c0c      	ldr	r4, [pc, #48]	; (2e7c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2e4c:	4a0c      	ldr	r2, [pc, #48]	; (2e80 <onoff_start+0x38>)
    2e4e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2e50:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2e52:	9300      	str	r3, [sp, #0]
{
    2e54:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2e56:	460b      	mov	r3, r1
    2e58:	490a      	ldr	r1, [pc, #40]	; (2e84 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2e5a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2e5c:	4361      	muls	r1, r4
{
    2e5e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2e60:	4809      	ldr	r0, [pc, #36]	; (2e88 <onoff_start+0x40>)
    2e62:	f004 f820 	bl	6ea6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2e66:	1e01      	subs	r1, r0, #0
    2e68:	da05      	bge.n	2e76 <onoff_start+0x2e>
		notify(mgr, err);
    2e6a:	4630      	mov	r0, r6
    2e6c:	462b      	mov	r3, r5
	}
}
    2e6e:	b002      	add	sp, #8
    2e70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2e74:	4718      	bx	r3
}
    2e76:	b002      	add	sp, #8
    2e78:	bd70      	pop	{r4, r5, r6, pc}
    2e7a:	bf00      	nop
    2e7c:	200008b8 	.word	0x200008b8
    2e80:	00006f15 	.word	0x00006f15
    2e84:	b6db6db7 	.word	0xb6db6db7
    2e88:	0000788c 	.word	0x0000788c

00002e8c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2e8c:	2200      	movs	r2, #0
{
    2e8e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2e90:	2101      	movs	r1, #1
{
    2e92:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2e94:	4610      	mov	r0, r2
    2e96:	f7ff fa1f 	bl	22d8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2e9a:	480f      	ldr	r0, [pc, #60]	; (2ed8 <clk_init+0x4c>)
    2e9c:	f001 fc8e 	bl	47bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2ea0:	4b0e      	ldr	r3, [pc, #56]	; (2edc <clk_init+0x50>)
    2ea2:	4298      	cmp	r0, r3
    2ea4:	d115      	bne.n	2ed2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    2ea6:	f004 facf 	bl	7448 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2eaa:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2eac:	490c      	ldr	r1, [pc, #48]	; (2ee0 <clk_init+0x54>)
    2eae:	4630      	mov	r0, r6
    2eb0:	f003 fbd3 	bl	665a <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2eb4:	2800      	cmp	r0, #0
    2eb6:	db0b      	blt.n	2ed0 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    2eb8:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2eba:	4909      	ldr	r1, [pc, #36]	; (2ee0 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2ebc:	2501      	movs	r5, #1
    2ebe:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2ec0:	f104 001c 	add.w	r0, r4, #28
    2ec4:	f003 fbc9 	bl	665a <onoff_manager_init>
		if (err < 0) {
    2ec8:	2800      	cmp	r0, #0
    2eca:	db01      	blt.n	2ed0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2ecc:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2ece:	2000      	movs	r0, #0
}
    2ed0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2ed2:	f06f 0004 	mvn.w	r0, #4
    2ed6:	e7fb      	b.n	2ed0 <clk_init+0x44>
    2ed8:	00002f19 	.word	0x00002f19
    2edc:	0bad0000 	.word	0x0bad0000
    2ee0:	00007c2c 	.word	0x00007c2c

00002ee4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2ee4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2ee6:	230c      	movs	r3, #12
    2ee8:	4809      	ldr	r0, [pc, #36]	; (2f10 <clkstarted_handle.constprop.0+0x2c>)
    2eea:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2eec:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2eee:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2ef0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2ef4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2ef6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2ef8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2efa:	4418      	add	r0, r3
    2efc:	f003 ff93 	bl	6e26 <set_on_state>
	if (callback) {
    2f00:	b12d      	cbz	r5, 2f0e <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f02:	4632      	mov	r2, r6
    2f04:	462b      	mov	r3, r5
    2f06:	4803      	ldr	r0, [pc, #12]	; (2f14 <clkstarted_handle.constprop.0+0x30>)
}
    2f08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f0c:	4718      	bx	r3
}
    2f0e:	bd70      	pop	{r4, r5, r6, pc}
    2f10:	200008b8 	.word	0x200008b8
    2f14:	0000788c 	.word	0x0000788c

00002f18 <clock_event_handler>:
	switch (event) {
    2f18:	b110      	cbz	r0, 2f20 <clock_event_handler+0x8>
    2f1a:	2801      	cmp	r0, #1
    2f1c:	d004      	beq.n	2f28 <clock_event_handler+0x10>
    2f1e:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2f20:	4b03      	ldr	r3, [pc, #12]	; (2f30 <clock_event_handler+0x18>)
    2f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2f24:	075b      	lsls	r3, r3, #29
    2f26:	d101      	bne.n	2f2c <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2f28:	f7ff bfdc 	b.w	2ee4 <clkstarted_handle.constprop.0>
}
    2f2c:	4770      	bx	lr
    2f2e:	bf00      	nop
    2f30:	200008b8 	.word	0x200008b8

00002f34 <generic_hfclk_start>:
{
    2f34:	b508      	push	{r3, lr}
	__asm__ volatile(
    2f36:	f04f 0320 	mov.w	r3, #32
    2f3a:	f3ef 8111 	mrs	r1, BASEPRI
    2f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    2f42:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2f46:	4a12      	ldr	r2, [pc, #72]	; (2f90 <generic_hfclk_start+0x5c>)
    2f48:	6813      	ldr	r3, [r2, #0]
    2f4a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2f4e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2f52:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2f54:	d00c      	beq.n	2f70 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2f56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2f5a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2f5e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2f62:	f013 0301 	ands.w	r3, r3, #1
    2f66:	d003      	beq.n	2f70 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    2f68:	480a      	ldr	r0, [pc, #40]	; (2f94 <generic_hfclk_start+0x60>)
    2f6a:	f003 ff5c 	bl	6e26 <set_on_state>
			already_started = true;
    2f6e:	2301      	movs	r3, #1
	__asm__ volatile(
    2f70:	f381 8811 	msr	BASEPRI, r1
    2f74:	f3bf 8f6f 	isb	sy
	if (already_started) {
    2f78:	b123      	cbz	r3, 2f84 <generic_hfclk_start+0x50>
}
    2f7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    2f7e:	2000      	movs	r0, #0
    2f80:	f7ff bfb0 	b.w	2ee4 <clkstarted_handle.constprop.0>
}
    2f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    2f88:	2001      	movs	r0, #1
    2f8a:	f001 bc27 	b.w	47dc <nrfx_clock_start>
    2f8e:	bf00      	nop
    2f90:	20000908 	.word	0x20000908
    2f94:	200008f8 	.word	0x200008f8

00002f98 <api_blocking_start>:
{
    2f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2f9a:	2200      	movs	r2, #0
    2f9c:	2301      	movs	r3, #1
    2f9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2fa2:	4a09      	ldr	r2, [pc, #36]	; (2fc8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2fa4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2fa8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    2faa:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    2fae:	f003 ffaa 	bl	6f06 <api_start>
	if (err < 0) {
    2fb2:	2800      	cmp	r0, #0
    2fb4:	db05      	blt.n	2fc2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    2fb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    2fba:	2300      	movs	r3, #0
    2fbc:	4668      	mov	r0, sp
    2fbe:	f002 fd1b 	bl	59f8 <z_impl_k_sem_take>
}
    2fc2:	b005      	add	sp, #20
    2fc4:	f85d fb04 	ldr.w	pc, [sp], #4
    2fc8:	00006f2d 	.word	0x00006f2d

00002fcc <lfclk_start>:
{
    2fcc:	b510      	push	{r4, lr}
	if (!once) {
    2fce:	4c07      	ldr	r4, [pc, #28]	; (2fec <lfclk_start+0x20>)
    2fd0:	7823      	ldrb	r3, [r4, #0]
    2fd2:	b92b      	cbnz	r3, 2fe0 <lfclk_start+0x14>
	z_impl_k_busy_wait(usec_to_wait);
    2fd4:	f44f 70a5 	mov.w	r0, #330	; 0x14a
    2fd8:	f004 fbef 	bl	77ba <z_impl_k_busy_wait>
		once = true;
    2fdc:	2301      	movs	r3, #1
    2fde:	7023      	strb	r3, [r4, #0]
}
    2fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    2fe4:	2000      	movs	r0, #0
    2fe6:	f001 bbf9 	b.w	47dc <nrfx_clock_start>
    2fea:	bf00      	nop
    2fec:	20000aa9 	.word	0x20000aa9

00002ff0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ff0:	4b09      	ldr	r3, [pc, #36]	; (3018 <generic_hfclk_stop+0x28>)
    2ff2:	f3bf 8f5b 	dmb	ish
    2ff6:	e853 2f00 	ldrex	r2, [r3]
    2ffa:	f022 0102 	bic.w	r1, r2, #2
    2ffe:	e843 1000 	strex	r0, r1, [r3]
    3002:	2800      	cmp	r0, #0
    3004:	d1f7      	bne.n	2ff6 <generic_hfclk_stop+0x6>
    3006:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    300a:	07d3      	lsls	r3, r2, #31
    300c:	d402      	bmi.n	3014 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    300e:	2001      	movs	r0, #1
    3010:	f004 ba27 	b.w	7462 <nrfx_clock_stop>
}
    3014:	4770      	bx	lr
    3016:	bf00      	nop
    3018:	20000908 	.word	0x20000908

0000301c <z_nrf_clock_control_lf_on>:
{
    301c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3020:	4939      	ldr	r1, [pc, #228]	; (3108 <z_nrf_clock_control_lf_on+0xec>)
    3022:	f3bf 8f5b 	dmb	ish
    3026:	4607      	mov	r7, r0
    3028:	2201      	movs	r2, #1
    302a:	e851 3f00 	ldrex	r3, [r1]
    302e:	e841 2000 	strex	r0, r2, [r1]
    3032:	2800      	cmp	r0, #0
    3034:	d1f9      	bne.n	302a <z_nrf_clock_control_lf_on+0xe>
    3036:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    303a:	b933      	cbnz	r3, 304a <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    303c:	4933      	ldr	r1, [pc, #204]	; (310c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    303e:	4834      	ldr	r0, [pc, #208]	; (3110 <z_nrf_clock_control_lf_on+0xf4>)
    3040:	604b      	str	r3, [r1, #4]
    3042:	60cb      	str	r3, [r1, #12]
    3044:	608a      	str	r2, [r1, #8]
    3046:	f003 fb1b 	bl	6680 <onoff_request>
	switch (start_mode) {
    304a:	1e7b      	subs	r3, r7, #1
    304c:	2b01      	cmp	r3, #1
    304e:	d82f      	bhi.n	30b0 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    3050:	2f01      	cmp	r7, #1
    3052:	d107      	bne.n	3064 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    3054:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3058:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    305c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    3060:	2b01      	cmp	r3, #1
    3062:	d025      	beq.n	30b0 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3064:	f004 fa78 	bl	7558 <k_is_in_isr>
    3068:	4604      	mov	r4, r0
    306a:	b918      	cbnz	r0, 3074 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    306c:	4b29      	ldr	r3, [pc, #164]	; (3114 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    306e:	781b      	ldrb	r3, [r3, #0]
    3070:	2b00      	cmp	r3, #0
    3072:	d141      	bne.n	30f8 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    3074:	f04f 0320 	mov.w	r3, #32
    3078:	f3ef 8611 	mrs	r6, BASEPRI
    307c:	f383 8812 	msr	BASEPRI_MAX, r3
    3080:	f3bf 8f6f 	isb	sy
    3084:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3086:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3118 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    308a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    308e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3092:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    3096:	03d2      	lsls	r2, r2, #15
    3098:	d50c      	bpl.n	30b4 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    309a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    309e:	2b01      	cmp	r3, #1
    30a0:	d001      	beq.n	30a6 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    30a2:	2f01      	cmp	r7, #1
    30a4:	d106      	bne.n	30b4 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    30a6:	b30c      	cbz	r4, 30ec <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    30a8:	f386 8811 	msr	BASEPRI, r6
    30ac:	f3bf 8f6f 	isb	sy
}
    30b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    30b4:	b1ac      	cbz	r4, 30e2 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    30b6:	4630      	mov	r0, r6
    30b8:	f7ff f86c 	bl	2194 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    30bc:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    30c0:	2b00      	cmp	r3, #0
    30c2:	d1e4      	bne.n	308e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    30c4:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    30c8:	2a00      	cmp	r2, #0
    30ca:	d0e0      	beq.n	308e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    30cc:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    30d0:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    30d4:	2301      	movs	r3, #1
    30d6:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    30da:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    30de:	60ab      	str	r3, [r5, #8]
}
    30e0:	e7d5      	b.n	308e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    30e2:	2100      	movs	r1, #0
    30e4:	2021      	movs	r0, #33	; 0x21
    30e6:	f002 ff87 	bl	5ff8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    30ea:	e7e7      	b.n	30bc <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    30ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30f0:	2202      	movs	r2, #2
    30f2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    30f6:	e7db      	b.n	30b0 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    30f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30fc:	2202      	movs	r2, #2
    30fe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3102:	4606      	mov	r6, r0
}
    3104:	e7bf      	b.n	3086 <z_nrf_clock_control_lf_on+0x6a>
    3106:	bf00      	nop
    3108:	2000090c 	.word	0x2000090c
    310c:	200008a8 	.word	0x200008a8
    3110:	200008d4 	.word	0x200008d4
    3114:	20000eba 	.word	0x20000eba
    3118:	e000e100 	.word	0xe000e100

0000311c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    311c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    311e:	4b08      	ldr	r3, [pc, #32]	; (3140 <uart_console_init+0x24>)
    3120:	4808      	ldr	r0, [pc, #32]	; (3144 <uart_console_init+0x28>)
    3122:	6018      	str	r0, [r3, #0]
    3124:	f004 fa0a 	bl	753c <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    3128:	b138      	cbz	r0, 313a <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    312a:	4807      	ldr	r0, [pc, #28]	; (3148 <uart_console_init+0x2c>)
    312c:	f7ff fe36 	bl	2d9c <__stdout_hook_install>
	__printk_hook_install(console_out);
    3130:	4805      	ldr	r0, [pc, #20]	; (3148 <uart_console_init+0x2c>)
    3132:	f7fd fcff 	bl	b34 <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    3136:	2000      	movs	r0, #0
}
    3138:	bd08      	pop	{r3, pc}
		return -ENODEV;
    313a:	f06f 0012 	mvn.w	r0, #18
    313e:	e7fb      	b.n	3138 <uart_console_init+0x1c>
    3140:	20000910 	.word	0x20000910
    3144:	000078bc 	.word	0x000078bc
    3148:	0000314d 	.word	0x0000314d

0000314c <console_out>:
	if ('\n' == c) {
    314c:	280a      	cmp	r0, #10
{
    314e:	b538      	push	{r3, r4, r5, lr}
    3150:	4d07      	ldr	r5, [pc, #28]	; (3170 <console_out+0x24>)
    3152:	4604      	mov	r4, r0
	if ('\n' == c) {
    3154:	d104      	bne.n	3160 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    3156:	6828      	ldr	r0, [r5, #0]
    3158:	6883      	ldr	r3, [r0, #8]
    315a:	210d      	movs	r1, #13
    315c:	685b      	ldr	r3, [r3, #4]
    315e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    3160:	6828      	ldr	r0, [r5, #0]
    3162:	6883      	ldr	r3, [r0, #8]
    3164:	b2e1      	uxtb	r1, r4
    3166:	685b      	ldr	r3, [r3, #4]
    3168:	4798      	blx	r3
}
    316a:	4620      	mov	r0, r4
    316c:	bd38      	pop	{r3, r4, r5, pc}
    316e:	bf00      	nop
    3170:	20000910 	.word	0x20000910

00003174 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3174:	b530      	push	{r4, r5, lr}
	return port->config;
    3176:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3178:	7b04      	ldrb	r4, [r0, #12]
    317a:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    317e:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3182:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    3186:	b085      	sub	sp, #20
    3188:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    318c:	d104      	bne.n	3198 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    318e:	4628      	mov	r0, r5
    3190:	f001 fdde 	bl	4d50 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    3194:	2000      	movs	r0, #0
    3196:	e02e      	b.n	31f6 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3198:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    319c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    31a0:	d12b      	bne.n	31fa <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    31a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    31a6:	bf0c      	ite	eq
    31a8:	2304      	moveq	r3, #4
    31aa:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    31ac:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    31b0:	6883      	ldr	r3, [r0, #8]
    31b2:	fa23 f101 	lsr.w	r1, r3, r1
    31b6:	07c9      	lsls	r1, r1, #31
    31b8:	d42b      	bmi.n	3212 <gpio_nrfx_pin_interrupt_configure+0x9e>
    31ba:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    31be:	d128      	bne.n	3212 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    31c0:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    31c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    31c8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    31cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    31d0:	07db      	lsls	r3, r3, #31
    31d2:	d41e      	bmi.n	3212 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    31d4:	f10d 0407 	add.w	r4, sp, #7
    31d8:	4621      	mov	r1, r4
    31da:	4628      	mov	r0, r5
    31dc:	f001 fd20 	bl	4c20 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    31e0:	4b14      	ldr	r3, [pc, #80]	; (3234 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    31e2:	4298      	cmp	r0, r3
    31e4:	d114      	bne.n	3210 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    31e6:	4620      	mov	r0, r4
    31e8:	f001 fd68 	bl	4cbc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    31ec:	4b12      	ldr	r3, [pc, #72]	; (3238 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    31ee:	4298      	cmp	r0, r3
    31f0:	d00e      	beq.n	3210 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    31f2:	f06f 000b 	mvn.w	r0, #11
}
    31f6:	b005      	add	sp, #20
    31f8:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    31fa:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    31fe:	d005      	beq.n	320c <gpio_nrfx_pin_interrupt_configure+0x98>
    3200:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3204:	bf0c      	ite	eq
    3206:	2302      	moveq	r3, #2
    3208:	2301      	movne	r3, #1
    320a:	e7cf      	b.n	31ac <gpio_nrfx_pin_interrupt_configure+0x38>
    320c:	2303      	movs	r3, #3
    320e:	e7cd      	b.n	31ac <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3210:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3212:	2300      	movs	r3, #0
    3214:	4619      	mov	r1, r3
    3216:	aa02      	add	r2, sp, #8
    3218:	4628      	mov	r0, r5
    321a:	f001 fbd9 	bl	49d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    321e:	4b06      	ldr	r3, [pc, #24]	; (3238 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3220:	4298      	cmp	r0, r3
    3222:	d104      	bne.n	322e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3224:	2101      	movs	r1, #1
    3226:	4628      	mov	r0, r5
    3228:	f001 fd4e 	bl	4cc8 <nrfx_gpiote_trigger_enable>
    322c:	e7b2      	b.n	3194 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    322e:	f06f 0004 	mvn.w	r0, #4
    3232:	e7e0      	b.n	31f6 <gpio_nrfx_pin_interrupt_configure+0x82>
    3234:	0bad0004 	.word	0x0bad0004
    3238:	0bad0000 	.word	0x0bad0000

0000323c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    323c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    323e:	f001 fd2d 	bl	4c9c <nrfx_gpiote_is_init>
    3242:	4604      	mov	r4, r0
    3244:	b968      	cbnz	r0, 3262 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3246:	f001 fd01 	bl	4c4c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    324a:	4b08      	ldr	r3, [pc, #32]	; (326c <gpio_nrfx_init+0x30>)
    324c:	4298      	cmp	r0, r3
    324e:	d10a      	bne.n	3266 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3250:	4807      	ldr	r0, [pc, #28]	; (3270 <gpio_nrfx_init+0x34>)
    3252:	4621      	mov	r1, r4
    3254:	f001 fcde 	bl	4c14 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3258:	4622      	mov	r2, r4
    325a:	2105      	movs	r1, #5
    325c:	2006      	movs	r0, #6
    325e:	f7ff f83b 	bl	22d8 <z_arm_irq_priority_set>
		return 0;
    3262:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3264:	bd10      	pop	{r4, pc}
		return -EIO;
    3266:	f06f 0004 	mvn.w	r0, #4
    326a:	e7fb      	b.n	3264 <gpio_nrfx_init+0x28>
    326c:	0bad0000 	.word	0x0bad0000
    3270:	00003275 	.word	0x00003275

00003274 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3274:	0943      	lsrs	r3, r0, #5
{
    3276:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3278:	d110      	bne.n	329c <nrfx_gpio_handler+0x28>
	return list->head;
    327a:	4b09      	ldr	r3, [pc, #36]	; (32a0 <nrfx_gpio_handler+0x2c>)
    327c:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    327e:	b169      	cbz	r1, 329c <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    3280:	2501      	movs	r5, #1
	return node->next;
    3282:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3284:	4e07      	ldr	r6, [pc, #28]	; (32a4 <nrfx_gpio_handler+0x30>)
    3286:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    3288:	688a      	ldr	r2, [r1, #8]
    328a:	402a      	ands	r2, r5
    328c:	d002      	beq.n	3294 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    328e:	684b      	ldr	r3, [r1, #4]
    3290:	4630      	mov	r0, r6
    3292:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3294:	b114      	cbz	r4, 329c <nrfx_gpio_handler+0x28>
    3296:	4621      	mov	r1, r4
    3298:	6824      	ldr	r4, [r4, #0]
    329a:	e7f5      	b.n	3288 <nrfx_gpio_handler+0x14>
}
    329c:	bd70      	pop	{r4, r5, r6, pc}
    329e:	bf00      	nop
    32a0:	20000914 	.word	0x20000914
    32a4:	000078a4 	.word	0x000078a4

000032a8 <gpio_nrfx_pin_configure>:
{
    32a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    32ac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    32ae:	7b3b      	ldrb	r3, [r7, #12]
    32b0:	f001 051f 	and.w	r5, r1, #31
{
    32b4:	b085      	sub	sp, #20
    32b6:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    32b8:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    32bc:	4614      	mov	r4, r2
    32be:	b9ca      	cbnz	r2, 32f4 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    32c0:	a902      	add	r1, sp, #8
    32c2:	4628      	mov	r0, r5
    32c4:	f001 fcac 	bl	4c20 <nrfx_gpiote_channel_get>
    32c8:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    32ca:	4628      	mov	r0, r5
    32cc:	f001 fd68 	bl	4da0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    32d0:	4b4a      	ldr	r3, [pc, #296]	; (33fc <gpio_nrfx_pin_configure+0x154>)
    32d2:	4298      	cmp	r0, r3
    32d4:	d004      	beq.n	32e0 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    32d6:	f06f 0004 	mvn.w	r0, #4
}
    32da:	b005      	add	sp, #20
    32dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    32e0:	4284      	cmp	r4, r0
    32e2:	d105      	bne.n	32f0 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    32e4:	f89d 0008 	ldrb.w	r0, [sp, #8]
    32e8:	f001 fce2 	bl	4cb0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    32ec:	42a0      	cmp	r0, r4
    32ee:	d1f2      	bne.n	32d6 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    32f0:	2000      	movs	r0, #0
    32f2:	e7f2      	b.n	32da <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    32f4:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    32f8:	f10d 0103 	add.w	r1, sp, #3
    32fc:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    32fe:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3302:	f001 fc8d 	bl	4c20 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3306:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3308:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    330a:	aa02      	add	r2, sp, #8
    330c:	4649      	mov	r1, r9
    330e:	4628      	mov	r0, r5
    3310:	f001 fb5e 	bl	49d0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3314:	4b39      	ldr	r3, [pc, #228]	; (33fc <gpio_nrfx_pin_configure+0x154>)
    3316:	4298      	cmp	r0, r3
    3318:	d002      	beq.n	3320 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    331a:	f06f 0015 	mvn.w	r0, #21
    331e:	e7dc      	b.n	32da <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3320:	4580      	cmp	r8, r0
    3322:	d103      	bne.n	332c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3324:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3328:	f001 fcc2 	bl	4cb0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    332c:	03a3      	lsls	r3, r4, #14
    332e:	d551      	bpl.n	33d4 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3330:	f240 6306 	movw	r3, #1542	; 0x606
    3334:	4023      	ands	r3, r4
    3336:	f240 2206 	movw	r2, #518	; 0x206
    333a:	4293      	cmp	r3, r2
    333c:	d03b      	beq.n	33b6 <gpio_nrfx_pin_configure+0x10e>
    333e:	d80c      	bhi.n	335a <gpio_nrfx_pin_configure+0xb2>
    3340:	2b06      	cmp	r3, #6
    3342:	d015      	beq.n	3370 <gpio_nrfx_pin_configure+0xc8>
    3344:	d804      	bhi.n	3350 <gpio_nrfx_pin_configure+0xa8>
    3346:	b19b      	cbz	r3, 3370 <gpio_nrfx_pin_configure+0xc8>
    3348:	2b02      	cmp	r3, #2
    334a:	d1e6      	bne.n	331a <gpio_nrfx_pin_configure+0x72>
    334c:	2304      	movs	r3, #4
    334e:	e00f      	b.n	3370 <gpio_nrfx_pin_configure+0xc8>
    3350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3354:	d1e1      	bne.n	331a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3356:	2301      	movs	r3, #1
    3358:	e00a      	b.n	3370 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    335a:	f240 4202 	movw	r2, #1026	; 0x402
    335e:	4293      	cmp	r3, r2
    3360:	d02b      	beq.n	33ba <gpio_nrfx_pin_configure+0x112>
    3362:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    3366:	d02a      	beq.n	33be <gpio_nrfx_pin_configure+0x116>
    3368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    336c:	d1d5      	bne.n	331a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    336e:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3370:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3374:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3378:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    337c:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    337e:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3382:	bf54      	ite	pl
    3384:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3388:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    338a:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    338c:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3390:	d517      	bpl.n	33c2 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3392:	687b      	ldr	r3, [r7, #4]
    3394:	2101      	movs	r1, #1
    3396:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    339a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    339e:	2200      	movs	r2, #0
    33a0:	a901      	add	r1, sp, #4
    33a2:	4628      	mov	r0, r5
    33a4:	f001 fbbe 	bl	4b24 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    33a8:	4b14      	ldr	r3, [pc, #80]	; (33fc <gpio_nrfx_pin_configure+0x154>)
    33aa:	4298      	cmp	r0, r3
    33ac:	bf14      	ite	ne
    33ae:	f06f 0015 	mvnne.w	r0, #21
    33b2:	2000      	moveq	r0, #0
    33b4:	e791      	b.n	32da <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    33b6:	2307      	movs	r3, #7
    33b8:	e7da      	b.n	3370 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    33ba:	2305      	movs	r3, #5
    33bc:	e7d8      	b.n	3370 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    33be:	2303      	movs	r3, #3
    33c0:	e7d6      	b.n	3370 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    33c2:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    33c4:	bf41      	itttt	mi
    33c6:	687b      	ldrmi	r3, [r7, #4]
    33c8:	2101      	movmi	r1, #1
    33ca:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    33ce:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    33d2:	e7e4      	b.n	339e <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    33d4:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    33d6:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    33da:	bf54      	ite	pl
    33dc:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    33e0:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    33e2:	461a      	mov	r2, r3
    33e4:	a901      	add	r1, sp, #4
    33e6:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    33e8:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    33ec:	f001 faf0 	bl	49d0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    33f0:	4b02      	ldr	r3, [pc, #8]	; (33fc <gpio_nrfx_pin_configure+0x154>)
    33f2:	4298      	cmp	r0, r3
    33f4:	f43f af7c 	beq.w	32f0 <gpio_nrfx_pin_configure+0x48>
    33f8:	e78f      	b.n	331a <gpio_nrfx_pin_configure+0x72>
    33fa:	bf00      	nop
    33fc:	0bad0000 	.word	0x0bad0000

00003400 <as5048a_channel_get.part.0>:
    }

    return 0;
}

static int as5048a_channel_get(const struct device *dev,
    3400:	b580      	push	{r7, lr}
    3402:	af00      	add	r7, sp, #0
    struct as5048a_data *data = (struct as5048a_data *)dev->data;
    if(chan == SENSOR_CHAN_ROTATION){
        val->val1 = data->angle_raw;
    }
    else{
        LOG_DBG("Channel not supported\r\n");
    3404:	b088      	sub	sp, #32
    3406:	466a      	mov	r2, sp
    3408:	4b08      	ldr	r3, [pc, #32]	; (342c <as5048a_channel_get.part.0+0x2c>)
    340a:	6153      	str	r3, [r2, #20]
    340c:	4b08      	ldr	r3, [pc, #32]	; (3430 <as5048a_channel_get.part.0+0x30>)
    340e:	6193      	str	r3, [r2, #24]
    3410:	2303      	movs	r3, #3
    3412:	f842 3f10 	str.w	r3, [r2, #16]!
    3416:	4807      	ldr	r0, [pc, #28]	; (3434 <as5048a_channel_get.part.0+0x34>)
    3418:	2300      	movs	r3, #0
    341a:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    341e:	f003 fc5f 	bl	6ce0 <z_impl_z_log_msg2_static_create>
        return -EINVAL;
    }
    return 0;
}
    3422:	f06f 0015 	mvn.w	r0, #21
    3426:	46bd      	mov	sp, r7
    3428:	bd80      	pop	{r7, pc}
    342a:	bf00      	nop
    342c:	000083c1 	.word	0x000083c1
    3430:	0000843c 	.word	0x0000843c
    3434:	00007a6c 	.word	0x00007a6c

00003438 <as5048a_init>:

static int as5048a_init(const struct device *dev)
{
    3438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    struct as5048a_data *data = dev->data;
    343c:	f8d0 8010 	ldr.w	r8, [r0, #16]

    int ret = 0;

    ret = as5048a_bus_check(dev);
    3440:	4e20      	ldr	r6, [pc, #128]	; (34c4 <as5048a_init+0x8c>)
{
    3442:	4605      	mov	r5, r0
    3444:	6840      	ldr	r0, [r0, #4]
    return cfg->bus_io->check(&cfg->spi);
    3446:	69c3      	ldr	r3, [r0, #28]
{
    3448:	af00      	add	r7, sp, #0
    return cfg->bus_io->check(&cfg->spi);
    344a:	681b      	ldr	r3, [r3, #0]
    344c:	4798      	blx	r3
    if(!ret){
    344e:	4604      	mov	r4, r0
    3450:	b998      	cbnz	r0, 347a <as5048a_init+0x42>
        LOG_DBG("Bus check FAIL:\r\n");
    3452:	466d      	mov	r5, sp
    3454:	4b1c      	ldr	r3, [pc, #112]	; (34c8 <as5048a_init+0x90>)
    3456:	b088      	sub	sp, #32
    3458:	466a      	mov	r2, sp
        return ret;
    }

    ret = as5048a_reg_read(dev, AS5048_REG_CLEAR_ERR_FLAG, &data->error_reg);
    if(ret){
        LOG_DBG("err check FAIL:\r\n");
    345a:	e9c2 3605 	strd	r3, r6, [r2, #20]
    345e:	2303      	movs	r3, #3
    3460:	f842 3f10 	str.w	r3, [r2, #16]!
    3464:	2300      	movs	r3, #0
    3466:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    346a:	4818      	ldr	r0, [pc, #96]	; (34cc <as5048a_init+0x94>)
    346c:	f003 fc38 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    data->angle_raw = 0;
    data->magnitude_raw = 0;

    LOG_DBG("%s Init ok\r\n", dev->name);
    return 0;
}                                 
    3470:	4620      	mov	r0, r4
    3472:	46ad      	mov	sp, r5
    3474:	46bd      	mov	sp, r7
    3476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = as5048a_reg_read(dev, AS5048_REG_CLEAR_ERR_FLAG, &data->error_reg);
    347a:	6868      	ldr	r0, [r5, #4]
	return cfg->bus_io->read(&cfg->spi, addr, buf);
    347c:	69c3      	ldr	r3, [r0, #28]
    347e:	f108 0204 	add.w	r2, r8, #4
    3482:	685b      	ldr	r3, [r3, #4]
    3484:	2101      	movs	r1, #1
    3486:	4798      	blx	r3
    if(ret){
    3488:	4604      	mov	r4, r0
    348a:	b120      	cbz	r0, 3496 <as5048a_init+0x5e>
        LOG_DBG("err check FAIL:\r\n");
    348c:	466d      	mov	r5, sp
    348e:	b088      	sub	sp, #32
    3490:	4b0f      	ldr	r3, [pc, #60]	; (34d0 <as5048a_init+0x98>)
    3492:	466a      	mov	r2, sp
    3494:	e7e1      	b.n	345a <as5048a_init+0x22>
    LOG_DBG("%s Init ok\r\n", dev->name);
    3496:	682b      	ldr	r3, [r5, #0]
    data->angle_raw = 0;
    3498:	f8a8 0000 	strh.w	r0, [r8]
    LOG_DBG("%s Init ok\r\n", dev->name);
    349c:	466d      	mov	r5, sp
    349e:	b08a      	sub	sp, #40	; 0x28
    34a0:	466a      	mov	r2, sp
    data->magnitude_raw = 0;
    34a2:	f8a8 0002 	strh.w	r0, [r8, #2]
    LOG_DBG("%s Init ok\r\n", dev->name);
    34a6:	490b      	ldr	r1, [pc, #44]	; (34d4 <as5048a_init+0x9c>)
    34a8:	61d3      	str	r3, [r2, #28]
    34aa:	2303      	movs	r3, #3
    34ac:	f882 3020 	strb.w	r3, [r2, #32]
    34b0:	4b09      	ldr	r3, [pc, #36]	; (34d8 <as5048a_init+0xa0>)
    34b2:	e9c2 1605 	strd	r1, r6, [r2, #20]
    34b6:	f842 3f10 	str.w	r3, [r2, #16]!
    34ba:	f44f 510c 	mov.w	r1, #8960	; 0x2300
    34be:	4603      	mov	r3, r0
    34c0:	e7d3      	b.n	346a <as5048a_init+0x32>
    34c2:	bf00      	nop
    34c4:	0000842f 	.word	0x0000842f
    34c8:	000083dd 	.word	0x000083dd
    34cc:	00007a6c 	.word	0x00007a6c
    34d0:	000083f3 	.word	0x000083f3
    34d4:	00008409 	.word	0x00008409
    34d8:	01000004 	.word	0x01000004

000034dc <as5048_transfer>:
	}
	return cnt & 0x1;    
}

static int as5048_transfer(const struct spi_dt_spec *bus, uint8_t op, uint16_t tx_val, uint16_t *rx_val)
{
    34dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    34de:	b08d      	sub	sp, #52	; 0x34
    34e0:	af00      	add	r7, sp, #0
	uint16_t tx_data = tx_val;
    tx_data |= (op << 14); // R/W 
    34e2:	ea42 3281 	orr.w	r2, r2, r1, lsl #14
{
    34e6:	607b      	str	r3, [r7, #4]
    tx_data |= (op << 14); // R/W 
    34e8:	2510      	movs	r5, #16
    34ea:	b213      	sxth	r3, r2
	uint8_t cnt = 0;
    34ec:	2400      	movs	r4, #0
    tx_data |= (op << 14); // R/W 
    34ee:	b292      	uxth	r2, r2
		if (value & 0x1)
    34f0:	07d1      	lsls	r1, r2, #31
			cnt++;
    34f2:	bf48      	it	mi
    34f4:	3401      	addmi	r4, #1
	for (uint8_t i = 0; i < 16; i++)
    34f6:	f105 35ff 	add.w	r5, r5, #4294967295
			cnt++;
    34fa:	bf48      	it	mi
    34fc:	b2e4      	uxtbmi	r4, r4
	for (uint8_t i = 0; i < 16; i++)
    34fe:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		value >>= 1;
    3502:	ea4f 0252 	mov.w	r2, r2, lsr #1
	for (uint8_t i = 0; i < 16; i++)
    3506:	d1f3      	bne.n	34f0 <as5048_transfer+0x14>
    tx_data |= (calculate_even_parity(tx_data) << 15); // Parity bit(MSB)
    3508:	f004 0401 	and.w	r4, r4, #1
    350c:	ea43 34c4 	orr.w	r4, r3, r4, lsl #15
	const struct spi_buf tx_buf = {
    3510:	f107 030e 	add.w	r3, r7, #14
		.buf = &tx_data,
		.len = 1
	};
	const struct spi_buf_set tx = {
    3514:	f107 0210 	add.w	r2, r7, #16
	const struct spi_buf tx_buf = {
    3518:	613b      	str	r3, [r7, #16]
    351a:	2301      	movs	r3, #1
	const struct spi_buf_set tx = {
    351c:	e9c7 2306 	strd	r2, r3, [r7, #24]
 */
static inline int spi_transceive_dt(const struct spi_dt_spec *spec,
				    const struct spi_buf_set *tx_bufs,
				    const struct spi_buf_set *rx_bufs)
{
	return spi_transceive(spec->bus, &spec->config, tx_bufs, rx_bufs);
    3520:	4601      	mov	r1, r0
		.buffers = &tx_buf,
		.count = 1
	};
	const struct spi_buf rx_buf = {
    3522:	1d3a      	adds	r2, r7, #4
    3524:	e9c7 2308 	strd	r2, r3, [r7, #32]
        .buf = &rx_val,
        .len = 1
    };
	const struct spi_buf_set rx = {
    3528:	f107 0220 	add.w	r2, r7, #32
    352c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    3530:	f851 0b04 	ldr.w	r0, [r1], #4
    tx_data |= (calculate_even_parity(tx_data) << 15); // Parity bit(MSB)
    3534:	81fc      	strh	r4, [r7, #14]
	const struct spi_buf tx_buf = {
    3536:	617b      	str	r3, [r7, #20]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    3538:	6883      	ldr	r3, [r0, #8]
    353a:	f107 0218 	add.w	r2, r7, #24
    353e:	681c      	ldr	r4, [r3, #0]
    3540:	f107 0328 	add.w	r3, r7, #40	; 0x28
    3544:	47a0      	blx	r4
		.buffers = &rx_buf,
		.count = 1
	};

	int ret = spi_transceive_dt(bus, &tx, &rx);
	if (ret) {
    3546:	4604      	mov	r4, r0
    3548:	b188      	cbz	r0, 356e <as5048_transfer+0x92>
		LOG_DBG("spi_transceive FAIL %d\r\n", ret);
    354a:	466e      	mov	r6, sp
    354c:	b088      	sub	sp, #32
    354e:	466a      	mov	r2, sp
    3550:	4b09      	ldr	r3, [pc, #36]	; (3578 <as5048_transfer+0x9c>)
    3552:	6153      	str	r3, [r2, #20]
    3554:	4b09      	ldr	r3, [pc, #36]	; (357c <as5048_transfer+0xa0>)
    3556:	e9c2 3006 	strd	r3, r0, [r2, #24]
    355a:	2304      	movs	r3, #4
    355c:	f842 3f10 	str.w	r3, [r2, #16]!
    3560:	4807      	ldr	r0, [pc, #28]	; (3580 <as5048_transfer+0xa4>)
    3562:	462b      	mov	r3, r5
    3564:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    3568:	f003 fbba 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    356c:	46b5      	mov	sp, r6
		return ret;
	}

	return 0;    
}
    356e:	4620      	mov	r0, r4
    3570:	3734      	adds	r7, #52	; 0x34
    3572:	46bd      	mov	sp, r7
    3574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3576:	bf00      	nop
    3578:	00008450 	.word	0x00008450
    357c:	000084f9 	.word	0x000084f9
    3580:	00007a6c 	.word	0x00007a6c

00003584 <as5048_reg_write_spi>:
    return 0;
}

static int as5048_reg_write_spi(const struct spi_dt_spec *bus,
				uint16_t reg, uint16_t val)
{
    3584:	b5f0      	push	{r4, r5, r6, r7, lr}
    int ret = as5048_transfer(bus, AS5048_WRITE, reg, NULL);
    3586:	2300      	movs	r3, #0
{
    3588:	b083      	sub	sp, #12
    358a:	4615      	mov	r5, r2
    358c:	af00      	add	r7, sp, #0
    int ret = as5048_transfer(bus, AS5048_WRITE, reg, NULL);
    358e:	460a      	mov	r2, r1
    3590:	4619      	mov	r1, r3
{
    3592:	4606      	mov	r6, r0
    int ret = as5048_transfer(bus, AS5048_WRITE, reg, NULL);
    3594:	f7ff ffa2 	bl	34dc <as5048_transfer>
    if(ret){
    3598:	4604      	mov	r4, r0
    359a:	b1a8      	cbz	r0, 35c8 <as5048_reg_write_spi+0x44>
        LOG_DBG("write reg FAIL %d\r\n", ret);
    359c:	466d      	mov	r5, sp
    359e:	4b26      	ldr	r3, [pc, #152]	; (3638 <as5048_reg_write_spi+0xb4>)
    35a0:	b088      	sub	sp, #32
    35a2:	466a      	mov	r2, sp
        return ret;
    }

    ret = as5048_transfer(bus, AS5048_WRITE, val, NULL);
    if(ret){
        LOG_DBG("write val FAIL %d\r\n", ret);
    35a4:	6153      	str	r3, [r2, #20]
    35a6:	4b25      	ldr	r3, [pc, #148]	; (363c <as5048_reg_write_spi+0xb8>)
    35a8:	e9c2 3406 	strd	r3, r4, [r2, #24]
    35ac:	2304      	movs	r3, #4
    35ae:	f842 3f10 	str.w	r3, [r2, #16]!
    35b2:	4823      	ldr	r0, [pc, #140]	; (3640 <as5048_reg_write_spi+0xbc>)
    35b4:	2300      	movs	r3, #0
    35b6:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    35ba:	f003 fb91 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    35be:	46ad      	mov	sp, r5
        LOG_DBG("write confirm FAIL %d\r\n", -ENODATA);
        return -EPROTO;
    }

	return 0;
}
    35c0:	4620      	mov	r0, r4
    35c2:	370c      	adds	r7, #12
    35c4:	46bd      	mov	sp, r7
    35c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = as5048_transfer(bus, AS5048_WRITE, val, NULL);
    35c8:	4603      	mov	r3, r0
    35ca:	4601      	mov	r1, r0
    35cc:	462a      	mov	r2, r5
    35ce:	4630      	mov	r0, r6
    35d0:	f7ff ff84 	bl	34dc <as5048_transfer>
    if(ret){
    35d4:	4604      	mov	r4, r0
    35d6:	b120      	cbz	r0, 35e2 <as5048_reg_write_spi+0x5e>
        LOG_DBG("write val FAIL %d\r\n", ret);
    35d8:	466d      	mov	r5, sp
    35da:	b088      	sub	sp, #32
    35dc:	4b19      	ldr	r3, [pc, #100]	; (3644 <as5048_reg_write_spi+0xc0>)
    35de:	466a      	mov	r2, sp
    35e0:	e7e0      	b.n	35a4 <as5048_reg_write_spi+0x20>
    uint16_t rx_data = 0xffff;
    35e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    35e6:	80fb      	strh	r3, [r7, #6]
    ret = as5048_transfer(bus, AS5048_WRITE, AS5048_REG_NOP, &rx_data);
    35e8:	4602      	mov	r2, r0
    35ea:	4601      	mov	r1, r0
    35ec:	1dbb      	adds	r3, r7, #6
    35ee:	4630      	mov	r0, r6
    35f0:	f7ff ff74 	bl	34dc <as5048_transfer>
    if(ret){
    35f4:	4604      	mov	r4, r0
    35f6:	b120      	cbz	r0, 3602 <as5048_reg_write_spi+0x7e>
        LOG_DBG("write confirm FAIL %d\r\n", ret);
    35f8:	466d      	mov	r5, sp
    35fa:	b088      	sub	sp, #32
    35fc:	4b12      	ldr	r3, [pc, #72]	; (3648 <as5048_reg_write_spi+0xc4>)
    35fe:	466a      	mov	r2, sp
    3600:	e7d0      	b.n	35a4 <as5048_reg_write_spi+0x20>
    if(rx_data != val){
    3602:	88fb      	ldrh	r3, [r7, #6]
    3604:	42ab      	cmp	r3, r5
    3606:	d0db      	beq.n	35c0 <as5048_reg_write_spi+0x3c>
        LOG_DBG("write confirm FAIL %d\r\n", -ENODATA);
    3608:	466d      	mov	r5, sp
    360a:	b088      	sub	sp, #32
    360c:	466a      	mov	r2, sp
    360e:	4b0e      	ldr	r3, [pc, #56]	; (3648 <as5048_reg_write_spi+0xc4>)
    3610:	6153      	str	r3, [r2, #20]
    3612:	4b0a      	ldr	r3, [pc, #40]	; (363c <as5048_reg_write_spi+0xb8>)
    3614:	6193      	str	r3, [r2, #24]
    3616:	f06f 033c 	mvn.w	r3, #60	; 0x3c
    361a:	61d3      	str	r3, [r2, #28]
    361c:	2304      	movs	r3, #4
    361e:	f842 3f10 	str.w	r3, [r2, #16]!
    3622:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    3626:	4603      	mov	r3, r0
    3628:	4805      	ldr	r0, [pc, #20]	; (3640 <as5048_reg_write_spi+0xbc>)
    362a:	f003 fb59 	bl	6ce0 <z_impl_z_log_msg2_static_create>
        return -EPROTO;
    362e:	f06f 0446 	mvn.w	r4, #70	; 0x46
    3632:	46ad      	mov	sp, r5
    3634:	e7c4      	b.n	35c0 <as5048_reg_write_spi+0x3c>
    3636:	bf00      	nop
    3638:	0000846d 	.word	0x0000846d
    363c:	00008509 	.word	0x00008509
    3640:	00007a6c 	.word	0x00007a6c
    3644:	00008485 	.word	0x00008485
    3648:	0000849d 	.word	0x0000849d

0000364c <as5048_reg_read_spi>:
{
    364c:	b5f0      	push	{r4, r5, r6, r7, lr}
    364e:	b083      	sub	sp, #12
    3650:	af00      	add	r7, sp, #0
    3652:	4615      	mov	r5, r2
    int ret = as5048_transfer(bus, addr, AS5048_READ, &rx_val);
    3654:	1dbb      	adds	r3, r7, #6
    3656:	2201      	movs	r2, #1
    3658:	b2c9      	uxtb	r1, r1
{
    365a:	4606      	mov	r6, r0
    int ret = as5048_transfer(bus, addr, AS5048_READ, &rx_val);
    365c:	f7ff ff3e 	bl	34dc <as5048_transfer>
    if(ret){
    3660:	4604      	mov	r4, r0
    3662:	b1a8      	cbz	r0, 3690 <as5048_reg_read_spi+0x44>
        LOG_DBG("reg read FAIL %d\r\n", ret);
    3664:	466d      	mov	r5, sp
    3666:	b088      	sub	sp, #32
    3668:	466a      	mov	r2, sp
    366a:	4b1b      	ldr	r3, [pc, #108]	; (36d8 <as5048_reg_read_spi+0x8c>)
    366c:	6153      	str	r3, [r2, #20]
    366e:	4b1b      	ldr	r3, [pc, #108]	; (36dc <as5048_reg_read_spi+0x90>)
    3670:	e9c2 3406 	strd	r3, r4, [r2, #24]
    3674:	2304      	movs	r3, #4
    3676:	f842 3f10 	str.w	r3, [r2, #16]!
    367a:	4819      	ldr	r0, [pc, #100]	; (36e0 <as5048_reg_read_spi+0x94>)
    367c:	2300      	movs	r3, #0
    367e:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    3682:	f003 fb2d 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    3686:	46ad      	mov	sp, r5
}
    3688:	4620      	mov	r0, r4
    368a:	370c      	adds	r7, #12
    368c:	46bd      	mov	sp, r7
    368e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret = as5048_transfer(bus, AS5048_REG_NOP, AS5048_WRITE, &rx_val);
    3690:	4602      	mov	r2, r0
    3692:	4601      	mov	r1, r0
    3694:	1dbb      	adds	r3, r7, #6
    3696:	4630      	mov	r0, r6
    3698:	f7ff ff20 	bl	34dc <as5048_transfer>
    if(ret){
    369c:	4604      	mov	r4, r0
    369e:	2800      	cmp	r0, #0
    36a0:	d1e0      	bne.n	3664 <as5048_reg_read_spi+0x18>
    if(AS5048_RX_ERR_CHECK(rx_val)){
    36a2:	88fb      	ldrh	r3, [r7, #6]
    36a4:	045a      	lsls	r2, r3, #17
    36a6:	d513      	bpl.n	36d0 <as5048_reg_read_spi+0x84>
        LOG_DBG("err check FAIL\r\n");
    36a8:	466d      	mov	r5, sp
    36aa:	b088      	sub	sp, #32
    36ac:	466a      	mov	r2, sp
    36ae:	4b0d      	ldr	r3, [pc, #52]	; (36e4 <as5048_reg_read_spi+0x98>)
    36b0:	6153      	str	r3, [r2, #20]
    36b2:	4b0a      	ldr	r3, [pc, #40]	; (36dc <as5048_reg_read_spi+0x90>)
    36b4:	6193      	str	r3, [r2, #24]
    36b6:	2303      	movs	r3, #3
    36b8:	f842 3f10 	str.w	r3, [r2, #16]!
    36bc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    36c0:	4603      	mov	r3, r0
    36c2:	4807      	ldr	r0, [pc, #28]	; (36e0 <as5048_reg_read_spi+0x94>)
    36c4:	f003 fb0c 	bl	6ce0 <z_impl_z_log_msg2_static_create>
        return -EPROTO;
    36c8:	f06f 0446 	mvn.w	r4, #70	; 0x46
    36cc:	46ad      	mov	sp, r5
    36ce:	e7db      	b.n	3688 <as5048_reg_read_spi+0x3c>
    *rx_data = rx_val & 0x3fff;
    36d0:	f3c3 030d 	ubfx	r3, r3, #0, #14
    36d4:	802b      	strh	r3, [r5, #0]
    return 0;
    36d6:	e7d7      	b.n	3688 <as5048_reg_read_spi+0x3c>
    36d8:	000084b9 	.word	0x000084b9
    36dc:	000084e5 	.word	0x000084e5
    36e0:	00007a6c 	.word	0x00007a6c
    36e4:	000084d0 	.word	0x000084d0

000036e8 <spi_context_cs_configure_all>:
	k_sem_give(&ctx->sync);
#endif /* CONFIG_SPI_ASYNC */
}

static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
    36e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    36ec:	6884      	ldr	r4, [r0, #8]
{
    36ee:	af00      	add	r7, sp, #0
    36f0:	4605      	mov	r5, r0
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    36f2:	2601      	movs	r6, #1
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    36f4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    36f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    36fc:	429c      	cmp	r4, r3
    36fe:	d301      	bcc.n	3704 <spi_context_cs_configure_all+0x1c>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    3700:	2000      	movs	r0, #0
    3702:	e01b      	b.n	373c <spi_context_cs_configure_all+0x54>
		if (!device_is_ready(cs_gpio->port)) {
    3704:	6820      	ldr	r0, [r4, #0]
    3706:	f003 ff19 	bl	753c <z_device_is_ready>
    370a:	b9d0      	cbnz	r0, 3742 <spi_context_cs_configure_all+0x5a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    370c:	6823      	ldr	r3, [r4, #0]
    370e:	481e      	ldr	r0, [pc, #120]	; (3788 <spi_context_cs_configure_all+0xa0>)
    3710:	6819      	ldr	r1, [r3, #0]
    3712:	7923      	ldrb	r3, [r4, #4]
    3714:	466c      	mov	r4, sp
    3716:	b08a      	sub	sp, #40	; 0x28
    3718:	466a      	mov	r2, sp
    371a:	e9c2 0105 	strd	r0, r1, [r2, #20]
    371e:	61d3      	str	r3, [r2, #28]
    3720:	2302      	movs	r3, #2
    3722:	f882 3020 	strb.w	r3, [r2, #32]
    3726:	4b19      	ldr	r3, [pc, #100]	; (378c <spi_context_cs_configure_all+0xa4>)
    3728:	4819      	ldr	r0, [pc, #100]	; (3790 <spi_context_cs_configure_all+0xa8>)
    372a:	f842 3f10 	str.w	r3, [r2, #16]!
    372e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    3732:	f003 fc87 	bl	7044 <z_log_msg2_static_create.constprop.0>
			return -ENODEV;
    3736:	f06f 0012 	mvn.w	r0, #18
    373a:	46a5      	mov	sp, r4
}
    373c:	46bd      	mov	sp, r7
    373e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    3742:	6820      	ldr	r0, [r4, #0]
    3744:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    3746:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    3748:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    374c:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3750:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3754:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    3756:	bf54      	ite	pl
    3758:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    375c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3760:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3764:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3768:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    376a:	bf4c      	ite	mi
    376c:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3770:	ea2c 0308 	bicpl.w	r3, ip, r8
    3774:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    3778:	f8d9 3000 	ldr.w	r3, [r9]
    377c:	4798      	blx	r3
		if (ret < 0) {
    377e:	2800      	cmp	r0, #0
    3780:	dbdc      	blt.n	373c <spi_context_cs_configure_all+0x54>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3782:	3408      	adds	r4, #8
    3784:	e7b6      	b.n	36f4 <spi_context_cs_configure_all+0xc>
    3786:	bf00      	nop
    3788:	0000851e 	.word	0x0000851e
    378c:	01000004 	.word	0x01000004
    3790:	00007ab4 	.word	0x00007ab4

00003794 <transfer_next_chunk>:

	return 0;
}

static void transfer_next_chunk(const struct device *dev)
{
    3794:	b530      	push	{r4, r5, lr}
	const struct spi_nrfx_config *dev_config = dev->config;
	struct spi_nrfx_data *dev_data = dev->data;
    3796:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3798:	6caa      	ldr	r2, [r5, #72]	; 0x48
		return ctx->rx_len;
    379a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
{
    379c:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    379e:	b982      	cbnz	r2, 37c2 <transfer_next_chunk+0x2e>
	struct spi_context *ctx = &dev_data->ctx;
	int error = 0;

	size_t chunk_len = spi_context_max_continuous_chunk(ctx);

	if (chunk_len > 0) {
    37a0:	bb73      	cbnz	r3, 3800 <transfer_next_chunk+0x6c>
	int error = 0;
    37a2:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
    37a4:	2200      	movs	r2, #0
    37a6:	4611      	mov	r1, r2
    37a8:	4628      	mov	r0, r5
    37aa:	f003 fc72 	bl	7092 <_spi_context_cs_control>
	ctx->sync_status = status;
    37ae:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    37b0:	f105 0020 	add.w	r0, r5, #32
    37b4:	f002 f900 	bl	59b8 <z_impl_k_sem_give>
	spi_context_cs_control(ctx, false);

	LOG_DBG("Transaction finished with status %d", error);

	spi_context_complete(ctx, error);
	dev_data->busy = false;
    37b8:	2300      	movs	r3, #0
    37ba:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    37be:	b005      	add	sp, #20
    37c0:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
    37c2:	4611      	mov	r1, r2
    37c4:	b113      	cbz	r3, 37cc <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    37c6:	429a      	cmp	r2, r3
    37c8:	bf28      	it	cs
    37ca:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
    37cc:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    37ce:	6840      	ldr	r0, [r0, #4]
		xfer.p_tx_buffer = ctx->tx_buf;
    37d0:	9400      	str	r4, [sp, #0]
		dev_data->chunk_len = chunk_len;
    37d2:	65a9      	str	r1, [r5, #88]	; 0x58
	return !!(ctx->tx_buf && ctx->tx_len);
    37d4:	b1b4      	cbz	r4, 3804 <transfer_next_chunk+0x70>
    37d6:	2a00      	cmp	r2, #0
    37d8:	bf18      	it	ne
    37da:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    37dc:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    37de:	6cea      	ldr	r2, [r5, #76]	; 0x4c
    37e0:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    37e2:	b18a      	cbz	r2, 3808 <transfer_next_chunk+0x74>
    37e4:	2b00      	cmp	r3, #0
    37e6:	bf18      	it	ne
    37e8:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    37ea:	2200      	movs	r2, #0
    37ec:	4669      	mov	r1, sp
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    37ee:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&dev_config->spi, &xfer, 0);
    37f0:	f001 fc9c 	bl	512c <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
    37f4:	4b05      	ldr	r3, [pc, #20]	; (380c <transfer_next_chunk+0x78>)
    37f6:	4298      	cmp	r0, r3
    37f8:	d0e1      	beq.n	37be <transfer_next_chunk+0x2a>
		error = -EIO;
    37fa:	f06f 0404 	mvn.w	r4, #4
    37fe:	e7d1      	b.n	37a4 <transfer_next_chunk+0x10>
    3800:	4619      	mov	r1, r3
    3802:	e7e3      	b.n	37cc <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3804:	4622      	mov	r2, r4
    3806:	e7e9      	b.n	37dc <transfer_next_chunk+0x48>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3808:	4613      	mov	r3, r2
    380a:	e7ee      	b.n	37ea <transfer_next_chunk+0x56>
    380c:	0bad0000 	.word	0x0bad0000

00003810 <event_handler>:

static void event_handler(const nrfx_spi_evt_t *p_event, void *p_context)
{
    3810:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = p_context;

	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    3812:	7803      	ldrb	r3, [r0, #0]
{
    3814:	b086      	sub	sp, #24
    3816:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
    3818:	2b00      	cmp	r3, #0
    381a:	d154      	bne.n	38c6 <event_handler+0xb6>
	if (!ctx->tx_len) {
    381c:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    381e:	b163      	cbz	r3, 383a <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    3820:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    3822:	429a      	cmp	r2, r3
    3824:	d91e      	bls.n	3864 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    3826:	4b29      	ldr	r3, [pc, #164]	; (38cc <event_handler+0xbc>)
    3828:	9305      	str	r3, [sp, #20]
    382a:	4829      	ldr	r0, [pc, #164]	; (38d0 <event_handler+0xc0>)
    382c:	2302      	movs	r3, #2
    382e:	aa04      	add	r2, sp, #16
    3830:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3834:	9304      	str	r3, [sp, #16]
    3836:	f003 fc05 	bl	7044 <z_log_msg2_static_create.constprop.0>
	if (!ctx->rx_len) {
    383a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    383c:	b163      	cbz	r3, 3858 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    383e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    3840:	429a      	cmp	r2, r3
    3842:	d927      	bls.n	3894 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    3844:	4b21      	ldr	r3, [pc, #132]	; (38cc <event_handler+0xbc>)
    3846:	9305      	str	r3, [sp, #20]
    3848:	4821      	ldr	r0, [pc, #132]	; (38d0 <event_handler+0xc0>)
    384a:	2302      	movs	r3, #2
    384c:	aa04      	add	r2, sp, #16
    384e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3852:	9304      	str	r3, [sp, #16]
    3854:	f003 fbf6 	bl	7044 <z_log_msg2_static_create.constprop.0>

		transfer_next_chunk(dev_data->dev);
    3858:	6d60      	ldr	r0, [r4, #84]	; 0x54
	}
}
    385a:	b006      	add	sp, #24
    385c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    3860:	f7ff bf98 	b.w	3794 <transfer_next_chunk>
	ctx->tx_len -= len;
    3864:	1a9b      	subs	r3, r3, r2
    3866:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    3868:	b973      	cbnz	r3, 3888 <event_handler+0x78>
		++ctx->current_tx;
    386a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    386c:	3308      	adds	r3, #8
    386e:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    3870:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    3872:	3b01      	subs	r3, #1
    3874:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    3876:	f101 0248 	add.w	r2, r1, #72	; 0x48
    387a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    387e:	3138      	adds	r1, #56	; 0x38
    3880:	f003 fbcf 	bl	7022 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    3884:	6460      	str	r0, [r4, #68]	; 0x44
    3886:	e7d8      	b.n	383a <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    3888:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    388a:	2b00      	cmp	r3, #0
    388c:	d0d5      	beq.n	383a <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    388e:	4413      	add	r3, r2
    3890:	644b      	str	r3, [r1, #68]	; 0x44
    3892:	e7d2      	b.n	383a <event_handler+0x2a>
	ctx->rx_len -= len;
    3894:	1a9b      	subs	r3, r3, r2
    3896:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    3898:	b97b      	cbnz	r3, 38ba <event_handler+0xaa>
		++ctx->current_rx;
    389a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    389c:	3308      	adds	r3, #8
    389e:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    38a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    38a2:	3b01      	subs	r3, #1
    38a4:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    38a6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    38aa:	f104 0140 	add.w	r1, r4, #64	; 0x40
    38ae:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    38b2:	f003 fbb6 	bl	7022 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    38b6:	64e0      	str	r0, [r4, #76]	; 0x4c
    38b8:	e7ce      	b.n	3858 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    38ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    38bc:	2b00      	cmp	r3, #0
    38be:	d0cb      	beq.n	3858 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    38c0:	4413      	add	r3, r2
    38c2:	64e3      	str	r3, [r4, #76]	; 0x4c
    38c4:	e7c8      	b.n	3858 <event_handler+0x48>
}
    38c6:	b006      	add	sp, #24
    38c8:	bd10      	pop	{r4, pc}
    38ca:	bf00      	nop
    38cc:	00008542 	.word	0x00008542
    38d0:	00007ab4 	.word	0x00007ab4

000038d4 <spi_nrfx_transceive>:

static int spi_nrfx_transceive(const struct device *dev,
			       const struct spi_config *spi_cfg,
			       const struct spi_buf_set *tx_bufs,
			       const struct spi_buf_set *rx_bufs)
{
    38d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38d8:	b08b      	sub	sp, #44	; 0x2c
    38da:	469a      	mov	sl, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    38dc:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    38de:	6904      	ldr	r4, [r0, #16]
{
    38e0:	af00      	add	r7, sp, #0
    38e2:	049b      	lsls	r3, r3, #18
    38e4:	4680      	mov	r8, r0
    38e6:	460e      	mov	r6, r1
    38e8:	60fa      	str	r2, [r7, #12]
    38ea:	d434      	bmi.n	3956 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
    38ec:	f04f 32ff 	mov.w	r2, #4294967295
    38f0:	f04f 33ff 	mov.w	r3, #4294967295
    38f4:	f104 0010 	add.w	r0, r4, #16
    38f8:	f002 f87e 	bl	59f8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    38fc:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    38fe:	f8d8 9010 	ldr.w	r9, [r8, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3902:	f899 305d 	ldrb.w	r3, [r9, #93]	; 0x5d
    3906:	607b      	str	r3, [r7, #4]
    3908:	b123      	cbz	r3, 3914 <spi_nrfx_transceive+0x40>
    390a:	f8d9 3000 	ldr.w	r3, [r9]
    390e:	429e      	cmp	r6, r3
    3910:	f000 80cc 	beq.w	3aac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x14>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    3914:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    3918:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    391c:	d022      	beq.n	3964 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
    391e:	4b99      	ldr	r3, [pc, #612]	; (3b84 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xec>)
    3920:	627b      	str	r3, [r7, #36]	; 0x24
    3922:	4899      	ldr	r0, [pc, #612]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3924:	2302      	movs	r3, #2
    3926:	f107 0220 	add.w	r2, r7, #32
    392a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    392e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    3932:	623b      	str	r3, [r7, #32]
    3934:	f003 fb86 	bl	7044 <z_log_msg2_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    3938:	6823      	ldr	r3, [r4, #0]
    393a:	889b      	ldrh	r3, [r3, #4]
    393c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    3940:	d104      	bne.n	394c <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    3942:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    3944:	f104 0010 	add.w	r0, r4, #16
    3948:	f002 f836 	bl	59b8 <z_impl_k_sem_give>
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL);
}
    394c:	4628      	mov	r0, r5
    394e:	372c      	adds	r7, #44	; 0x2c
    3950:	46bd      	mov	sp, r7
    3952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3956:	69a3      	ldr	r3, [r4, #24]
    3958:	2b00      	cmp	r3, #0
    395a:	d1c7      	bne.n	38ec <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    395c:	6863      	ldr	r3, [r4, #4]
    395e:	4299      	cmp	r1, r3
    3960:	d1c4      	bne.n	38ec <spi_nrfx_transceive+0x18>
    3962:	e7cc      	b.n	38fe <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    3964:	f01c 0f01 	tst.w	ip, #1
    3968:	d015      	beq.n	3996 <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    396a:	f8d8 3000 	ldr.w	r3, [r8]
    396e:	4987      	ldr	r1, [pc, #540]	; (3b8c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf4>)
    3970:	4885      	ldr	r0, [pc, #532]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3972:	466d      	mov	r5, sp
    3974:	b088      	sub	sp, #32
    3976:	466a      	mov	r2, sp
    3978:	e9c2 1305 	strd	r1, r3, [r2, #20]
    397c:	2302      	movs	r3, #2
    397e:	7713      	strb	r3, [r2, #28]
    3980:	4b83      	ldr	r3, [pc, #524]	; (3b90 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf8>)
    3982:	f842 3f10 	str.w	r3, [r2, #16]!
    3986:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    398a:	f003 fb5b 	bl	7044 <z_log_msg2_static_create.constprop.0>
    398e:	46ad      	mov	sp, r5
		return -EINVAL;
    3990:	f06f 0515 	mvn.w	r5, #21
    3994:	e7d0      	b.n	3938 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3996:	f01c 0f08 	tst.w	ip, #8
    399a:	d00b      	beq.n	39b4 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
    399c:	4b7d      	ldr	r3, [pc, #500]	; (3b94 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xfc>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    399e:	627b      	str	r3, [r7, #36]	; 0x24
    39a0:	4879      	ldr	r0, [pc, #484]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    39a2:	2302      	movs	r3, #2
    39a4:	f107 0220 	add.w	r2, r7, #32
    39a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    39ac:	623b      	str	r3, [r7, #32]
    39ae:	f003 fb49 	bl	7044 <z_log_msg2_static_create.constprop.0>
    39b2:	e7ed      	b.n	3990 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    39b4:	f3cc 1345 	ubfx	r3, ip, #5, #6
    39b8:	2b08      	cmp	r3, #8
    39ba:	d001      	beq.n	39c0 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    39bc:	4b76      	ldr	r3, [pc, #472]	; (3b98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x100>)
    39be:	e7ee      	b.n	399e <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
    39c0:	6835      	ldr	r5, [r6, #0]
    39c2:	4b76      	ldr	r3, [pc, #472]	; (3b9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x104>)
    39c4:	429d      	cmp	r5, r3
    39c6:	d801      	bhi.n	39cc <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    39c8:	4b75      	ldr	r3, [pc, #468]	; (3ba0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x108>)
    39ca:	e7e8      	b.n	399e <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
    39cc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    39d0:	60bb      	str	r3, [r7, #8]
	config = dev_config->def_config;
    39d2:	f103 0b08 	add.w	fp, r3, #8
    39d6:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    39da:	f107 0e10 	add.w	lr, r7, #16
    39de:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    39e2:	f8db 3000 	ldr.w	r3, [fp]
    39e6:	f8ce 3000 	str.w	r3, [lr]
	if (frequency < 250000) {
    39ea:	4b6e      	ldr	r3, [pc, #440]	; (3ba4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10c>)
    39ec:	429d      	cmp	r5, r3
    39ee:	d945      	bls.n	3a7c <spi_nrfx_transceive+0x1a8>
	} else if (frequency < 500000) {
    39f0:	4b6d      	ldr	r3, [pc, #436]	; (3ba8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x110>)
    39f2:	429d      	cmp	r5, r3
    39f4:	d945      	bls.n	3a82 <spi_nrfx_transceive+0x1ae>
	} else if (frequency < 1000000) {
    39f6:	4b6d      	ldr	r3, [pc, #436]	; (3bac <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x114>)
    39f8:	429d      	cmp	r5, r3
    39fa:	d945      	bls.n	3a88 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 2000000) {
    39fc:	4b6c      	ldr	r3, [pc, #432]	; (3bb0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x118>)
    39fe:	429d      	cmp	r5, r3
    3a00:	d945      	bls.n	3a8e <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 4000000) {
    3a02:	4b6c      	ldr	r3, [pc, #432]	; (3bb4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x11c>)
    3a04:	429d      	cmp	r5, r3
    3a06:	d945      	bls.n	3a94 <spi_nrfx_transceive+0x1c0>
		return NRF_SPI_FREQ_8M;
    3a08:	4b6b      	ldr	r3, [pc, #428]	; (3bb8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x120>)
    3a0a:	429d      	cmp	r5, r3
    3a0c:	bf34      	ite	cc
    3a0e:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    3a12:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3a16:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spi_frequency(spi_cfg->frequency);
    3a1a:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3a1c:	f00c 0304 	and.w	r3, ip, #4
    3a20:	d03b      	beq.n	3a9a <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2>
			return NRF_SPI_MODE_2;
    3a22:	2b00      	cmp	r3, #0
    3a24:	bf14      	ite	ne
    3a26:	2303      	movne	r3, #3
    3a28:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spi_mode(spi_cfg->operation);
    3a2a:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    3a2c:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    3a2e:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spi_bit_order(spi_cfg->operation);
    3a32:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    3a36:	b12b      	cbz	r3, 3a44 <spi_nrfx_transceive+0x170>
		nrfx_spi_uninit(&dev_config->spi);
    3a38:	68b8      	ldr	r0, [r7, #8]
    3a3a:	f001 fb25 	bl	5088 <nrfx_spi_uninit>
		dev_data->initialized = false;
    3a3e:	2300      	movs	r3, #0
    3a40:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	result = nrfx_spi_init(&dev_config->spi, &config,
    3a44:	464b      	mov	r3, r9
    3a46:	4a5d      	ldr	r2, [pc, #372]	; (3bbc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x124>)
    3a48:	68b8      	ldr	r0, [r7, #8]
    3a4a:	f107 0110 	add.w	r1, r7, #16
    3a4e:	f001 fa77 	bl	4f40 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
    3a52:	4b5b      	ldr	r3, [pc, #364]	; (3bc0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x128>)
    3a54:	4298      	cmp	r0, r3
    3a56:	d024      	beq.n	3aa2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xa>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    3a58:	466d      	mov	r5, sp
    3a5a:	4b5a      	ldr	r3, [pc, #360]	; (3bc4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12c>)
    3a5c:	b088      	sub	sp, #32
    3a5e:	466a      	mov	r2, sp
    3a60:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3a64:	2303      	movs	r3, #3
    3a66:	f842 3f10 	str.w	r3, [r2, #16]!
    3a6a:	4847      	ldr	r0, [pc, #284]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3a6c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3a70:	f003 fae8 	bl	7044 <z_log_msg2_static_create.constprop.0>
    3a74:	46ad      	mov	sp, r5
		return -EIO;
    3a76:	f06f 0504 	mvn.w	r5, #4
    3a7a:	e75d      	b.n	3938 <spi_nrfx_transceive+0x64>
		return NRF_SPI_FREQ_125K;
    3a7c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    3a80:	e7c9      	b.n	3a16 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_250K;
    3a82:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    3a86:	e7c6      	b.n	3a16 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_500K;
    3a88:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    3a8c:	e7c3      	b.n	3a16 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_1M;
    3a8e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3a92:	e7c0      	b.n	3a16 <spi_nrfx_transceive+0x142>
		return NRF_SPI_FREQ_2M;
    3a94:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    3a98:	e7bd      	b.n	3a16 <spi_nrfx_transceive+0x142>
			return NRF_SPI_MODE_0;
    3a9a:	3b00      	subs	r3, #0
    3a9c:	bf18      	it	ne
    3a9e:	2301      	movne	r3, #1
    3aa0:	e7c3      	b.n	3a2a <spi_nrfx_transceive+0x156>
	dev_data->initialized = true;
    3aa2:	2301      	movs	r3, #1
    3aa4:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	ctx->config = spi_cfg;
    3aa8:	f8c9 6000 	str.w	r6, [r9]
		dev_data->busy = true;
    3aac:	2301      	movs	r3, #1
    3aae:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3ab2:	68fb      	ldr	r3, [r7, #12]
    3ab4:	2b00      	cmp	r3, #0
    3ab6:	d154      	bne.n	3b62 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xca>
    3ab8:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3aba:	461a      	mov	r2, r3
    3abc:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    3abe:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3ac2:	f104 0248 	add.w	r2, r4, #72	; 0x48
    3ac6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3aca:	f003 faaa 	bl	7022 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    3ace:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3ad0:	f1ba 0f00 	cmp.w	sl, #0
    3ad4:	d14c      	bne.n	3b70 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xd8>
    3ad6:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3ada:	4653      	mov	r3, sl
    3adc:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    3ade:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3ae2:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3ae6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3aea:	f003 fa9a 	bl	7022 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    3aee:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    3af0:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    3af2:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    3af4:	2101      	movs	r1, #1
    3af6:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3af8:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3afa:	f003 faca 	bl	7092 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    3afe:	4640      	mov	r0, r8
    3b00:	f7ff fe48 	bl	3794 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3b04:	6d25      	ldr	r5, [r4, #80]	; 0x50
    3b06:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    3b08:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3b0a:	429d      	cmp	r5, r3
    3b0c:	bf38      	it	cc
    3b0e:	461d      	movcc	r5, r3
    3b10:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    3b14:	435d      	muls	r5, r3
			     ctx->config->frequency;
    3b16:	f858 3b20 	ldr.w	r3, [r8], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3b1a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3b1e:	681b      	ldr	r3, [r3, #0]
    3b20:	fbb5 f5f3 	udiv	r5, r5, r3
    3b24:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3b26:	35c8      	adds	r5, #200	; 0xc8
    3b28:	f240 30e7 	movw	r0, #999	; 0x3e7
    3b2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3b30:	2300      	movs	r3, #0
    3b32:	fbe5 010c 	umlal	r0, r1, r5, ip
    3b36:	f7fc fad1 	bl	dc <__aeabi_uldivmod>
    3b3a:	4602      	mov	r2, r0
    3b3c:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    3b3e:	4640      	mov	r0, r8
    3b40:	f001 ff5a 	bl	59f8 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    3b44:	b1e0      	cbz	r0, 3b80 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xe8>
		LOG_ERR("Timeout waiting for transfer complete");
    3b46:	4b20      	ldr	r3, [pc, #128]	; (3bc8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x130>)
    3b48:	627b      	str	r3, [r7, #36]	; 0x24
    3b4a:	480f      	ldr	r0, [pc, #60]	; (3b88 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xf0>)
    3b4c:	2302      	movs	r3, #2
    3b4e:	f107 0220 	add.w	r2, r7, #32
    3b52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b56:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
    3b58:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
    3b5c:	f003 fa72 	bl	7044 <z_log_msg2_static_create.constprop.0>
		return -ETIMEDOUT;
    3b60:	e6ea      	b.n	3938 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3b62:	68fb      	ldr	r3, [r7, #12]
    3b64:	681a      	ldr	r2, [r3, #0]
    3b66:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3b68:	2a00      	cmp	r2, #0
    3b6a:	d0a7      	beq.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
    3b6c:	685a      	ldr	r2, [r3, #4]
    3b6e:	e7a5      	b.n	3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3b70:	f8da 3000 	ldr.w	r3, [sl]
    3b74:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3b76:	2b00      	cmp	r3, #0
    3b78:	d0b0      	beq.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
    3b7a:	f8da 3004 	ldr.w	r3, [sl, #4]
    3b7e:	e7ad      	b.n	3adc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x44>
	status = ctx->sync_status;
    3b80:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    3b82:	e6d9      	b.n	3938 <spi_nrfx_transceive+0x64>
    3b84:	00008560 	.word	0x00008560
    3b88:	00007ab4 	.word	0x00007ab4
    3b8c:	0000857a 	.word	0x0000857a
    3b90:	01000003 	.word	0x01000003
    3b94:	0000859c 	.word	0x0000859c
    3b98:	000085bb 	.word	0x000085bb
    3b9c:	0001e847 	.word	0x0001e847
    3ba0:	000085ea 	.word	0x000085ea
    3ba4:	0003d08f 	.word	0x0003d08f
    3ba8:	0007a11f 	.word	0x0007a11f
    3bac:	000f423f 	.word	0x000f423f
    3bb0:	001e847f 	.word	0x001e847f
    3bb4:	003d08ff 	.word	0x003d08ff
    3bb8:	007a1200 	.word	0x007a1200
    3bbc:	00003811 	.word	0x00003811
    3bc0:	0bad0000 	.word	0x0bad0000
    3bc4:	0000861b 	.word	0x0000861b
    3bc8:	00008642 	.word	0x00008642

00003bcc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3bcc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    3bce:	794b      	ldrb	r3, [r1, #5]
    3bd0:	2b01      	cmp	r3, #1
    3bd2:	d120      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3bd4:	798b      	ldrb	r3, [r1, #6]
    3bd6:	2b03      	cmp	r3, #3
    3bd8:	d11d      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3bda:	79cc      	ldrb	r4, [r1, #7]
    3bdc:	b10c      	cbz	r4, 3be2 <uarte_nrfx_configure+0x16>
    3bde:	2c01      	cmp	r4, #1
    3be0:	d119      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3be2:	790a      	ldrb	r2, [r1, #4]
    3be4:	b112      	cbz	r2, 3bec <uarte_nrfx_configure+0x20>
    3be6:	2a02      	cmp	r2, #2
    3be8:	d115      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
    3bea:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3bec:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3bee:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3bf0:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3bf4:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3bf6:	d062      	beq.n	3cbe <uarte_nrfx_configure+0xf2>
    3bf8:	d82b      	bhi.n	3c52 <uarte_nrfx_configure+0x86>
    3bfa:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3bfe:	d061      	beq.n	3cc4 <uarte_nrfx_configure+0xf8>
    3c00:	d814      	bhi.n	3c2c <uarte_nrfx_configure+0x60>
    3c02:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3c06:	d05f      	beq.n	3cc8 <uarte_nrfx_configure+0xfc>
    3c08:	d808      	bhi.n	3c1c <uarte_nrfx_configure+0x50>
    3c0a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3c0e:	d05e      	beq.n	3cce <uarte_nrfx_configure+0x102>
    3c10:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3c14:	d05e      	beq.n	3cd4 <uarte_nrfx_configure+0x108>
    3c16:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3c1a:	e04f      	b.n	3cbc <uarte_nrfx_configure+0xf0>
    3c1c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3c20:	d05b      	beq.n	3cda <uarte_nrfx_configure+0x10e>
    3c22:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3c26:	d1f6      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3c28:	4b36      	ldr	r3, [pc, #216]	; (3d04 <uarte_nrfx_configure+0x138>)
    3c2a:	e03c      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c2c:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3c30:	d056      	beq.n	3ce0 <uarte_nrfx_configure+0x114>
    3c32:	d807      	bhi.n	3c44 <uarte_nrfx_configure+0x78>
    3c34:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3c38:	d054      	beq.n	3ce4 <uarte_nrfx_configure+0x118>
    3c3a:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3c3e:	d1ea      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3c40:	4b31      	ldr	r3, [pc, #196]	; (3d08 <uarte_nrfx_configure+0x13c>)
    3c42:	e030      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c44:	f647 2612 	movw	r6, #31250	; 0x7a12
    3c48:	42b3      	cmp	r3, r6
    3c4a:	d1e4      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3c4c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3c50:	e029      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c52:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3c56:	d047      	beq.n	3ce8 <uarte_nrfx_configure+0x11c>
    3c58:	d813      	bhi.n	3c82 <uarte_nrfx_configure+0xb6>
    3c5a:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3c5e:	d046      	beq.n	3cee <uarte_nrfx_configure+0x122>
    3c60:	d809      	bhi.n	3c76 <uarte_nrfx_configure+0xaa>
    3c62:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    3c66:	42b3      	cmp	r3, r6
    3c68:	d043      	beq.n	3cf2 <uarte_nrfx_configure+0x126>
    3c6a:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3c6e:	d1d2      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3c70:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3c74:	e017      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c76:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3c7a:	d1cc      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3c7c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3c80:	e011      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c82:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3c86:	d037      	beq.n	3cf8 <uarte_nrfx_configure+0x12c>
    3c88:	d808      	bhi.n	3c9c <uarte_nrfx_configure+0xd0>
    3c8a:	4e20      	ldr	r6, [pc, #128]	; (3d0c <uarte_nrfx_configure+0x140>)
    3c8c:	42b3      	cmp	r3, r6
    3c8e:	d036      	beq.n	3cfe <uarte_nrfx_configure+0x132>
    3c90:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3c94:	d1bf      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3c96:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3c9a:	e004      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3c9c:	4e1c      	ldr	r6, [pc, #112]	; (3d10 <uarte_nrfx_configure+0x144>)
    3c9e:	42b3      	cmp	r3, r6
    3ca0:	d1b9      	bne.n	3c16 <uarte_nrfx_configure+0x4a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3ca2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    3ca6:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3ca8:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    3cac:	1d03      	adds	r3, r0, #4
    3cae:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3cb0:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3cb2:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3cb6:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3cba:	2000      	movs	r0, #0
}
    3cbc:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3cbe:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3cc2:	e7f0      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3cc4:	4b13      	ldr	r3, [pc, #76]	; (3d14 <uarte_nrfx_configure+0x148>)
    3cc6:	e7ee      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3cc8:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3ccc:	e7eb      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = 0x00014000;
    3cce:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3cd2:	e7e8      	b.n	3ca6 <uarte_nrfx_configure+0xda>
	switch (baudrate) {
    3cd4:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3cd8:	e7e5      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3cda:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3cde:	e7e2      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3ce0:	4b0d      	ldr	r3, [pc, #52]	; (3d18 <uarte_nrfx_configure+0x14c>)
    3ce2:	e7e0      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3ce4:	4b0d      	ldr	r3, [pc, #52]	; (3d1c <uarte_nrfx_configure+0x150>)
    3ce6:	e7de      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    3ce8:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    3cec:	e7db      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    3cee:	4b0c      	ldr	r3, [pc, #48]	; (3d20 <uarte_nrfx_configure+0x154>)
    3cf0:	e7d9      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    3cf2:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    3cf6:	e7d6      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    3cf8:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    3cfc:	e7d3      	b.n	3ca6 <uarte_nrfx_configure+0xda>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    3cfe:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    3d02:	e7d0      	b.n	3ca6 <uarte_nrfx_configure+0xda>
    3d04:	0013b000 	.word	0x0013b000
    3d08:	004ea000 	.word	0x004ea000
    3d0c:	0003d090 	.word	0x0003d090
    3d10:	000f4240 	.word	0x000f4240
    3d14:	00275000 	.word	0x00275000
    3d18:	0075c000 	.word	0x0075c000
    3d1c:	003af000 	.word	0x003af000
    3d20:	013a9000 	.word	0x013a9000

00003d24 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    3d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d28:	2200      	movs	r2, #0
    3d2a:	b087      	sub	sp, #28
    3d2c:	4607      	mov	r7, r0
    3d2e:	2101      	movs	r1, #1
    3d30:	2002      	movs	r0, #2
    3d32:	f7fe fad1 	bl	22d8 <z_arm_irq_priority_set>
    3d36:	2002      	movs	r0, #2
    3d38:	f7fe fa9c 	bl	2274 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    3d3c:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    3d40:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    3d42:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    3d46:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    3d4a:	2100      	movs	r1, #0
    3d4c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3d50:	466a      	mov	r2, sp
	data->dev = dev;
    3d52:	6037      	str	r7, [r6, #0]
    3d54:	4648      	mov	r0, r9
    3d56:	f003 fa98 	bl	728a <pinctrl_lookup_state>
	if (ret < 0) {
    3d5a:	1e05      	subs	r5, r0, #0
    3d5c:	db26      	blt.n	3dac <uarte_0_init+0x88>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3d5e:	9b00      	ldr	r3, [sp, #0]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3d60:	f8d9 2000 	ldr.w	r2, [r9]
    3d64:	7919      	ldrb	r1, [r3, #4]
    3d66:	6818      	ldr	r0, [r3, #0]
    3d68:	f003 fad1 	bl	730e <pinctrl_configure_pins>
	if (err < 0) {
    3d6c:	1e05      	subs	r5, r0, #0
    3d6e:	db1d      	blt.n	3dac <uarte_0_init+0x88>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    3d70:	1d31      	adds	r1, r6, #4
    3d72:	4638      	mov	r0, r7
    3d74:	f7ff ff2a 	bl	3bcc <uarte_nrfx_configure>
	if (err) {
    3d78:	4605      	mov	r5, r0
    3d7a:	b9b8      	cbnz	r0, 3dac <uarte_0_init+0x88>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    3d7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    3d80:	0799      	lsls	r1, r3, #30
    3d82:	d52a      	bpl.n	3dda <uarte_0_init+0xb6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    3d84:	f106 0012 	add.w	r0, r6, #18
    3d88:	f001 f8d4 	bl	4f34 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    3d8c:	4b28      	ldr	r3, [pc, #160]	; (3e30 <uarte_0_init+0x10c>)
    3d8e:	4298      	cmp	r0, r3
    3d90:	d010      	beq.n	3db4 <uarte_0_init+0x90>
		LOG_ERR("Failed to allocate PPI Channel");
    3d92:	4b28      	ldr	r3, [pc, #160]	; (3e34 <uarte_0_init+0x110>)
    3d94:	9305      	str	r3, [sp, #20]
    3d96:	2302      	movs	r3, #2
    3d98:	9304      	str	r3, [sp, #16]
    3d9a:	4827      	ldr	r0, [pc, #156]	; (3e38 <uarte_0_init+0x114>)
    3d9c:	462b      	mov	r3, r5
    3d9e:	aa04      	add	r2, sp, #16
    3da0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    3da4:	f06f 0504 	mvn.w	r5, #4
    3da8:	f002 ff9a 	bl	6ce0 <z_impl_z_log_msg2_static_create>
UART_NRF_UARTE_DEVICE(0);
    3dac:	4628      	mov	r0, r5
    3dae:	b007      	add	sp, #28
    3db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    3db4:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3db6:	00c3      	lsls	r3, r0, #3
    3db8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3dbc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    3dc0:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    3dc4:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3dc8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3dcc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    3dd0:	4a1a      	ldr	r2, [pc, #104]	; (3e3c <uarte_0_init+0x118>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    3dd2:	2301      	movs	r3, #1
    3dd4:	4083      	lsls	r3, r0
    3dd6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3dda:	2308      	movs	r3, #8
    3ddc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    3de0:	f898 3008 	ldrb.w	r3, [r8, #8]
    3de4:	b95b      	cbnz	r3, 3dfe <uarte_0_init+0xda>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3de6:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    3dea:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    3dee:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    3df2:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    3df6:	2301      	movs	r3, #1
    3df8:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3dfc:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    3dfe:	f8d8 3004 	ldr.w	r3, [r8, #4]
    3e02:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    3e04:	bf5c      	itt	pl
    3e06:	f44f 7280 	movpl.w	r2, #256	; 0x100
    3e0a:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3e0e:	06db      	lsls	r3, r3, #27
    3e10:	bf44      	itt	mi
    3e12:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    3e16:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    3e1a:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    3e1c:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3e1e:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3e22:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3e26:	2301      	movs	r3, #1
    3e28:	60a3      	str	r3, [r4, #8]
    3e2a:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    3e2c:	e7be      	b.n	3dac <uarte_0_init+0x88>
    3e2e:	bf00      	nop
    3e30:	0bad0000 	.word	0x0bad0000
    3e34:	00008687 	.word	0x00008687
    3e38:	00007abc 	.word	0x00007abc
    3e3c:	4001f000 	.word	0x4001f000

00003e40 <uarte_nrfx_poll_out>:
{
    3e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    3e42:	6906      	ldr	r6, [r0, #16]
{
    3e44:	4605      	mov	r5, r0
    3e46:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3e48:	f003 fb86 	bl	7558 <k_is_in_isr>
    3e4c:	b910      	cbnz	r0, 3e54 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    3e4e:	4b2c      	ldr	r3, [pc, #176]	; (3f00 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    3e50:	781b      	ldrb	r3, [r3, #0]
    3e52:	b983      	cbnz	r3, 3e76 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3e54:	f04f 0320 	mov.w	r3, #32
    3e58:	f3ef 8411 	mrs	r4, BASEPRI
    3e5c:	f383 8812 	msr	BASEPRI_MAX, r3
    3e60:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3e64:	6868      	ldr	r0, [r5, #4]
    3e66:	f003 f9c2 	bl	71ee <is_tx_ready.isra.0>
    3e6a:	bb28      	cbnz	r0, 3eb8 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    3e6c:	f384 8811 	msr	BASEPRI, r4
    3e70:	f3bf 8f6f 	isb	sy
}
    3e74:	e7ee      	b.n	3e54 <uarte_nrfx_poll_out+0x14>
{
    3e76:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    3e78:	6868      	ldr	r0, [r5, #4]
    3e7a:	f003 f9b8 	bl	71ee <is_tx_ready.isra.0>
    3e7e:	b970      	cbnz	r0, 3e9e <uarte_nrfx_poll_out+0x5e>
    3e80:	2001      	movs	r0, #1
    3e82:	f003 fadf 	bl	7444 <nrfx_busy_wait>
    3e86:	3c01      	subs	r4, #1
    3e88:	d1f6      	bne.n	3e78 <uarte_nrfx_poll_out+0x38>
	return z_impl_k_sleep(timeout);
    3e8a:	2100      	movs	r1, #0
    3e8c:	2021      	movs	r0, #33	; 0x21
    3e8e:	f002 f8b3 	bl	5ff8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3e92:	e7f0      	b.n	3e76 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    3e94:	f384 8811 	msr	BASEPRI, r4
    3e98:	f3bf 8f6f 	isb	sy
}
    3e9c:	e7f5      	b.n	3e8a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    3e9e:	f04f 0320 	mov.w	r3, #32
    3ea2:	f3ef 8411 	mrs	r4, BASEPRI
    3ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    3eaa:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    3eae:	6868      	ldr	r0, [r5, #4]
    3eb0:	f003 f99d 	bl	71ee <is_tx_ready.isra.0>
    3eb4:	2800      	cmp	r0, #0
    3eb6:	d0ed      	beq.n	3e94 <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    3eb8:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    3ebc:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    3ebe:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    3ec0:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    3ec2:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    3ec6:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3eca:	2200      	movs	r2, #0
    3ecc:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3ed0:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3ed4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    3ed8:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    3edc:	684a      	ldr	r2, [r1, #4]
    3ede:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    3ee0:	bf41      	itttt	mi
    3ee2:	2208      	movmi	r2, #8
    3ee4:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    3ee8:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    3eec:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ef0:	2201      	movs	r2, #1
    3ef2:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    3ef4:	f384 8811 	msr	BASEPRI, r4
    3ef8:	f3bf 8f6f 	isb	sy
}
    3efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3efe:	bf00      	nop
    3f00:	20000eba 	.word	0x20000eba

00003f04 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3f04:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3f06:	2301      	movs	r3, #1
    3f08:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3f0a:	4a11      	ldr	r2, [pc, #68]	; (3f50 <compare_int_lock+0x4c>)
    3f0c:	f3bf 8f5b 	dmb	ish
    3f10:	43dc      	mvns	r4, r3
    3f12:	e852 1f00 	ldrex	r1, [r2]
    3f16:	ea01 0c04 	and.w	ip, r1, r4
    3f1a:	e842 ce00 	strex	lr, ip, [r2]
    3f1e:	f1be 0f00 	cmp.w	lr, #0
    3f22:	d1f6      	bne.n	3f12 <compare_int_lock+0xe>
    3f24:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3f2c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3f30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3f34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3f38:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3f3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3f40:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3f44:	420b      	tst	r3, r1
}
    3f46:	bf14      	ite	ne
    3f48:	2001      	movne	r0, #1
    3f4a:	2000      	moveq	r0, #0
    3f4c:	bd10      	pop	{r4, pc}
    3f4e:	bf00      	nop
    3f50:	20000924 	.word	0x20000924

00003f54 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f54:	4919      	ldr	r1, [pc, #100]	; (3fbc <sys_clock_timeout_handler+0x68>)
{
    3f56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f58:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3f5a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f5e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3f60:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3f64:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f68:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3f6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3f6e:	d222      	bcs.n	3fb6 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3f70:	4b13      	ldr	r3, [pc, #76]	; (3fc0 <sys_clock_timeout_handler+0x6c>)
    3f72:	681b      	ldr	r3, [r3, #0]
    3f74:	0a1a      	lsrs	r2, r3, #8
    3f76:	061b      	lsls	r3, r3, #24
    3f78:	195e      	adds	r6, r3, r5
    3f7a:	4b12      	ldr	r3, [pc, #72]	; (3fc4 <sys_clock_timeout_handler+0x70>)
    3f7c:	f142 0700 	adc.w	r7, r2, #0
    3f80:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3f84:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f86:	f002 f987 	bl	6298 <sys_clock_announce>
    return p_reg->CC[ch];
    3f8a:	00a3      	lsls	r3, r4, #2
    3f8c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f90:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3f94:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3f98:	42aa      	cmp	r2, r5
    3f9a:	d10b      	bne.n	3fb4 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3f9c:	b91e      	cbnz	r6, 3fa6 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3f9e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3fa2:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3fa6:	4b08      	ldr	r3, [pc, #32]	; (3fc8 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3fa8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3fac:	fa00 f404 	lsl.w	r4, r0, r4
    3fb0:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3fb6:	2600      	movs	r6, #0
    3fb8:	e7e5      	b.n	3f86 <sys_clock_timeout_handler+0x32>
    3fba:	bf00      	nop
    3fbc:	200006d0 	.word	0x200006d0
    3fc0:	20000928 	.word	0x20000928
    3fc4:	200006b8 	.word	0x200006b8
    3fc8:	40011000 	.word	0x40011000

00003fcc <compare_int_unlock>:
	if (key) {
    3fcc:	b319      	cbz	r1, 4016 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3fce:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3fd2:	2301      	movs	r3, #1
    3fd4:	4a10      	ldr	r2, [pc, #64]	; (4018 <compare_int_unlock+0x4c>)
    3fd6:	4083      	lsls	r3, r0
    3fd8:	e852 1f00 	ldrex	r1, [r2]
    3fdc:	4319      	orrs	r1, r3
    3fde:	e842 1c00 	strex	ip, r1, [r2]
    3fe2:	f1bc 0f00 	cmp.w	ip, #0
    3fe6:	d1f7      	bne.n	3fd8 <compare_int_unlock+0xc>
    3fe8:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3fec:	4a0b      	ldr	r2, [pc, #44]	; (401c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ff2:	4083      	lsls	r3, r0
    3ff4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3ff8:	4b09      	ldr	r3, [pc, #36]	; (4020 <compare_int_unlock+0x54>)
    3ffa:	f3bf 8f5b 	dmb	ish
    3ffe:	681b      	ldr	r3, [r3, #0]
    4000:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    4004:	fa23 f000 	lsr.w	r0, r3, r0
    4008:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    400a:	bf42      	ittt	mi
    400c:	4b05      	ldrmi	r3, [pc, #20]	; (4024 <compare_int_unlock+0x58>)
    400e:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4012:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    4016:	4770      	bx	lr
    4018:	20000924 	.word	0x20000924
    401c:	40011000 	.word	0x40011000
    4020:	20000920 	.word	0x20000920
    4024:	e000e100 	.word	0xe000e100

00004028 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4028:	4b0d      	ldr	r3, [pc, #52]	; (4060 <z_nrf_rtc_timer_read+0x38>)
    402a:	6818      	ldr	r0, [r3, #0]
    402c:	0a01      	lsrs	r1, r0, #8
    402e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4030:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    4034:	4b0b      	ldr	r3, [pc, #44]	; (4064 <z_nrf_rtc_timer_read+0x3c>)
    4036:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    403a:	1818      	adds	r0, r3, r0
    403c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    4044:	d20a      	bcs.n	405c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    4046:	4b08      	ldr	r3, [pc, #32]	; (4068 <z_nrf_rtc_timer_read+0x40>)
    4048:	e9d3 2300 	ldrd	r2, r3, [r3]
    404c:	4290      	cmp	r0, r2
    404e:	eb71 0303 	sbcs.w	r3, r1, r3
    4052:	d203      	bcs.n	405c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4054:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4058:	f141 0100 	adc.w	r1, r1, #0
}
    405c:	4770      	bx	lr
    405e:	bf00      	nop
    4060:	20000928 	.word	0x20000928
    4064:	40011000 	.word	0x40011000
    4068:	200006b8 	.word	0x200006b8

0000406c <compare_set>:
{
    406c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4070:	b085      	sub	sp, #20
    4072:	4616      	mov	r6, r2
    4074:	4698      	mov	r8, r3
    4076:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4078:	f7ff ff44 	bl	3f04 <compare_int_lock>
    407c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    407e:	f7ff ffd3 	bl	4028 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4082:	42b0      	cmp	r0, r6
    4084:	eb71 0308 	sbcs.w	r3, r1, r8
    4088:	d278      	bcs.n	417c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    408a:	4b46      	ldr	r3, [pc, #280]	; (41a4 <compare_set+0x138>)
    408c:	1a30      	subs	r0, r6, r0
    408e:	eb68 0101 	sbc.w	r1, r8, r1
    4092:	4298      	cmp	r0, r3
    4094:	f171 0300 	sbcs.w	r3, r1, #0
    4098:	f080 8081 	bcs.w	419e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    409c:	4b42      	ldr	r3, [pc, #264]	; (41a8 <compare_set+0x13c>)
    409e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    40a2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    40a6:	45d8      	cmp	r8, fp
    40a8:	bf08      	it	eq
    40aa:	4556      	cmpeq	r6, sl
    40ac:	d051      	beq.n	4152 <compare_set+0xe6>
    40ae:	ea4f 0985 	mov.w	r9, r5, lsl #2
    40b2:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    40b6:	f105 0750 	add.w	r7, r5, #80	; 0x50
    40ba:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    40be:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    40c0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    40c4:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40c8:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    40ca:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    40ce:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    40d2:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    40d4:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    40d8:	4b34      	ldr	r3, [pc, #208]	; (41ac <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40da:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    40de:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    40e0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    40e4:	1a40      	subs	r0, r0, r1
    40e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    40ea:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    40ee:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    40f0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    40f4:	d107      	bne.n	4106 <compare_set+0x9a>
    40f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    40fa:	2013      	movs	r0, #19
    40fc:	f003 fb5d 	bl	77ba <z_impl_k_busy_wait>
    4100:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    4104:	4b29      	ldr	r3, [pc, #164]	; (41ac <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    4106:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    410a:	eba4 000c 	sub.w	r0, r4, ip
    410e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4112:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4116:	bf88      	it	hi
    4118:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    411a:	2000      	movs	r0, #0
    411c:	6038      	str	r0, [r7, #0]
    411e:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    4120:	9801      	ldr	r0, [sp, #4]
    4122:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4126:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    412a:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    412e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4132:	4281      	cmp	r1, r0
    4134:	d006      	beq.n	4144 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    4136:	1a20      	subs	r0, r4, r0
    4138:	3802      	subs	r0, #2
    413a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    413e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4142:	d819      	bhi.n	4178 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    4144:	1aa4      	subs	r4, r4, r2
    4146:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    414a:	eb14 0a06 	adds.w	sl, r4, r6
    414e:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4152:	4915      	ldr	r1, [pc, #84]	; (41a8 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    4154:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    4156:	012b      	lsls	r3, r5, #4
    4158:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    415c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4160:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4162:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4164:	6053      	str	r3, [r2, #4]
	return ret;
    4166:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    4168:	4628      	mov	r0, r5
    416a:	9900      	ldr	r1, [sp, #0]
    416c:	f7ff ff2e 	bl	3fcc <compare_int_unlock>
}
    4170:	4620      	mov	r0, r4
    4172:	b005      	add	sp, #20
    4174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4178:	4620      	mov	r0, r4
    417a:	e7b1      	b.n	40e0 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    417c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    417e:	4a0c      	ldr	r2, [pc, #48]	; (41b0 <compare_set+0x144>)
    4180:	f3bf 8f5b 	dmb	ish
    4184:	40ab      	lsls	r3, r5
    4186:	e852 1f00 	ldrex	r1, [r2]
    418a:	4319      	orrs	r1, r3
    418c:	e842 1000 	strex	r0, r1, [r2]
    4190:	2800      	cmp	r0, #0
    4192:	d1f8      	bne.n	4186 <compare_set+0x11a>
    4194:	f3bf 8f5b 	dmb	ish
    4198:	46b2      	mov	sl, r6
    419a:	46c3      	mov	fp, r8
    419c:	e7d9      	b.n	4152 <compare_set+0xe6>
			return -EINVAL;
    419e:	f06f 0415 	mvn.w	r4, #21
    41a2:	e7e1      	b.n	4168 <compare_set+0xfc>
    41a4:	01000001 	.word	0x01000001
    41a8:	200006c0 	.word	0x200006c0
    41ac:	40011000 	.word	0x40011000
    41b0:	20000920 	.word	0x20000920

000041b4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    41b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    41b6:	4b19      	ldr	r3, [pc, #100]	; (421c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    41b8:	4d19      	ldr	r5, [pc, #100]	; (4220 <sys_clock_driver_init+0x6c>)
    41ba:	2400      	movs	r4, #0
    41bc:	f04f 30ff 	mov.w	r0, #4294967295
    41c0:	f04f 31ff 	mov.w	r1, #4294967295
    41c4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    41c8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    41cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    41d0:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    41d4:	4b13      	ldr	r3, [pc, #76]	; (4224 <sys_clock_driver_init+0x70>)
    41d6:	2602      	movs	r6, #2
    41d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    41dc:	2101      	movs	r1, #1
    41de:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    41e2:	2011      	movs	r0, #17
    41e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    41e8:	4622      	mov	r2, r4
    41ea:	f7fe f875 	bl	22d8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    41ee:	2011      	movs	r0, #17
    41f0:	f7fe f840 	bl	2274 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    41f4:	4a0c      	ldr	r2, [pc, #48]	; (4228 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    41f6:	2301      	movs	r3, #1
    41f8:	60ab      	str	r3, [r5, #8]
    41fa:	602b      	str	r3, [r5, #0]
    41fc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    41fe:	4b0b      	ldr	r3, [pc, #44]	; (422c <sys_clock_driver_init+0x78>)
    4200:	4a0b      	ldr	r2, [pc, #44]	; (4230 <sys_clock_driver_init+0x7c>)
    4202:	9300      	str	r3, [sp, #0]
    4204:	9401      	str	r4, [sp, #4]
    4206:	2300      	movs	r3, #0
    4208:	4620      	mov	r0, r4
    420a:	f7ff ff2f 	bl	406c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    420e:	4630      	mov	r0, r6
    4210:	f7fe ff04 	bl	301c <z_nrf_clock_control_lf_on>

	return 0;
}
    4214:	4620      	mov	r0, r4
    4216:	b002      	add	sp, #8
    4218:	bd70      	pop	{r4, r5, r6, pc}
    421a:	bf00      	nop
    421c:	200006c0 	.word	0x200006c0
    4220:	40011000 	.word	0x40011000
    4224:	e000e100 	.word	0xe000e100
    4228:	20000924 	.word	0x20000924
    422c:	00003f55 	.word	0x00003f55
    4230:	007fffff 	.word	0x007fffff

00004234 <rtc_nrf_isr>:
{
    4234:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4238:	4c35      	ldr	r4, [pc, #212]	; (4310 <rtc_nrf_isr+0xdc>)
    423a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    423e:	079a      	lsls	r2, r3, #30
    4240:	d50b      	bpl.n	425a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4242:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4246:	b143      	cbz	r3, 425a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4248:	4a32      	ldr	r2, [pc, #200]	; (4314 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    424a:	2300      	movs	r3, #0
    424c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4250:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4254:	6813      	ldr	r3, [r2, #0]
    4256:	3301      	adds	r3, #1
    4258:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    425a:	f04f 0320 	mov.w	r3, #32
    425e:	f3ef 8211 	mrs	r2, BASEPRI
    4262:	f383 8812 	msr	BASEPRI_MAX, r3
    4266:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    426a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    426e:	03db      	lsls	r3, r3, #15
    4270:	d512      	bpl.n	4298 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4272:	f3bf 8f5b 	dmb	ish
    4276:	4b28      	ldr	r3, [pc, #160]	; (4318 <rtc_nrf_isr+0xe4>)
    4278:	e853 1f00 	ldrex	r1, [r3]
    427c:	f021 0001 	bic.w	r0, r1, #1
    4280:	e843 0600 	strex	r6, r0, [r3]
    4284:	2e00      	cmp	r6, #0
    4286:	d1f7      	bne.n	4278 <rtc_nrf_isr+0x44>
    4288:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    428c:	2900      	cmp	r1, #0
    428e:	d136      	bne.n	42fe <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4290:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    4294:	2b00      	cmp	r3, #0
    4296:	d132      	bne.n	42fe <rtc_nrf_isr+0xca>
{
    4298:	2300      	movs	r3, #0
	__asm__ volatile(
    429a:	f382 8811 	msr	BASEPRI, r2
    429e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    42a2:	b34b      	cbz	r3, 42f8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    42a4:	f7ff fec0 	bl	4028 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    42a8:	f04f 0320 	mov.w	r3, #32
    42ac:	f3ef 8c11 	mrs	ip, BASEPRI
    42b0:	f383 8812 	msr	BASEPRI_MAX, r3
    42b4:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    42b8:	4b18      	ldr	r3, [pc, #96]	; (431c <rtc_nrf_isr+0xe8>)
    42ba:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    42be:	42b0      	cmp	r0, r6
    42c0:	eb71 0207 	sbcs.w	r2, r1, r7
    42c4:	f04f 0200 	mov.w	r2, #0
    42c8:	d320      	bcc.n	430c <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    42ca:	f04f 38ff 	mov.w	r8, #4294967295
    42ce:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    42d2:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    42d6:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    42da:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    42dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    42e0:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    42e4:	f38c 8811 	msr	BASEPRI, ip
    42e8:	f3bf 8f6f 	isb	sy
		if (handler) {
    42ec:	b121      	cbz	r1, 42f8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    42ee:	9500      	str	r5, [sp, #0]
    42f0:	4632      	mov	r2, r6
    42f2:	463b      	mov	r3, r7
    42f4:	2000      	movs	r0, #0
    42f6:	4788      	blx	r1
}
    42f8:	b003      	add	sp, #12
    42fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42fe:	2300      	movs	r3, #0
    4300:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    4304:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    4308:	2301      	movs	r3, #1
}
    430a:	e7c6      	b.n	429a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    430c:	4611      	mov	r1, r2
    430e:	e7e9      	b.n	42e4 <rtc_nrf_isr+0xb0>
    4310:	40011000 	.word	0x40011000
    4314:	20000928 	.word	0x20000928
    4318:	20000920 	.word	0x20000920
    431c:	200006c0 	.word	0x200006c0

00004320 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4320:	1c43      	adds	r3, r0, #1
{
    4322:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4324:	d021      	beq.n	436a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4326:	2801      	cmp	r0, #1
    4328:	dd21      	ble.n	436e <sys_clock_set_timeout+0x4e>
    432a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    432e:	da20      	bge.n	4372 <sys_clock_set_timeout+0x52>
    4330:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4332:	f7ff fe79 	bl	4028 <z_nrf_rtc_timer_read>
    4336:	4b10      	ldr	r3, [pc, #64]	; (4378 <sys_clock_set_timeout+0x58>)
    4338:	e9d3 1300 	ldrd	r1, r3, [r3]
    433c:	1a40      	subs	r0, r0, r1
		ticks = 0;
    433e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4342:	bf28      	it	cs
    4344:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4346:	3001      	adds	r0, #1
    4348:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    434a:	480c      	ldr	r0, [pc, #48]	; (437c <sys_clock_set_timeout+0x5c>)
    434c:	4282      	cmp	r2, r0
    434e:	bf28      	it	cs
    4350:	4602      	movcs	r2, r0
    4352:	1852      	adds	r2, r2, r1
    4354:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4358:	4909      	ldr	r1, [pc, #36]	; (4380 <sys_clock_set_timeout+0x60>)
    435a:	9001      	str	r0, [sp, #4]
    435c:	9100      	str	r1, [sp, #0]
    435e:	f143 0300 	adc.w	r3, r3, #0
    4362:	f7ff fe83 	bl	406c <compare_set>
}
    4366:	b002      	add	sp, #8
    4368:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    436a:	4804      	ldr	r0, [pc, #16]	; (437c <sys_clock_set_timeout+0x5c>)
    436c:	e7e0      	b.n	4330 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    436e:	2400      	movs	r4, #0
    4370:	e7df      	b.n	4332 <sys_clock_set_timeout+0x12>
    4372:	4c02      	ldr	r4, [pc, #8]	; (437c <sys_clock_set_timeout+0x5c>)
    4374:	e7dd      	b.n	4332 <sys_clock_set_timeout+0x12>
    4376:	bf00      	nop
    4378:	200006d0 	.word	0x200006d0
    437c:	007fffff 	.word	0x007fffff
    4380:	00003f55 	.word	0x00003f55

00004384 <sys_clock_elapsed>:
{
    4384:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4386:	f7ff fe4f 	bl	4028 <z_nrf_rtc_timer_read>
    438a:	4b02      	ldr	r3, [pc, #8]	; (4394 <sys_clock_elapsed+0x10>)
    438c:	681b      	ldr	r3, [r3, #0]
}
    438e:	1ac0      	subs	r0, r0, r3
    4390:	bd08      	pop	{r3, pc}
    4392:	bf00      	nop
    4394:	200006d0 	.word	0x200006d0

00004398 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4398:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    439a:	f7fd fa43 	bl	1824 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    439e:	4b07      	ldr	r3, [pc, #28]	; (43bc <k_sys_fatal_error_handler+0x24>)
    43a0:	9305      	str	r3, [sp, #20]
    43a2:	2302      	movs	r3, #2
    43a4:	9304      	str	r3, [sp, #16]
    43a6:	4806      	ldr	r0, [pc, #24]	; (43c0 <k_sys_fatal_error_handler+0x28>)
    43a8:	2300      	movs	r3, #0
    43aa:	aa04      	add	r2, sp, #16
    43ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43b0:	f002 fc96 	bl	6ce0 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    43b4:	2000      	movs	r0, #0
    43b6:	f7fe fd0f 	bl	2dd8 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    43ba:	bf00      	nop
    43bc:	000086bd 	.word	0x000086bd
    43c0:	00007a7c 	.word	0x00007a7c

000043c4 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    43c4:	f04f 4370 	mov.w	r3, #4026531840	; 0xf0000000
    43c8:	f893 2fe0 	ldrb.w	r2, [r3, #4064]	; 0xfe0
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    43cc:	2a06      	cmp	r2, #6
    43ce:	d109      	bne.n	43e4 <nrf52_errata_16+0x20>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    43d0:	f8d3 3fe8 	ldr.w	r3, [r3, #4072]	; 0xfe8
    43d4:	f3c3 1303 	ubfx	r3, r3, #4, #4
    43d8:	3b03      	subs	r3, #3
    43da:	2b04      	cmp	r3, #4
    43dc:	d802      	bhi.n	43e4 <nrf52_errata_16+0x20>
    43de:	4a02      	ldr	r2, [pc, #8]	; (43e8 <nrf52_errata_16+0x24>)
    43e0:	5cd0      	ldrb	r0, [r2, r3]
    43e2:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    43e4:	2000      	movs	r0, #0
    #endif
}
    43e6:	4770      	bx	lr
    43e8:	000086e9 	.word	0x000086e9

000043ec <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    43ec:	4a02      	ldr	r2, [pc, #8]	; (43f8 <nvmc_wait+0xc>)
    43ee:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    43f2:	2b00      	cmp	r3, #0
    43f4:	d0fb      	beq.n	43ee <nvmc_wait+0x2>
}
    43f6:	4770      	bx	lr
    43f8:	4001e000 	.word	0x4001e000

000043fc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    43fc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    43fe:	f003 f812 	bl	7426 <nrf52_errata_108>
    4402:	b140      	cbz	r0, 4416 <SystemInit+0x1a>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    4404:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4408:	4a90      	ldr	r2, [pc, #576]	; (464c <SystemInit+0x250>)
    440a:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
    440e:	f3c3 2304 	ubfx	r3, r3, #8, #5
    4412:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    4416:	f7ff ffd5 	bl	43c4 <nrf52_errata_16>
    441a:	b110      	cbz	r0, 4422 <SystemInit+0x26>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    441c:	4b8c      	ldr	r3, [pc, #560]	; (4650 <SystemInit+0x254>)
    441e:	4a8d      	ldr	r2, [pc, #564]	; (4654 <SystemInit+0x258>)
    4420:	675a      	str	r2, [r3, #116]	; 0x74
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    4422:	f003 f800 	bl	7426 <nrf52_errata_108>
    4426:	b148      	cbz	r0, 443c <SystemInit+0x40>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    4428:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    442c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4430:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
    4434:	f3c3 3342 	ubfx	r3, r3, #13, #3
    4438:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    443c:	f7ff ffc2 	bl	43c4 <nrf52_errata_16>
    4440:	b130      	cbz	r0, 4450 <SystemInit+0x54>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    4442:	4a85      	ldr	r2, [pc, #532]	; (4658 <SystemInit+0x25c>)
    4444:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
    4448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    444c:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4450:	f002 ffe9 	bl	7426 <nrf52_errata_108>
    4454:	b140      	cbz	r0, 4468 <SystemInit+0x6c>
            NRF_CLOCK->EVENTS_DONE = 0;
    4456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    445a:	2200      	movs	r2, #0
    445c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4460:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4464:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    4468:	f7ff ffac 	bl	43c4 <nrf52_errata_16>
    446c:	b120      	cbz	r0, 4478 <SystemInit+0x7c>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    446e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4472:	2203      	movs	r2, #3
    4474:	f8c3 25a0 	str.w	r2, [r3, #1440]	; 0x5a0
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    4478:	f7ff ffa4 	bl	43c4 <nrf52_errata_16>
    447c:	b160      	cbz	r0, 4498 <SystemInit+0x9c>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    447e:	4b77      	ldr	r3, [pc, #476]	; (465c <SystemInit+0x260>)
    4480:	2205      	movs	r2, #5
    4482:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    4486:	2201      	movs	r2, #1
    4488:	f8c3 2688 	str.w	r2, [r3, #1672]	; 0x688
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    448c:	2200      	movs	r2, #0
    448e:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    4492:	223f      	movs	r2, #63	; 0x3f
    4494:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    4498:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    449c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    44a0:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    44a2:	bf09      	itett	eq
    44a4:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    44a8:	f8d3 3134 	ldrne.w	r3, [r3, #308]	; 0x134
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    44ac:	f893 2fe0 	ldrbeq.w	r2, [r3, #4064]	; 0xfe0
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    44b0:	f8d3 3fe8 	ldreq.w	r3, [r3, #4072]	; 0xfe8
    44b4:	bf08      	it	eq
    44b6:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    44ba:	2a06      	cmp	r2, #6
    44bc:	d14d      	bne.n	455a <SystemInit+0x15e>
            {
                switch(var2)
    44be:	3b03      	subs	r3, #3
    44c0:	2b04      	cmp	r3, #4
    44c2:	d803      	bhi.n	44cc <SystemInit+0xd0>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    44c4:	4a66      	ldr	r2, [pc, #408]	; (4660 <SystemInit+0x264>)
    44c6:	5cd3      	ldrb	r3, [r2, r3]
    44c8:	2b00      	cmp	r3, #0
    44ca:	d046      	beq.n	455a <SystemInit+0x15e>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    44cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    44d0:	4b64      	ldr	r3, [pc, #400]	; (4664 <SystemInit+0x268>)
    44d2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    44d6:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    44da:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    44de:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    44e2:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    44e6:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    44ea:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    44ee:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    44f2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    44f6:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    44fa:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    44fe:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4502:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4506:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    450a:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    450e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4512:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4516:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    451a:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    451e:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4522:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4526:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    452a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    452e:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4532:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4536:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    453a:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    453e:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    4542:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    4546:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    454a:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    454e:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    4552:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    4556:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    455a:	f002 ff64 	bl	7426 <nrf52_errata_108>
    455e:	b148      	cbz	r0, 4574 <SystemInit+0x178>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    4560:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    4564:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4568:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
    456c:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    4570:	f8c2 3ee4 	str.w	r3, [r2, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    4574:	f002 ff57 	bl	7426 <nrf52_errata_108>
    4578:	b148      	cbz	r0, 458e <SystemInit+0x192>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    457a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    457e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    4582:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    4584:	bf44      	itt	mi
    4586:	f06f 0201 	mvnmi.w	r2, #1
    458a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    458e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    4592:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    4596:	2a06      	cmp	r2, #6
    4598:	d126      	bne.n	45e8 <SystemInit+0x1ec>
            {
                switch(var2)
    459a:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    459e:	3b03      	subs	r3, #3
    45a0:	2b04      	cmp	r3, #4
    45a2:	d802      	bhi.n	45aa <SystemInit+0x1ae>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    45a4:	4a30      	ldr	r2, [pc, #192]	; (4668 <SystemInit+0x26c>)
    45a6:	5cd3      	ldrb	r3, [r2, r3]
    45a8:	b163      	cbz	r3, 45c4 <SystemInit+0x1c8>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    45aa:	4a30      	ldr	r2, [pc, #192]	; (466c <SystemInit+0x270>)
    45ac:	f8d2 373c 	ldr.w	r3, [r2, #1852]	; 0x73c
    45b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    45b4:	f8c2 373c 	str.w	r3, [r2, #1852]	; 0x73c
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    45b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    45bc:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    45c0:	2b06      	cmp	r3, #6
    45c2:	d111      	bne.n	45e8 <SystemInit+0x1ec>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    45c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    45c8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    45cc:	3b03      	subs	r3, #3
    45ce:	2b04      	cmp	r3, #4
    45d0:	d802      	bhi.n	45d8 <SystemInit+0x1dc>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    45d2:	4a27      	ldr	r2, [pc, #156]	; (4670 <SystemInit+0x274>)
    45d4:	5cd3      	ldrb	r3, [r2, r3]
    45d6:	b13b      	cbz	r3, 45e8 <SystemInit+0x1ec>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    45d8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    45dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    45e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    45e4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    45e8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    45ec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    45f0:	2a00      	cmp	r2, #0
    45f2:	db03      	blt.n	45fc <SystemInit+0x200>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    45f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    45f8:	2b00      	cmp	r3, #0
    45fa:	da22      	bge.n	4642 <SystemInit+0x246>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    45fc:	491d      	ldr	r1, [pc, #116]	; (4674 <SystemInit+0x278>)
    45fe:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4600:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4604:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4608:	2415      	movs	r4, #21
    nvmc_wait();
    460a:	f7ff feef 	bl	43ec <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    460e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    4612:	f7ff feeb 	bl	43ec <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    4616:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    461a:	f7ff fee7 	bl	43ec <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    461e:	2300      	movs	r3, #0
    4620:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    4624:	f7ff fee2 	bl	43ec <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4628:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    462c:	490a      	ldr	r1, [pc, #40]	; (4658 <SystemInit+0x25c>)
    462e:	4b12      	ldr	r3, [pc, #72]	; (4678 <SystemInit+0x27c>)
    4630:	68ca      	ldr	r2, [r1, #12]
    4632:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4636:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4638:	60cb      	str	r3, [r1, #12]
    463a:	f3bf 8f4f 	dsb	sy
    __NOP();
    463e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4640:	e7fd      	b.n	463e <SystemInit+0x242>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    4642:	4b0e      	ldr	r3, [pc, #56]	; (467c <SystemInit+0x280>)
    4644:	4a0e      	ldr	r2, [pc, #56]	; (4680 <SystemInit+0x284>)
    4646:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4648:	bd10      	pop	{r4, pc}
    464a:	bf00      	nop
    464c:	40013000 	.word	0x40013000
    4650:	4007c000 	.word	0x4007c000
    4654:	baadf00d 	.word	0xbaadf00d
    4658:	e000ed00 	.word	0xe000ed00
    465c:	40005000 	.word	0x40005000
    4660:	000086da 	.word	0x000086da
    4664:	4000c000 	.word	0x4000c000
    4668:	000086df 	.word	0x000086df
    466c:	40001000 	.word	0x40001000
    4670:	000086e4 	.word	0x000086e4
    4674:	4001e000 	.word	0x4001e000
    4678:	05fa0004 	.word	0x05fa0004
    467c:	20000150 	.word	0x20000150
    4680:	03d09000 	.word	0x03d09000

00004684 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4684:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4686:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4688:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    468a:	fab2 f382 	clz	r3, r2
    468e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    4692:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    4694:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    4696:	d014      	beq.n	46c2 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4698:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    469c:	fa05 f303 	lsl.w	r3, r5, r3
    46a0:	ea22 0303 	bic.w	r3, r2, r3
    46a4:	e850 6f00 	ldrex	r6, [r0]
    46a8:	4296      	cmp	r6, r2
    46aa:	d104      	bne.n	46b6 <nrfx_flag32_alloc+0x32>
    46ac:	e840 3c00 	strex	ip, r3, [r0]
    46b0:	f1bc 0f00 	cmp.w	ip, #0
    46b4:	d1f6      	bne.n	46a4 <nrfx_flag32_alloc+0x20>
    46b6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    46ba:	d1e5      	bne.n	4688 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    46bc:	4802      	ldr	r0, [pc, #8]	; (46c8 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    46be:	700c      	strb	r4, [r1, #0]
}
    46c0:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    46c2:	4802      	ldr	r0, [pc, #8]	; (46cc <nrfx_flag32_alloc+0x48>)
    46c4:	e7fc      	b.n	46c0 <nrfx_flag32_alloc+0x3c>
    46c6:	bf00      	nop
    46c8:	0bad0000 	.word	0x0bad0000
    46cc:	0bad0002 	.word	0x0bad0002

000046d0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    46d0:	6803      	ldr	r3, [r0, #0]
    46d2:	40cb      	lsrs	r3, r1
    46d4:	07db      	lsls	r3, r3, #31
{
    46d6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    46d8:	d415      	bmi.n	4706 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    46da:	2301      	movs	r3, #1
    46dc:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    46e0:	6803      	ldr	r3, [r0, #0]
    46e2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    46e6:	ea41 0203 	orr.w	r2, r1, r3
    46ea:	e850 4f00 	ldrex	r4, [r0]
    46ee:	429c      	cmp	r4, r3
    46f0:	d104      	bne.n	46fc <nrfx_flag32_free+0x2c>
    46f2:	e840 2c00 	strex	ip, r2, [r0]
    46f6:	f1bc 0f00 	cmp.w	ip, #0
    46fa:	d1f6      	bne.n	46ea <nrfx_flag32_free+0x1a>
    46fc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4700:	d1ee      	bne.n	46e0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4702:	4802      	ldr	r0, [pc, #8]	; (470c <nrfx_flag32_free+0x3c>)
}
    4704:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4706:	4802      	ldr	r0, [pc, #8]	; (4710 <nrfx_flag32_free+0x40>)
    4708:	e7fc      	b.n	4704 <nrfx_flag32_free+0x34>
    470a:	bf00      	nop
    470c:	0bad0000 	.word	0x0bad0000
    4710:	0bad0004 	.word	0x0bad0004

00004714 <clock_stop>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

static void clock_stop(nrf_clock_domain_t domain)
{
    4714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    4716:	4604      	mov	r4, r0
    4718:	b118      	cbz	r0, 4722 <clock_stop+0xe>
    471a:	2801      	cmp	r0, #1
    471c:	d029      	beq.n	4772 <clock_stop+0x5e>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    471e:	b003      	add	sp, #12
    4720:	bdf0      	pop	{r4, r5, r6, r7, pc}
    p_reg->INTENCLR = mask;
    4722:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4726:	2202      	movs	r2, #2
    4728:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    472c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4730:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4734:	2201      	movs	r2, #1
    4736:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4738:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    473a:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    473c:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4740:	bf14      	ite	ne
    4742:	2500      	movne	r5, #0
    4744:	f10d 0507 	addeq.w	r5, sp, #7
    4748:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    474c:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4750:	b1d4      	cbz	r4, 4788 <clock_stop+0x74>
    4752:	2c01      	cmp	r4, #1
    4754:	d1e3      	bne.n	471e <clock_stop+0xa>
            if (p_clk_src != NULL)
    4756:	b125      	cbz	r5, 4762 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4758:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    475c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4760:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4762:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4766:	03db      	lsls	r3, r3, #15
    4768:	d418      	bmi.n	479c <clock_stop+0x88>
            m_clock_cb.hfclk_started = false;
    476a:	4b13      	ldr	r3, [pc, #76]	; (47b8 <clock_stop+0xa4>)
    476c:	2200      	movs	r2, #0
    476e:	715a      	strb	r2, [r3, #5]
    4770:	e7d5      	b.n	471e <clock_stop+0xa>
    p_reg->INTENCLR = mask;
    4772:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4776:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4778:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    477c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4780:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4784:	6058      	str	r0, [r3, #4]
}
    4786:	e7d7      	b.n	4738 <clock_stop+0x24>
            if (p_clk_src != NULL)
    4788:	b125      	cbz	r5, 4794 <clock_stop+0x80>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    478a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    478e:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4792:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4794:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4798:	03da      	lsls	r2, r3, #15
    479a:	d5c0      	bpl.n	471e <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    479c:	b92d      	cbnz	r5, 47aa <clock_stop+0x96>
    479e:	2001      	movs	r0, #1
    47a0:	f002 fe50 	bl	7444 <nrfx_busy_wait>
    47a4:	3f01      	subs	r7, #1
    47a6:	d1d3      	bne.n	4750 <clock_stop+0x3c>
    47a8:	e003      	b.n	47b2 <clock_stop+0x9e>
    47aa:	f89d 3007 	ldrb.w	r3, [sp, #7]
    47ae:	2b01      	cmp	r3, #1
    47b0:	d0f5      	beq.n	479e <clock_stop+0x8a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    47b2:	2c01      	cmp	r4, #1
    47b4:	d0d9      	beq.n	476a <clock_stop+0x56>
    47b6:	e7b2      	b.n	471e <clock_stop+0xa>
    47b8:	2000092c 	.word	0x2000092c

000047bc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    47bc:	4b04      	ldr	r3, [pc, #16]	; (47d0 <nrfx_clock_init+0x14>)
    47be:	791a      	ldrb	r2, [r3, #4]
    47c0:	b922      	cbnz	r2, 47cc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    47c2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    47c4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    47c6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    47c8:	4802      	ldr	r0, [pc, #8]	; (47d4 <nrfx_clock_init+0x18>)
    47ca:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    47cc:	4802      	ldr	r0, [pc, #8]	; (47d8 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    47ce:	4770      	bx	lr
    47d0:	2000092c 	.word	0x2000092c
    47d4:	0bad0000 	.word	0x0bad0000
    47d8:	0bad000c 	.word	0x0bad000c

000047dc <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    47dc:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    47de:	b110      	cbz	r0, 47e6 <nrfx_clock_start+0xa>
    47e0:	2801      	cmp	r0, #1
    47e2:	d044      	beq.n	486e <nrfx_clock_start+0x92>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    47e4:	bd38      	pop	{r3, r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    47ea:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    47ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    47f2:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    47f6:	d10b      	bne.n	4810 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    47f8:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    47fc:	07c9      	lsls	r1, r1, #31
    47fe:	d510      	bpl.n	4822 <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4800:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    4804:	079b      	lsls	r3, r3, #30
    4806:	d408      	bmi.n	481a <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    4808:	2302      	movs	r3, #2
    480a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    480e:	e7e9      	b.n	47e4 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4810:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4814:	2b01      	cmp	r3, #1
    4816:	d004      	beq.n	4822 <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    4818:	b11b      	cbz	r3, 4822 <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    481a:	2000      	movs	r0, #0
    481c:	f7ff ff7a 	bl	4714 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4820:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    4822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4826:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    482a:	2300      	movs	r3, #0
    482c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4830:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4834:	2302      	movs	r3, #2
    4836:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    483a:	4a12      	ldr	r2, [pc, #72]	; (4884 <nrfx_clock_start+0xa8>)
    483c:	f8d2 00fc 	ldr.w	r0, [r2, #252]	; 0xfc
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    4840:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    4844:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
    dwt_ctrl = DWT->CTRL;
    4848:	4b0f      	ldr	r3, [pc, #60]	; (4888 <nrfx_clock_start+0xac>)
    484a:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    484c:	f044 0101 	orr.w	r1, r4, #1
    4850:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    4852:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    4854:	6859      	ldr	r1, [r3, #4]
    4856:	1b49      	subs	r1, r1, r5
    4858:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    485c:	d3fa      	bcc.n	4854 <nrfx_clock_start+0x78>
    DWT->CTRL = dwt_ctrl;
    485e:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    CoreDebug->DEMCR = core_debug;
    4864:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
    4868:	2201      	movs	r2, #1
    486a:	609a      	str	r2, [r3, #8]
}
    486c:	e7ba      	b.n	47e4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    486e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4872:	2200      	movs	r2, #0
    4874:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4878:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    487c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4880:	6018      	str	r0, [r3, #0]
}
    4882:	e7af      	b.n	47e4 <nrfx_clock_start+0x8>
    4884:	e000ed00 	.word	0xe000ed00
    4888:	e0001000 	.word	0xe0001000

0000488c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    488c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4890:	b510      	push	{r4, lr}
    4892:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4896:	b16a      	cbz	r2, 48b4 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4898:	2200      	movs	r2, #0
    489a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    489e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    48a2:	2201      	movs	r2, #1
    48a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    48a8:	4b11      	ldr	r3, [pc, #68]	; (48f0 <nrfx_power_clock_irq_handler+0x64>)
    48aa:	7958      	ldrb	r0, [r3, #5]
    48ac:	b910      	cbnz	r0, 48b4 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
    48ae:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    48b0:	681b      	ldr	r3, [r3, #0]
    48b2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    48b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48b8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    48bc:	b172      	cbz	r2, 48dc <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    48be:	2200      	movs	r2, #0
    48c0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    48c4:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    48c8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    48cc:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    48d0:	0792      	lsls	r2, r2, #30
    48d2:	d104      	bne.n	48de <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
    48d4:	2201      	movs	r2, #1
    48d6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    48da:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    48dc:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    48de:	2202      	movs	r2, #2
    48e0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    48e4:	4b02      	ldr	r3, [pc, #8]	; (48f0 <nrfx_power_clock_irq_handler+0x64>)
}
    48e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    48ea:	681b      	ldr	r3, [r3, #0]
    48ec:	2001      	movs	r0, #1
    48ee:	4718      	bx	r3
    48f0:	2000092c 	.word	0x2000092c

000048f4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    48f4:	4b03      	ldr	r3, [pc, #12]	; (4904 <pin_in_use_by_te+0x10>)
    48f6:	3008      	adds	r0, #8
    48f8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    48fc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4900:	4770      	bx	lr
    4902:	bf00      	nop
    4904:	20000154 	.word	0x20000154

00004908 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4908:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    490a:	f100 0308 	add.w	r3, r0, #8
    490e:	4c0c      	ldr	r4, [pc, #48]	; (4940 <call_handler+0x38>)
    4910:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4914:	05da      	lsls	r2, r3, #23
{
    4916:	4605      	mov	r5, r0
    4918:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    491a:	d507      	bpl.n	492c <call_handler+0x24>
    491c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4920:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4924:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4928:	6852      	ldr	r2, [r2, #4]
    492a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    492c:	68a3      	ldr	r3, [r4, #8]
    492e:	b12b      	cbz	r3, 493c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4930:	68e2      	ldr	r2, [r4, #12]
    4932:	4631      	mov	r1, r6
    4934:	4628      	mov	r0, r5
    }
}
    4936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    493a:	4718      	bx	r3
}
    493c:	bd70      	pop	{r4, r5, r6, pc}
    493e:	bf00      	nop
    4940:	20000154 	.word	0x20000154

00004944 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4944:	4a12      	ldr	r2, [pc, #72]	; (4990 <release_handler+0x4c>)
    4946:	3008      	adds	r0, #8
{
    4948:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    494a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    494e:	05d9      	lsls	r1, r3, #23
    4950:	d51b      	bpl.n	498a <release_handler+0x46>
    4952:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4956:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    495a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    495e:	f102 0410 	add.w	r4, r2, #16
    4962:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4964:	f834 3b02 	ldrh.w	r3, [r4], #2
    4968:	f413 7f80 	tst.w	r3, #256	; 0x100
    496c:	d003      	beq.n	4976 <release_handler+0x32>
    496e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4972:	4299      	cmp	r1, r3
    4974:	d009      	beq.n	498a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4976:	3001      	adds	r0, #1
    4978:	2820      	cmp	r0, #32
    497a:	d1f3      	bne.n	4964 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    497c:	2300      	movs	r3, #0
    497e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4982:	4804      	ldr	r0, [pc, #16]	; (4994 <release_handler+0x50>)
}
    4984:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4986:	f7ff bea3 	b.w	46d0 <nrfx_flag32_free>
}
    498a:	bc10      	pop	{r4}
    498c:	4770      	bx	lr
    498e:	bf00      	nop
    4990:	20000154 	.word	0x20000154
    4994:	200001a8 	.word	0x200001a8

00004998 <pin_handler_trigger_uninit>:
{
    4998:	b538      	push	{r3, r4, r5, lr}
    499a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    499c:	f7ff ffaa 	bl	48f4 <pin_in_use_by_te>
    49a0:	4c09      	ldr	r4, [pc, #36]	; (49c8 <pin_handler_trigger_uninit+0x30>)
    49a2:	f102 0508 	add.w	r5, r2, #8
    49a6:	b140      	cbz	r0, 49ba <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    49a8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    49ac:	4907      	ldr	r1, [pc, #28]	; (49cc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    49ae:	0b5b      	lsrs	r3, r3, #13
    49b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    49b4:	2000      	movs	r0, #0
    49b6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    49ba:	4610      	mov	r0, r2
    49bc:	f7ff ffc2 	bl	4944 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    49c0:	2300      	movs	r3, #0
    49c2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    49c6:	bd38      	pop	{r3, r4, r5, pc}
    49c8:	20000154 	.word	0x20000154
    49cc:	40006000 	.word	0x40006000

000049d0 <nrfx_gpiote_input_configure>:
{
    49d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    49d4:	4604      	mov	r4, r0
    49d6:	461e      	mov	r6, r3
    if (p_input_config)
    49d8:	b309      	cbz	r1, 4a1e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    49da:	4f4d      	ldr	r7, [pc, #308]	; (4b10 <nrfx_gpiote_input_configure+0x140>)
    49dc:	f100 0808 	add.w	r8, r0, #8
    49e0:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    49e4:	07ab      	lsls	r3, r5, #30
    49e6:	d506      	bpl.n	49f6 <nrfx_gpiote_input_configure+0x26>
    49e8:	f7ff ff84 	bl	48f4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    49ec:	b118      	cbz	r0, 49f6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    49ee:	4849      	ldr	r0, [pc, #292]	; (4b14 <nrfx_gpiote_input_configure+0x144>)
}
    49f0:	b002      	add	sp, #8
    49f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    49f6:	f004 001f 	and.w	r0, r4, #31
    49fa:	0080      	lsls	r0, r0, #2
    49fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4a00:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4a02:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4a06:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    4a0a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4a0e:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4a12:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    4a16:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    4a1a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    4a1e:	b192      	cbz	r2, 4a46 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a20:	4b3b      	ldr	r3, [pc, #236]	; (4b10 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4a22:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4a24:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4a26:	f104 0008 	add.w	r0, r4, #8
    4a2a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4a2e:	078f      	lsls	r7, r1, #30
    4a30:	d50c      	bpl.n	4a4c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    4a32:	2a00      	cmp	r2, #0
    4a34:	d1db      	bne.n	49ee <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4a36:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4a3a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4a3e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    4a42:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4a46:	bbce      	cbnz	r6, 4abc <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    4a48:	4833      	ldr	r0, [pc, #204]	; (4b18 <nrfx_gpiote_input_configure+0x148>)
    4a4a:	e7d1      	b.n	49f0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4a4c:	f021 0120 	bic.w	r1, r1, #32
    4a50:	04c9      	lsls	r1, r1, #19
    4a52:	0cc9      	lsrs	r1, r1, #19
    4a54:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4a58:	2a00      	cmp	r2, #0
    4a5a:	d0ec      	beq.n	4a36 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    4a5c:	2d03      	cmp	r5, #3
    4a5e:	d8c6      	bhi.n	49ee <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4a60:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4a62:	b92d      	cbnz	r5, 4a70 <nrfx_gpiote_input_configure+0xa0>
    4a64:	4a2d      	ldr	r2, [pc, #180]	; (4b1c <nrfx_gpiote_input_configure+0x14c>)
    4a66:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4a6a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4a6e:	e7e2      	b.n	4a36 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4a70:	00ba      	lsls	r2, r7, #2
    4a72:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4a76:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4a7a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4a7e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4a82:	f02c 0c03 	bic.w	ip, ip, #3
    4a86:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4a8a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4a8e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    4a92:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4a96:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4a9a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4a9e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4aa2:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    4aa6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    4aaa:	ea4c 0c0e 	orr.w	ip, ip, lr
    4aae:	f041 0120 	orr.w	r1, r1, #32
    4ab2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4ab6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4aba:	e7bc      	b.n	4a36 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4abc:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    4ac0:	4620      	mov	r0, r4
    4ac2:	f7ff ff3f 	bl	4944 <release_handler>
    if (!handler)
    4ac6:	2f00      	cmp	r7, #0
    4ac8:	d0be      	beq.n	4a48 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4aca:	4d11      	ldr	r5, [pc, #68]	; (4b10 <nrfx_gpiote_input_configure+0x140>)
    4acc:	682b      	ldr	r3, [r5, #0]
    4ace:	429f      	cmp	r7, r3
    4ad0:	d104      	bne.n	4adc <nrfx_gpiote_input_configure+0x10c>
    4ad2:	686b      	ldr	r3, [r5, #4]
    4ad4:	429e      	cmp	r6, r3
    4ad6:	d101      	bne.n	4adc <nrfx_gpiote_input_configure+0x10c>
    4ad8:	2200      	movs	r2, #0
    4ada:	e009      	b.n	4af0 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4adc:	4810      	ldr	r0, [pc, #64]	; (4b20 <nrfx_gpiote_input_configure+0x150>)
    4ade:	f10d 0107 	add.w	r1, sp, #7
    4ae2:	f7ff fdcf 	bl	4684 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4ae6:	4b0c      	ldr	r3, [pc, #48]	; (4b18 <nrfx_gpiote_input_configure+0x148>)
    4ae8:	4298      	cmp	r0, r3
    4aea:	d181      	bne.n	49f0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4aec:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    4af0:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4af4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4af8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4afa:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4afc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4b00:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4b08:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4b0c:	e79c      	b.n	4a48 <nrfx_gpiote_input_configure+0x78>
    4b0e:	bf00      	nop
    4b10:	20000154 	.word	0x20000154
    4b14:	0bad0004 	.word	0x0bad0004
    4b18:	0bad0000 	.word	0x0bad0000
    4b1c:	40006000 	.word	0x40006000
    4b20:	200001a8 	.word	0x200001a8

00004b24 <nrfx_gpiote_output_configure>:
{
    4b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b26:	4604      	mov	r4, r0
    if (p_config)
    4b28:	b371      	cbz	r1, 4b88 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b2a:	4e37      	ldr	r6, [pc, #220]	; (4c08 <nrfx_gpiote_output_configure+0xe4>)
    4b2c:	f100 0708 	add.w	r7, r0, #8
    4b30:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4b34:	07ab      	lsls	r3, r5, #30
    4b36:	d404      	bmi.n	4b42 <nrfx_gpiote_output_configure+0x1e>
    4b38:	f7ff fedc 	bl	48f4 <pin_in_use_by_te>
    4b3c:	b108      	cbz	r0, 4b42 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    4b3e:	4833      	ldr	r0, [pc, #204]	; (4c0c <nrfx_gpiote_output_configure+0xe8>)
}
    4b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4b42:	f015 0f1c 	tst.w	r5, #28
    4b46:	784b      	ldrb	r3, [r1, #1]
    4b48:	d001      	beq.n	4b4e <nrfx_gpiote_output_configure+0x2a>
    4b4a:	2b01      	cmp	r3, #1
    4b4c:	d0f7      	beq.n	4b3e <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    4b4e:	f004 001f 	and.w	r0, r4, #31
    4b52:	0080      	lsls	r0, r0, #2
    4b54:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    4b58:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b5c:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4b60:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4b62:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4b64:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    4b68:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    4b6c:	f02c 0c07 	bic.w	ip, ip, #7
    4b70:	ea43 030c 	orr.w	r3, r3, ip
    4b74:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4b78:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b7c:	f043 0301 	orr.w	r3, r3, #1
    4b80:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    4b84:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    4b88:	b90a      	cbnz	r2, 4b8e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    4b8a:	4821      	ldr	r0, [pc, #132]	; (4c10 <nrfx_gpiote_output_configure+0xec>)
    4b8c:	e7d8      	b.n	4b40 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b8e:	4e1e      	ldr	r6, [pc, #120]	; (4c08 <nrfx_gpiote_output_configure+0xe4>)
    4b90:	f104 0708 	add.w	r7, r4, #8
    4b94:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4b98:	0783      	lsls	r3, r0, #30
    4b9a:	d5d0      	bpl.n	4b3e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    4b9c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    4ba0:	4661      	mov	r1, ip
    4ba2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4ba4:	f020 0020 	bic.w	r0, r0, #32
    4ba8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4bac:	04c0      	lsls	r0, r0, #19
    4bae:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4bb2:	0cc0      	lsrs	r0, r0, #19
    4bb4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4bb8:	2300      	movs	r3, #0
    4bba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4bbe:	7855      	ldrb	r5, [r2, #1]
    4bc0:	2d00      	cmp	r5, #0
    4bc2:	d0e2      	beq.n	4b8a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4bc4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4bc8:	7892      	ldrb	r2, [r2, #2]
    4bca:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    4bce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4bd2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bd6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4bda:	0223      	lsls	r3, r4, #8
    4bdc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4be0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4be2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4be6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4bea:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bec:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4bee:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4bf2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4bf6:	4313      	orrs	r3, r2
    4bf8:	f040 0020 	orr.w	r0, r0, #32
    4bfc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4c00:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4c04:	e7c1      	b.n	4b8a <nrfx_gpiote_output_configure+0x66>
    4c06:	bf00      	nop
    4c08:	20000154 	.word	0x20000154
    4c0c:	0bad0004 	.word	0x0bad0004
    4c10:	0bad0000 	.word	0x0bad0000

00004c14 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4c14:	4b01      	ldr	r3, [pc, #4]	; (4c1c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4c16:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4c1a:	4770      	bx	lr
    4c1c:	20000154 	.word	0x20000154

00004c20 <nrfx_gpiote_channel_get>:
{
    4c20:	b508      	push	{r3, lr}
    4c22:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4c24:	f7ff fe66 	bl	48f4 <pin_in_use_by_te>
    4c28:	b138      	cbz	r0, 4c3a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c2a:	4b05      	ldr	r3, [pc, #20]	; (4c40 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4c2c:	4805      	ldr	r0, [pc, #20]	; (4c44 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4c2e:	3208      	adds	r2, #8
    4c30:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4c34:	0b5b      	lsrs	r3, r3, #13
    4c36:	700b      	strb	r3, [r1, #0]
}
    4c38:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4c3a:	4803      	ldr	r0, [pc, #12]	; (4c48 <nrfx_gpiote_channel_get+0x28>)
    4c3c:	e7fc      	b.n	4c38 <nrfx_gpiote_channel_get+0x18>
    4c3e:	bf00      	nop
    4c40:	20000154 	.word	0x20000154
    4c44:	0bad0000 	.word	0x0bad0000
    4c48:	0bad0004 	.word	0x0bad0004

00004c4c <nrfx_gpiote_init>:
{
    4c4c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4c4e:	4c0f      	ldr	r4, [pc, #60]	; (4c8c <nrfx_gpiote_init+0x40>)
    4c50:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4c54:	b9bd      	cbnz	r5, 4c86 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4c56:	2240      	movs	r2, #64	; 0x40
    4c58:	4629      	mov	r1, r5
    4c5a:	f104 0010 	add.w	r0, r4, #16
    4c5e:	f002 f8bb 	bl	6dd8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4c62:	2006      	movs	r0, #6
    4c64:	f7fd fb06 	bl	2274 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4c68:	4b09      	ldr	r3, [pc, #36]	; (4c90 <nrfx_gpiote_init+0x44>)
    return err_code;
    4c6a:	480a      	ldr	r0, [pc, #40]	; (4c94 <nrfx_gpiote_init+0x48>)
    4c6c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4c70:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4c74:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4c78:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4c7c:	2301      	movs	r3, #1
    4c7e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4c82:	6563      	str	r3, [r4, #84]	; 0x54
}
    4c84:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4c86:	4804      	ldr	r0, [pc, #16]	; (4c98 <nrfx_gpiote_init+0x4c>)
    4c88:	e7fc      	b.n	4c84 <nrfx_gpiote_init+0x38>
    4c8a:	bf00      	nop
    4c8c:	20000154 	.word	0x20000154
    4c90:	40006000 	.word	0x40006000
    4c94:	0bad0000 	.word	0x0bad0000
    4c98:	0bad0005 	.word	0x0bad0005

00004c9c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4c9c:	4b03      	ldr	r3, [pc, #12]	; (4cac <nrfx_gpiote_is_init+0x10>)
    4c9e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    4ca2:	3800      	subs	r0, #0
    4ca4:	bf18      	it	ne
    4ca6:	2001      	movne	r0, #1
    4ca8:	4770      	bx	lr
    4caa:	bf00      	nop
    4cac:	20000154 	.word	0x20000154

00004cb0 <nrfx_gpiote_channel_free>:
{
    4cb0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4cb2:	4801      	ldr	r0, [pc, #4]	; (4cb8 <nrfx_gpiote_channel_free+0x8>)
    4cb4:	f7ff bd0c 	b.w	46d0 <nrfx_flag32_free>
    4cb8:	200001a4 	.word	0x200001a4

00004cbc <nrfx_gpiote_channel_alloc>:
{
    4cbc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4cbe:	4801      	ldr	r0, [pc, #4]	; (4cc4 <nrfx_gpiote_channel_alloc+0x8>)
    4cc0:	f7ff bce0 	b.w	4684 <nrfx_flag32_alloc>
    4cc4:	200001a4 	.word	0x200001a4

00004cc8 <nrfx_gpiote_trigger_enable>:
{
    4cc8:	b510      	push	{r4, lr}
    4cca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4ccc:	f7ff fe12 	bl	48f4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cd0:	f102 0408 	add.w	r4, r2, #8
    4cd4:	4b1c      	ldr	r3, [pc, #112]	; (4d48 <nrfx_gpiote_trigger_enable+0x80>)
    4cd6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4cda:	b1e0      	cbz	r0, 4d16 <nrfx_gpiote_trigger_enable+0x4e>
    4cdc:	f013 0402 	ands.w	r4, r3, #2
    4ce0:	d119      	bne.n	4d16 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4ce2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    4ce4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    4ce6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    4cea:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4cee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4cf2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4cf6:	6004      	str	r4, [r0, #0]
    4cf8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4cfa:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4cfe:	f040 0001 	orr.w	r0, r0, #1
    4d02:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    4d06:	b129      	cbz	r1, 4d14 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    4d08:	2201      	movs	r2, #1
    4d0a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4d0e:	4a0f      	ldr	r2, [pc, #60]	; (4d4c <nrfx_gpiote_trigger_enable+0x84>)
    4d10:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4d14:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4d16:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    4d1a:	2b04      	cmp	r3, #4
    4d1c:	d010      	beq.n	4d40 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4d1e:	2b05      	cmp	r3, #5
    4d20:	d010      	beq.n	4d44 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    4d22:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4d26:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    4d2a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4d2e:	40d9      	lsrs	r1, r3
    4d30:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4d34:	3102      	adds	r1, #2
}
    4d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    4d3a:	4610      	mov	r0, r2
    4d3c:	f002 bb93 	b.w	7466 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4d40:	2103      	movs	r1, #3
    4d42:	e7f8      	b.n	4d36 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4d44:	2102      	movs	r1, #2
    4d46:	e7f6      	b.n	4d36 <nrfx_gpiote_trigger_enable+0x6e>
    4d48:	20000154 	.word	0x20000154
    4d4c:	40006000 	.word	0x40006000

00004d50 <nrfx_gpiote_trigger_disable>:
{
    4d50:	b508      	push	{r3, lr}
    4d52:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d54:	f7ff fdce 	bl	48f4 <pin_in_use_by_te>
    4d58:	b1c0      	cbz	r0, 4d8c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4d5a:	f102 0108 	add.w	r1, r2, #8
    4d5e:	4b0e      	ldr	r3, [pc, #56]	; (4d98 <nrfx_gpiote_trigger_disable+0x48>)
    4d60:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4d64:	0799      	lsls	r1, r3, #30
    4d66:	d411      	bmi.n	4d8c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4d68:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    4d6a:	2201      	movs	r2, #1
    4d6c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4d6e:	009b      	lsls	r3, r3, #2
    4d70:	490a      	ldr	r1, [pc, #40]	; (4d9c <nrfx_gpiote_trigger_disable+0x4c>)
    4d72:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4d76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4d7a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4d7e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4d82:	f022 0203 	bic.w	r2, r2, #3
    4d86:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    4d8a:	bd08      	pop	{r3, pc}
    4d8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4d90:	2100      	movs	r1, #0
    4d92:	4610      	mov	r0, r2
    4d94:	f002 bb67 	b.w	7466 <nrf_gpio_cfg_sense_set>
    4d98:	20000154 	.word	0x20000154
    4d9c:	40006000 	.word	0x40006000

00004da0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4da0:	4b0d      	ldr	r3, [pc, #52]	; (4dd8 <nrfx_gpiote_pin_uninit+0x38>)
    4da2:	f100 0208 	add.w	r2, r0, #8
{
    4da6:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    4da8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    4dac:	07db      	lsls	r3, r3, #31
{
    4dae:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    4db0:	d50f      	bpl.n	4dd2 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    4db2:	f7ff ffcd 	bl	4d50 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    4db6:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    4db8:	f004 041f 	and.w	r4, r4, #31
    4dbc:	f7ff fdec 	bl	4998 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    4dc0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4dc8:	2202      	movs	r2, #2
    4dca:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    4dce:	4803      	ldr	r0, [pc, #12]	; (4ddc <nrfx_gpiote_pin_uninit+0x3c>)
}
    4dd0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4dd2:	4803      	ldr	r0, [pc, #12]	; (4de0 <nrfx_gpiote_pin_uninit+0x40>)
    4dd4:	e7fc      	b.n	4dd0 <nrfx_gpiote_pin_uninit+0x30>
    4dd6:	bf00      	nop
    4dd8:	20000154 	.word	0x20000154
    4ddc:	0bad0000 	.word	0x0bad0000
    4de0:	0bad0004 	.word	0x0bad0004

00004de4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    4de4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4de8:	4b4e      	ldr	r3, [pc, #312]	; (4f24 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    4dea:	484f      	ldr	r0, [pc, #316]	; (4f28 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4dec:	494f      	ldr	r1, [pc, #316]	; (4f2c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    4dee:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4df0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4df2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4df4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4df6:	b136      	cbz	r6, 4e06 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    4df8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4dfc:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4dfe:	bf1e      	ittt	ne
    4e00:	601c      	strne	r4, [r3, #0]
    4e02:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4e04:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e06:	3304      	adds	r3, #4
    4e08:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4e0a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4e0e:	d1f1      	bne.n	4df4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4e10:	4b45      	ldr	r3, [pc, #276]	; (4f28 <nrfx_gpiote_irq_handler+0x144>)
    4e12:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4e16:	b1bb      	cbz	r3, 4e48 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    4e18:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4e1c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4e20:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4e22:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4e26:	af01      	add	r7, sp, #4
    4e28:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    4e2c:	9c01      	ldr	r4, [sp, #4]
    4e2e:	b96c      	cbnz	r4, 4e4c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4e30:	4b3d      	ldr	r3, [pc, #244]	; (4f28 <nrfx_gpiote_irq_handler+0x144>)
    4e32:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    4e36:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4e3a:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4e3e:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4e40:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    4e44:	2b00      	cmp	r3, #0
    4e46:	d1ee      	bne.n	4e26 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    4e48:	2401      	movs	r4, #1
    4e4a:	e066      	b.n	4f1a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    4e4c:	fa94 f4a4 	rbit	r4, r4
    4e50:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e54:	4a36      	ldr	r2, [pc, #216]	; (4f30 <nrfx_gpiote_irq_handler+0x14c>)
    4e56:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4e5a:	08e0      	lsrs	r0, r4, #3
    4e5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    4e60:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4e64:	fa08 f203 	lsl.w	r2, r8, r3
    4e68:	5c3b      	ldrb	r3, [r7, r0]
    4e6a:	ea23 0302 	bic.w	r3, r3, r2
    4e6e:	543b      	strb	r3, [r7, r0]
    4e70:	00a3      	lsls	r3, r4, #2
    4e72:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    4e76:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4e7a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    4e7e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4e80:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4e82:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4e86:	d518      	bpl.n	4eba <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    4e88:	4659      	mov	r1, fp
    4e8a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4e8c:	fa5f fa82 	uxtb.w	sl, r2
    4e90:	f7ff fd3a 	bl	4908 <call_handler>
    4e94:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4e98:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4e9c:	459a      	cmp	sl, r3
    4e9e:	d107      	bne.n	4eb0 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ea0:	2100      	movs	r1, #0
    4ea2:	4620      	mov	r0, r4
    4ea4:	f002 fadf 	bl	7466 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4ea8:	4651      	mov	r1, sl
    4eaa:	4620      	mov	r0, r4
    4eac:	f002 fadb 	bl	7466 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4eb0:	fa08 f404 	lsl.w	r4, r8, r4
    4eb4:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    4eb8:	e7b8      	b.n	4e2c <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4eba:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4ebc:	bf0c      	ite	eq
    4ebe:	2103      	moveq	r1, #3
    4ec0:	2102      	movne	r1, #2
    4ec2:	4620      	mov	r0, r4
    4ec4:	f002 facf 	bl	7466 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4ec8:	f1ba 0f03 	cmp.w	sl, #3
    4ecc:	d004      	beq.n	4ed8 <nrfx_gpiote_irq_handler+0xf4>
    4ece:	2a02      	cmp	r2, #2
    4ed0:	d107      	bne.n	4ee2 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4ed2:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4ed6:	d1eb      	bne.n	4eb0 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    4ed8:	4659      	mov	r1, fp
    4eda:	4620      	mov	r0, r4
    4edc:	f7ff fd14 	bl	4908 <call_handler>
    4ee0:	e7e6      	b.n	4eb0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4ee2:	2a03      	cmp	r2, #3
    4ee4:	d1e4      	bne.n	4eb0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4ee6:	f1ba 0f02 	cmp.w	sl, #2
    4eea:	e7f4      	b.n	4ed6 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    4eec:	fa95 f3a5 	rbit	r3, r5
    4ef0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4ef4:	fa04 f203 	lsl.w	r2, r4, r3
    4ef8:	009b      	lsls	r3, r3, #2
    4efa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4efe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4f02:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4f06:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4f0a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4f0e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4f12:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4f16:	f7ff fcf7 	bl	4908 <call_handler>
    while (mask)
    4f1a:	2d00      	cmp	r5, #0
    4f1c:	d1e6      	bne.n	4eec <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4f1e:	b003      	add	sp, #12
    4f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f24:	40006100 	.word	0x40006100
    4f28:	40006000 	.word	0x40006000
    4f2c:	40006120 	.word	0x40006120
    4f30:	20000154 	.word	0x20000154

00004f34 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4f34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4f36:	4801      	ldr	r0, [pc, #4]	; (4f3c <nrfx_ppi_channel_alloc+0x8>)
    4f38:	f7ff bba4 	b.w	4684 <nrfx_flag32_alloc>
    4f3c:	200001b0 	.word	0x200001b0

00004f40 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
    4f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    4f42:	7906      	ldrb	r6, [r0, #4]
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    4f44:	4d4d      	ldr	r5, [pc, #308]	; (507c <nrfx_spi_init+0x13c>)
    4f46:	2728      	movs	r7, #40	; 0x28
    4f48:	4377      	muls	r7, r6
    4f4a:	19ec      	adds	r4, r5, r7
    4f4c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    4f50:	f1bc 0f00 	cmp.w	ip, #0
    4f54:	f040 808f 	bne.w	5076 <nrfx_spi_init+0x136>
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    4f58:	6800      	ldr	r0, [r0, #0]
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    p_cb->p_context = p_context;

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4f5a:	f891 c00f 	ldrb.w	ip, [r1, #15]
    p_cb->handler = handler;
    4f5e:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    4f60:	6063      	str	r3, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    4f62:	f884 c025 	strb.w	ip, [r4, #37]	; 0x25
    p_cb->ss_pin = p_config->ss_pin;
    4f66:	78cb      	ldrb	r3, [r1, #3]
    4f68:	77a3      	strb	r3, [r4, #30]
    p_cb->orc = p_config->orc;
    4f6a:	794f      	ldrb	r7, [r1, #5]
    4f6c:	77e7      	strb	r7, [r4, #31]
                           p_config->mode <= NRF_SPI_MODE_1 ? 0 : 1);
    4f6e:	7b0f      	ldrb	r7, [r1, #12]
    if (!p_config->skip_gpio_cfg)
    4f70:	f1bc 0f00 	cmp.w	ip, #0
    4f74:	d141      	bne.n	4ffa <nrfx_spi_init+0xba>
    *p_pin = pin_number & 0x1F;
    4f76:	780c      	ldrb	r4, [r1, #0]
    4f78:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    4f7c:	f004 041f 	and.w	r4, r4, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4f80:	f04f 0e01 	mov.w	lr, #1
    4f84:	fa0e fe04 	lsl.w	lr, lr, r4
    if (value == 0)
    4f88:	2f01      	cmp	r7, #1
    reg->PIN_CNF[pin_number] = cnf;
    4f8a:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    4f8e:	bf94      	ite	ls
    4f90:	f8cc e50c 	strls.w	lr, [ip, #1292]	; 0x50c
    p_reg->OUTSET = set_mask;
    4f94:	f8cc e508 	strhi.w	lr, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4f98:	f04f 0e01 	mov.w	lr, #1
    4f9c:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
        if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4fa0:	784c      	ldrb	r4, [r1, #1]
    4fa2:	2cff      	cmp	r4, #255	; 0xff
    4fa4:	d00b      	beq.n	4fbe <nrfx_spi_init+0x7e>
    *p_pin = pin_number & 0x1F;
    4fa6:	f004 041f 	and.w	r4, r4, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4faa:	fa0e fe04 	lsl.w	lr, lr, r4
    reg->PIN_CNF[pin_number] = cnf;
    4fae:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    4fb2:	f8cc e50c 	str.w	lr, [ip, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    4fb6:	f04f 0e03 	mov.w	lr, #3
    4fba:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
        if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    4fbe:	788c      	ldrb	r4, [r1, #2]
    4fc0:	2cff      	cmp	r4, #255	; 0xff
    4fc2:	d00b      	beq.n	4fdc <nrfx_spi_init+0x9c>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4fc4:	f891 c00e 	ldrb.w	ip, [r1, #14]
    *p_pin = pin_number & 0x1F;
    4fc8:	f004 041f 	and.w	r4, r4, #31
    reg->PIN_CNF[pin_number] = cnf;
    4fcc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    4fd0:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4fd4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    4fd8:	f84e c024 	str.w	ip, [lr, r4, lsl #2]
        if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
    4fdc:	2bff      	cmp	r3, #255	; 0xff
    4fde:	d00c      	beq.n	4ffa <nrfx_spi_init+0xba>
    *p_pin = pin_number & 0x1F;
    4fe0:	f003 031f 	and.w	r3, r3, #31
    p_reg->OUTSET = set_mask;
    4fe4:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4fe8:	2401      	movs	r4, #1
    4fea:	409c      	lsls	r4, r3
    reg->PIN_CNF[pin_number] = cnf;
    4fec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTSET = set_mask;
    4ff0:	f8cc 4508 	str.w	r4, [ip, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    4ff4:	2403      	movs	r4, #3
    4ff6:	f84c 4023 	str.w	r4, [ip, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    4ffa:	7c0b      	ldrb	r3, [r1, #16]
    4ffc:	b99b      	cbnz	r3, 5026 <nrfx_spi_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
    4ffe:	784b      	ldrb	r3, [r1, #1]
        nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
    5000:	f891 c000 	ldrb.w	ip, [r1]
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5004:	2bff      	cmp	r3, #255	; 0xff
    5006:	bf18      	it	ne
    5008:	461c      	movne	r4, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
    500a:	788b      	ldrb	r3, [r1, #2]
                                        uint32_t       miso_pin)
{
#if defined(SPI_PSEL_SCK_CONNECT_Pos)
    p_reg->PSEL.SCK = sck_pin;
#else
    p_reg->PSELSCK  = sck_pin;
    500c:	f8c0 c508 	str.w	ip, [r0, #1288]	; 0x508
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5010:	bf08      	it	eq
    5012:	f04f 34ff 	moveq.w	r4, #4294967295
                            : NRF_SPI_PIN_NOT_CONNECTED;
    5016:	2bff      	cmp	r3, #255	; 0xff
    5018:	bf08      	it	eq
    501a:	f04f 33ff 	moveq.w	r3, #4294967295
#endif

#if defined(SPI_PSEL_MOSI_CONNECT_Pos)
    p_reg->PSEL.MOSI = mosi_pin;
#else
    p_reg->PSELMOSI = mosi_pin;
    501e:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
#endif

#if defined(SPI_PSEL_MISO_CONNECT_Pos)
    p_reg->PSEL.MISO = miso_pin;
#else
    p_reg->PSELMISO = miso_pin;
    5022:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
}

NRF_STATIC_INLINE void nrf_spi_frequency_set(NRF_SPI_Type *      p_reg,
                                             nrf_spi_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    5026:	688b      	ldr	r3, [r1, #8]
    5028:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spi_configure(NRF_SPI_Type *      p_reg,
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    502c:	7b4b      	ldrb	r3, [r1, #13]
    502e:	3b00      	subs	r3, #0
    5030:	bf18      	it	ne
    5032:	2301      	movne	r3, #1
    switch (spi_mode)
    5034:	2f02      	cmp	r7, #2
    5036:	d018      	beq.n	506a <nrfx_spi_init+0x12a>
    5038:	2f03      	cmp	r7, #3
    503a:	d019      	beq.n	5070 <nrfx_spi_init+0x130>
    503c:	2f01      	cmp	r7, #1
    503e:	d101      	bne.n	5044 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
    5040:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    5044:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    5048:	2301      	movs	r3, #1
    504a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
    504e:	b11a      	cbz	r2, 5058 <nrfx_spi_init+0x118>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    5050:	f340 3007 	sbfx	r0, r0, #12, #8
    5054:	f7fd f90e 	bl	2274 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    5058:	2328      	movs	r3, #40	; 0x28
    505a:	fb03 5506 	mla	r5, r3, r6, r5
    505e:	2300      	movs	r3, #0
    5060:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5062:	4807      	ldr	r0, [pc, #28]	; (5080 <nrfx_spi_init+0x140>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5064:	2301      	movs	r3, #1
    5066:	772b      	strb	r3, [r5, #28]
}
    5068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    506a:	f043 0304 	orr.w	r3, r3, #4
        break;
    506e:	e7e9      	b.n	5044 <nrfx_spi_init+0x104>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
    5070:	f043 0306 	orr.w	r3, r3, #6
        break;
    5074:	e7e6      	b.n	5044 <nrfx_spi_init+0x104>
        return err_code;
    5076:	4803      	ldr	r0, [pc, #12]	; (5084 <nrfx_spi_init+0x144>)
    5078:	e7f6      	b.n	5068 <nrfx_spi_init+0x128>
    507a:	bf00      	nop
    507c:	20000934 	.word	0x20000934
    5080:	0bad0000 	.word	0x0bad0000
    5084:	0bad0005 	.word	0x0bad0005

00005088 <nrfx_spi_uninit>:

void nrfx_spi_uninit(nrfx_spi_t const * p_instance)
{
    5088:	b570      	push	{r4, r5, r6, lr}
    spi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    508a:	7906      	ldrb	r6, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPI_Type * p_spi = p_instance->p_reg;

    if (p_cb->handler)
    508c:	4c26      	ldr	r4, [pc, #152]	; (5128 <nrfx_spi_uninit+0xa0>)
    NRF_SPI_Type * p_spi = p_instance->p_reg;
    508e:	6805      	ldr	r5, [r0, #0]
    if (p_cb->handler)
    5090:	2328      	movs	r3, #40	; 0x28
    5092:	4373      	muls	r3, r6
    5094:	58e3      	ldr	r3, [r4, r3]
    5096:	b133      	cbz	r3, 50a6 <nrfx_spi_uninit+0x1e>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    5098:	f345 3007 	sbfx	r0, r5, #12, #8
    509c:	f7fd f8fa 	bl	2294 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    50a0:	2304      	movs	r3, #4
    50a2:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Disabled << SPI_ENABLE_ENABLE_Pos);
    50a6:	2300      	movs	r3, #0
    50a8:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        nrf_spi_int_disable(p_spi, NRF_SPI_ALL_INTS_MASK);
    }

    nrf_spi_disable(p_spi);

    if (!p_cb->skip_gpio_cfg)
    50ac:	2328      	movs	r3, #40	; 0x28
    50ae:	fb03 4306 	mla	r3, r3, r6, r4
    50b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    50b6:	bb83      	cbnz	r3, 511a <nrfx_spi_uninit+0x92>
    return p_reg->PSELSCK;
    50b8:	f8d5 3508 	ldr.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    50bc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    50c0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50c4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    50c8:	2102      	movs	r1, #2
    50ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMISO;
    50ce:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    {
        nrf_gpio_cfg_default(nrf_spi_sck_pin_get(p_spi));

        uint32_t miso_pin = nrf_spi_miso_pin_get(p_spi);
        if (miso_pin != NRF_SPI_PIN_NOT_CONNECTED)
    50d2:	1c58      	adds	r0, r3, #1
    *p_pin = pin_number & 0x1F;
    50d4:	bf1e      	ittt	ne
    50d6:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    50da:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    50de:	f842 1023 	strne.w	r1, [r2, r3, lsl #2]
    return p_reg->PSELMOSI;
    50e2:	f8d5 350c 	ldr.w	r3, [r5, #1292]	; 0x50c
        {
            nrf_gpio_cfg_default(miso_pin);
        }

        uint32_t mosi_pin = nrf_spi_mosi_pin_get(p_spi);
        if (mosi_pin != NRF_SPI_PIN_NOT_CONNECTED)
    50e6:	1c5a      	adds	r2, r3, #1
    50e8:	d008      	beq.n	50fc <nrfx_spi_uninit+0x74>
    *p_pin = pin_number & 0x1F;
    50ea:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    50ee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    50f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    50f6:	2102      	movs	r1, #2
    50f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        {
            nrf_gpio_cfg_default(mosi_pin);
        }

        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    50fc:	2328      	movs	r3, #40	; 0x28
    50fe:	fb03 4306 	mla	r3, r3, r6, r4
    5102:	7f9b      	ldrb	r3, [r3, #30]
    5104:	2bff      	cmp	r3, #255	; 0xff
    5106:	d008      	beq.n	511a <nrfx_spi_uninit+0x92>
    *p_pin = pin_number & 0x1F;
    5108:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    510c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5110:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5114:	2102      	movs	r1, #2
    5116:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    511a:	2328      	movs	r3, #40	; 0x28
    511c:	fb03 4406 	mla	r4, r3, r6, r4
    5120:	2300      	movs	r3, #0
    5122:	7723      	strb	r3, [r4, #28]
}
    5124:	bd70      	pop	{r4, r5, r6, pc}
    5126:	bf00      	nop
    5128:	20000934 	.word	0x20000934

0000512c <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    512c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5130:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    5132:	4d41      	ldr	r5, [pc, #260]	; (5238 <nrfx_spi_xfer+0x10c>)
    5134:	2328      	movs	r3, #40	; 0x28
    5136:	437b      	muls	r3, r7
{
    5138:	4694      	mov	ip, r2
    if (p_cb->transfer_in_progress)
    513a:	18ea      	adds	r2, r5, r3
{
    513c:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
    513e:	7f51      	ldrb	r1, [r2, #29]
{
    5140:	4686      	mov	lr, r0
    if (p_cb->transfer_in_progress)
    5142:	2900      	cmp	r1, #0
    5144:	d175      	bne.n	5232 <nrfx_spi_xfer+0x106>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
    5146:	f855 8003 	ldr.w	r8, [r5, r3]
    514a:	f1b8 0f00 	cmp.w	r8, #0
    514e:	d001      	beq.n	5154 <nrfx_spi_xfer+0x28>
        {
            p_cb->transfer_in_progress = true;
    5150:	2301      	movs	r3, #1
    5152:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    5154:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    5158:	2428      	movs	r4, #40	; 0x28
    515a:	fb04 5407 	mla	r4, r4, r7, r5
    515e:	f104 090c 	add.w	r9, r4, #12
    5162:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
    p_cb->abort = false;
    5166:	2300      	movs	r3, #0
    5168:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    516c:	7fa3      	ldrb	r3, [r4, #30]
    516e:	2bff      	cmp	r3, #255	; 0xff
    5170:	d008      	beq.n	5184 <nrfx_spi_xfer+0x58>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5172:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    5174:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5178:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTCLR = clr_mask;
    517c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5180:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    {
        nrf_gpio_pin_write(p_cb->ss_pin, 0);
    }
    if (flags)
    5184:	2328      	movs	r3, #40	; 0x28
    5186:	f1bc 0f00 	cmp.w	ip, #0
    518a:	d006      	beq.n	519a <nrfx_spi_xfer+0x6e>
    {
        p_cb->transfer_in_progress = false;
    518c:	fb03 5507 	mla	r5, r3, r7, r5
        err_code = NRFX_ERROR_NOT_SUPPORTED;
    5190:	482a      	ldr	r0, [pc, #168]	; (523c <nrfx_spi_xfer+0x110>)
        p_cb->transfer_in_progress = false;
    5192:	2300      	movs	r3, #0
    5194:	776b      	strb	r3, [r5, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5196:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
    519a:	f8de 4000 	ldr.w	r4, [lr]
    p_cb->bytes_transferred = 0;
    519e:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->INTENCLR = mask;
    51a2:	2204      	movs	r2, #4
    51a4:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    51a8:	f8c3 c020 	str.w	ip, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51ac:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
    51b0:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
    51b4:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
    51b6:	b18a      	cbz	r2, 51dc <nrfx_spi_xfer+0xb0>
    51b8:	6833      	ldr	r3, [r6, #0]
    51ba:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
    51bc:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
    51c0:	2a01      	cmp	r2, #1
    51c2:	d90d      	bls.n	51e0 <nrfx_spi_xfer+0xb4>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
    51c4:	6833      	ldr	r3, [r6, #0]
    51c6:	785b      	ldrb	r3, [r3, #1]
    51c8:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    if (p_cb->handler)
    51cc:	f1b8 0f00 	cmp.w	r8, #0
    51d0:	d00e      	beq.n	51f0 <nrfx_spi_xfer+0xc4>
    p_reg->INTENSET = mask;
    51d2:	2304      	movs	r3, #4
    51d4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
    51d8:	4819      	ldr	r0, [pc, #100]	; (5240 <nrfx_spi_xfer+0x114>)
    51da:	e7dc      	b.n	5196 <nrfx_spi_xfer+0x6a>
    nrf_spi_txd_set(p_spi,
    51dc:	7fdb      	ldrb	r3, [r3, #31]
    51de:	e7ed      	b.n	51bc <nrfx_spi_xfer+0x90>
    else if (p_xfer_desc->rx_length > 1)
    51e0:	68f3      	ldr	r3, [r6, #12]
    51e2:	2b01      	cmp	r3, #1
    51e4:	d9f2      	bls.n	51cc <nrfx_spi_xfer+0xa0>
        nrf_spi_txd_set(p_spi, p_cb->orc);
    51e6:	2328      	movs	r3, #40	; 0x28
    51e8:	fb03 5307 	mla	r3, r3, r7, r5
    p_reg->TXD = data;
    51ec:	7fdb      	ldrb	r3, [r3, #31]
    51ee:	e7eb      	b.n	51c8 <nrfx_spi_xfer+0x9c>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    51f0:	eb07 0187 	add.w	r1, r7, r7, lsl #2
    51f4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    51f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
    51fc:	2b00      	cmp	r3, #0
    51fe:	d0fb      	beq.n	51f8 <nrfx_spi_xfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5200:	f8c4 8108 	str.w	r8, [r4, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
    5204:	4620      	mov	r0, r4
    5206:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    520a:	f002 f93a 	bl	7482 <transfer_byte>
    520e:	2800      	cmp	r0, #0
    5210:	d1f2      	bne.n	51f8 <nrfx_spi_xfer+0xcc>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    5212:	2328      	movs	r3, #40	; 0x28
    5214:	fb03 5507 	mla	r5, r3, r7, r5
    5218:	7fab      	ldrb	r3, [r5, #30]
    521a:	2bff      	cmp	r3, #255	; 0xff
    521c:	d0dc      	beq.n	51d8 <nrfx_spi_xfer+0xac>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    521e:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    5220:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    5224:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    5228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    522c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    5230:	e7d2      	b.n	51d8 <nrfx_spi_xfer+0xac>
        return err_code;
    5232:	4804      	ldr	r0, [pc, #16]	; (5244 <nrfx_spi_xfer+0x118>)
    5234:	e7af      	b.n	5196 <nrfx_spi_xfer+0x6a>
    5236:	bf00      	nop
    5238:	20000934 	.word	0x20000934
    523c:	0bad0003 	.word	0x0bad0003
    5240:	0bad0000 	.word	0x0bad0000
    5244:	0bad000b 	.word	0x0bad000b

00005248 <nrfx_spi_0_irq_handler>:
}

#if NRFX_CHECK(NRFX_SPI0_ENABLED)
void nrfx_spi_0_irq_handler(void)
{
    irq_handler(NRF_SPI0, &m_cb[NRFX_SPI0_INST_IDX]);
    5248:	4901      	ldr	r1, [pc, #4]	; (5250 <nrfx_spi_0_irq_handler+0x8>)
    524a:	4802      	ldr	r0, [pc, #8]	; (5254 <nrfx_spi_0_irq_handler+0xc>)
    524c:	f002 b94c 	b.w	74e8 <irq_handler>
    5250:	20000934 	.word	0x20000934
    5254:	40003000 	.word	0x40003000

00005258 <nrfx_spi_1_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI1_ENABLED)
void nrfx_spi_1_irq_handler(void)
{
    irq_handler(NRF_SPI1, &m_cb[NRFX_SPI1_INST_IDX]);
    5258:	4902      	ldr	r1, [pc, #8]	; (5264 <nrfx_spi_1_irq_handler+0xc>)
    525a:	f04f 2040 	mov.w	r0, #1073758208	; 0x40004000
    525e:	f002 b943 	b.w	74e8 <irq_handler>
    5262:	bf00      	nop
    5264:	2000095c 	.word	0x2000095c

00005268 <nrfx_spi_2_irq_handler>:
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
    5268:	4901      	ldr	r1, [pc, #4]	; (5270 <nrfx_spi_2_irq_handler+0x8>)
    526a:	4802      	ldr	r0, [pc, #8]	; (5274 <nrfx_spi_2_irq_handler+0xc>)
    526c:	f002 b93c 	b.w	74e8 <irq_handler>
    5270:	20000984 	.word	0x20000984
    5274:	40023000 	.word	0x40023000

00005278 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5278:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    527a:	4c11      	ldr	r4, [pc, #68]	; (52c0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    527c:	4a11      	ldr	r2, [pc, #68]	; (52c4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    527e:	4912      	ldr	r1, [pc, #72]	; (52c8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5280:	2303      	movs	r3, #3
    5282:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5284:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5286:	4b11      	ldr	r3, [pc, #68]	; (52cc <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    5288:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    528a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5290:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5292:	2300      	movs	r3, #0
    5294:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5296:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5298:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    529a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    529c:	4a0c      	ldr	r2, [pc, #48]	; (52d0 <_DoInit+0x58>)
    529e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    52a0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    52a2:	2210      	movs	r2, #16
    52a4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    52a6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    52a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    52aa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    52ac:	f001 fd6f 	bl	6d8e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    52b0:	4908      	ldr	r1, [pc, #32]	; (52d4 <_DoInit+0x5c>)
    52b2:	4620      	mov	r0, r4
    52b4:	f001 fd6b 	bl	6d8e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    52b8:	2320      	movs	r3, #32
    52ba:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    52bc:	bd10      	pop	{r4, pc}
    52be:	bf00      	nop
    52c0:	200009ac 	.word	0x200009ac
    52c4:	000086ee 	.word	0x000086ee
    52c8:	000086f7 	.word	0x000086f7
    52cc:	20000aba 	.word	0x20000aba
    52d0:	20000aaa 	.word	0x20000aaa
    52d4:	000086fb 	.word	0x000086fb

000052d8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    52d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    52dc:	4f23      	ldr	r7, [pc, #140]	; (536c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    52de:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    52e2:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    52e4:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    52e8:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    52ea:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    52ec:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    52ee:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    52f0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    52f2:	d834      	bhi.n	535e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    52f4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    52f8:	ebaa 0905 	sub.w	r9, sl, r5
    52fc:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    5300:	4294      	cmp	r4, r2
    5302:	d811      	bhi.n	5328 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5304:	f04f 0918 	mov.w	r9, #24
    5308:	fb06 9309 	mla	r3, r6, r9, r9
    530c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    530e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5310:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5312:	4641      	mov	r1, r8
    5314:	4428      	add	r0, r5
    5316:	f001 fd54 	bl	6dc2 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    531a:	fb09 7606 	mla	r6, r9, r6, r7
    531e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    5320:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    5322:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5328:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    532a:	429c      	cmp	r4, r3
    532c:	d81b      	bhi.n	5366 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    532e:	fb00 bb0b 	mla	fp, r0, fp, fp
    5332:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5334:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5336:	f8db 0004 	ldr.w	r0, [fp, #4]
    533a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    533c:	4428      	add	r0, r5
    533e:	f001 fd40 	bl	6dc2 <memcpy>
      if (NumBytes) {
    5342:	ebb4 040a 	subs.w	r4, r4, sl
    5346:	d006      	beq.n	5356 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5348:	f8db 0004 	ldr.w	r0, [fp, #4]
    534c:	4622      	mov	r2, r4
    534e:	eb08 0109 	add.w	r1, r8, r9
    5352:	f001 fd36 	bl	6dc2 <memcpy>
      pRing->WrOff = NumBytes;
    5356:	2018      	movs	r0, #24
    5358:	fb00 7606 	mla	r6, r0, r6, r7
    535c:	e7e0      	b.n	5320 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    535e:	3b01      	subs	r3, #1
    5360:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5362:	42a3      	cmp	r3, r4
    5364:	d2ce      	bcs.n	5304 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5366:	2000      	movs	r0, #0
    5368:	e7dc      	b.n	5324 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    536a:	bf00      	nop
    536c:	200009ac 	.word	0x200009ac

00005370 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5370:	4b03      	ldr	r3, [pc, #12]	; (5380 <SEGGER_RTT_HasDataUp+0x10>)
    5372:	2218      	movs	r2, #24
    5374:	fb02 3300 	mla	r3, r2, r0, r3
    5378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    537a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    537c:	1a80      	subs	r0, r0, r2
    537e:	4770      	bx	lr
    5380:	200009ac 	.word	0x200009ac

00005384 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5384:	4b0e      	ldr	r3, [pc, #56]	; (53c0 <z_sys_init_run_level+0x3c>)
{
    5386:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5388:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    538c:	3001      	adds	r0, #1
    538e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5392:	42a6      	cmp	r6, r4
    5394:	d800      	bhi.n	5398 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5396:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5398:	e9d4 3500 	ldrd	r3, r5, [r4]
    539c:	4628      	mov	r0, r5
    539e:	4798      	blx	r3
		if (dev != NULL) {
    53a0:	b165      	cbz	r5, 53bc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    53a2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    53a4:	b130      	cbz	r0, 53b4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    53a6:	2800      	cmp	r0, #0
    53a8:	bfb8      	it	lt
    53aa:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    53ac:	28ff      	cmp	r0, #255	; 0xff
    53ae:	bfa8      	it	ge
    53b0:	20ff      	movge	r0, #255	; 0xff
    53b2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    53b4:	785a      	ldrb	r2, [r3, #1]
    53b6:	f042 0201 	orr.w	r2, r2, #1
    53ba:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    53bc:	3408      	adds	r4, #8
    53be:	e7e8      	b.n	5392 <z_sys_init_run_level+0xe>
    53c0:	00007dcc 	.word	0x00007dcc

000053c4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    53c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    53c8:	b086      	sub	sp, #24
    53ca:	4605      	mov	r5, r0
    53cc:	af00      	add	r7, sp, #0
    53ce:	460e      	mov	r6, r1
	__asm__ volatile(
    53d0:	f04f 0320 	mov.w	r3, #32
    53d4:	f3ef 8811 	mrs	r8, BASEPRI
    53d8:	f383 8812 	msr	BASEPRI_MAX, r3
    53dc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    53e0:	f000 fe24 	bl	602c <z_impl_z_current_get>
    53e4:	2d04      	cmp	r5, #4
    53e6:	bf96      	itet	ls
    53e8:	4b2c      	ldrls	r3, [pc, #176]	; (549c <z_fatal_error+0xd8>)
    53ea:	4b2d      	ldrhi	r3, [pc, #180]	; (54a0 <z_fatal_error+0xdc>)
    53ec:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    53f0:	492c      	ldr	r1, [pc, #176]	; (54a4 <z_fatal_error+0xe0>)
    53f2:	46e9      	mov	r9, sp
    53f4:	b08a      	sub	sp, #40	; 0x28
    53f6:	466a      	mov	r2, sp
    53f8:	f04f 0a00 	mov.w	sl, #0
    53fc:	61d3      	str	r3, [r2, #28]
    53fe:	2303      	movs	r3, #3
    5400:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5404:	4b28      	ldr	r3, [pc, #160]	; (54a8 <z_fatal_error+0xe4>)
    5406:	f8c2 a020 	str.w	sl, [r2, #32]
    540a:	e9c2 1505 	strd	r1, r5, [r2, #20]
    540e:	4604      	mov	r4, r0
    5410:	f842 3f10 	str.w	r3, [r2, #16]!
    5414:	4825      	ldr	r0, [pc, #148]	; (54ac <z_fatal_error+0xe8>)
    5416:	4653      	mov	r3, sl
    5418:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    541c:	f001 fc60 	bl	6ce0 <z_impl_z_log_msg2_static_create>
    5420:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5422:	b17e      	cbz	r6, 5444 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5424:	69f3      	ldr	r3, [r6, #28]
    5426:	f3c3 0308 	ubfx	r3, r3, #0, #9
    542a:	b15b      	cbz	r3, 5444 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    542c:	4b20      	ldr	r3, [pc, #128]	; (54b0 <z_fatal_error+0xec>)
    542e:	617b      	str	r3, [r7, #20]
    5430:	2302      	movs	r3, #2
    5432:	613b      	str	r3, [r7, #16]
    5434:	481d      	ldr	r0, [pc, #116]	; (54ac <z_fatal_error+0xe8>)
    5436:	4653      	mov	r3, sl
    5438:	f107 0210 	add.w	r2, r7, #16
    543c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5440:	f001 fc4e 	bl	6ce0 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5444:	b12c      	cbz	r4, 5452 <z_fatal_error+0x8e>
    5446:	4620      	mov	r0, r4
    5448:	f002 f88f 	bl	756a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    544c:	b108      	cbz	r0, 5452 <z_fatal_error+0x8e>
    544e:	7803      	ldrb	r3, [r0, #0]
    5450:	b903      	cbnz	r3, 5454 <z_fatal_error+0x90>
		thread_name = "unknown";
    5452:	4818      	ldr	r0, [pc, #96]	; (54b4 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5454:	4b18      	ldr	r3, [pc, #96]	; (54b8 <z_fatal_error+0xf4>)
    5456:	46e9      	mov	r9, sp
    5458:	b08a      	sub	sp, #40	; 0x28
    545a:	466a      	mov	r2, sp
    545c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5460:	2303      	movs	r3, #3
    5462:	f882 3020 	strb.w	r3, [r2, #32]
    5466:	4b15      	ldr	r3, [pc, #84]	; (54bc <z_fatal_error+0xf8>)
    5468:	61d0      	str	r0, [r2, #28]
    546a:	f842 3f10 	str.w	r3, [r2, #16]!
    546e:	2300      	movs	r3, #0
    5470:	480e      	ldr	r0, [pc, #56]	; (54ac <z_fatal_error+0xe8>)
    5472:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    5476:	f001 fc33 	bl	6ce0 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    547a:	4631      	mov	r1, r6
    547c:	46cd      	mov	sp, r9
    547e:	4628      	mov	r0, r5
    5480:	f7fe ff8a 	bl	4398 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5484:	f388 8811 	msr	BASEPRI, r8
    5488:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    548c:	4620      	mov	r0, r4
    548e:	f7fd fb87 	bl	2ba0 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5492:	3718      	adds	r7, #24
    5494:	46bd      	mov	sp, r7
    5496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    549a:	bf00      	nop
    549c:	00007de4 	.word	0x00007de4
    54a0:	00008702 	.word	0x00008702
    54a4:	00008718 	.word	0x00008718
    54a8:	01000005 	.word	0x01000005
    54ac:	00007a9c 	.word	0x00007a9c
    54b0:	00008740 	.word	0x00008740
    54b4:	00008710 	.word	0x00008710
    54b8:	00008761 	.word	0x00008761
    54bc:	01000004 	.word	0x01000004

000054c0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    54c0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    54c2:	4b0a      	ldr	r3, [pc, #40]	; (54ec <bg_thread_main+0x2c>)
    54c4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    54c6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    54c8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    54ca:	f7ff ff5b 	bl	5384 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    54ce:	f000 ffef 	bl	64b0 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    54d2:	2003      	movs	r0, #3
    54d4:	f7ff ff56 	bl	5384 <z_sys_init_run_level>

	z_init_static_threads();
    54d8:	f000 f93c 	bl	5754 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    54dc:	f7fa ff6c 	bl	3b8 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    54e0:	4a03      	ldr	r2, [pc, #12]	; (54f0 <bg_thread_main+0x30>)
    54e2:	7b13      	ldrb	r3, [r2, #12]
    54e4:	f023 0301 	bic.w	r3, r3, #1
    54e8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    54ea:	bd08      	pop	{r3, pc}
    54ec:	20000eba 	.word	0x20000eba
    54f0:	20000758 	.word	0x20000758

000054f4 <z_bss_zero>:
{
    54f4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    54f6:	4803      	ldr	r0, [pc, #12]	; (5504 <z_bss_zero+0x10>)
    54f8:	4a03      	ldr	r2, [pc, #12]	; (5508 <z_bss_zero+0x14>)
    54fa:	2100      	movs	r1, #0
    54fc:	1a12      	subs	r2, r2, r0
    54fe:	f002 f827 	bl	7550 <z_early_memset>
}
    5502:	bd08      	pop	{r3, pc}
    5504:	20000200 	.word	0x20000200
    5508:	20000ebc 	.word	0x20000ebc

0000550c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    550c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    550e:	2300      	movs	r3, #0
{
    5510:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5512:	2201      	movs	r2, #1
    5514:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5518:	4e13      	ldr	r6, [pc, #76]	; (5568 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    551a:	4d14      	ldr	r5, [pc, #80]	; (556c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    551c:	9301      	str	r3, [sp, #4]
    551e:	220f      	movs	r2, #15
    5520:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5524:	4912      	ldr	r1, [pc, #72]	; (5570 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5526:	2318      	movs	r3, #24
    5528:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    552c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5530:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5532:	f44f 70b0 	mov.w	r0, #352	; 0x160
    5536:	fb00 1104 	mla	r1, r0, r4, r1
    553a:	4b0e      	ldr	r3, [pc, #56]	; (5574 <z_init_cpu+0x68>)
    553c:	9500      	str	r5, [sp, #0]
    553e:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5542:	4630      	mov	r0, r6
    5544:	f000 f8a8 	bl	5698 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5548:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    554a:	480b      	ldr	r0, [pc, #44]	; (5578 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    554c:	752c      	strb	r4, [r5, #20]
    554e:	f023 0304 	bic.w	r3, r3, #4
    5552:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5554:	f44f 6302 	mov.w	r3, #2080	; 0x820
    5558:	fb03 0404 	mla	r4, r3, r4, r0
    555c:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    555e:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5560:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5562:	b006      	add	sp, #24
    5564:	bd70      	pop	{r4, r5, r6, pc}
    5566:	bf00      	nop
    5568:	200006d8 	.word	0x200006d8
    556c:	20000a54 	.word	0x20000a54
    5570:	20001600 	.word	0x20001600
    5574:	0000580d 	.word	0x0000580d
    5578:	20001760 	.word	0x20001760

0000557c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    557c:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    557e:	4b2e      	ldr	r3, [pc, #184]	; (5638 <z_cstart+0xbc>)
    5580:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5582:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5586:	4d2d      	ldr	r5, [pc, #180]	; (563c <z_cstart+0xc0>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5588:	4e2d      	ldr	r6, [pc, #180]	; (5640 <z_cstart+0xc4>)
    558a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    558c:	4f2d      	ldr	r7, [pc, #180]	; (5644 <z_cstart+0xc8>)
    558e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5592:	2400      	movs	r4, #0
    5594:	616b      	str	r3, [r5, #20]
    5596:	23e0      	movs	r3, #224	; 0xe0
    5598:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    559c:	77ec      	strb	r4, [r5, #31]
    559e:	762c      	strb	r4, [r5, #24]
    55a0:	766c      	strb	r4, [r5, #25]
    55a2:	76ac      	strb	r4, [r5, #26]
    55a4:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    55a8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    55aa:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    55ae:	626b      	str	r3, [r5, #36]	; 0x24
    55b0:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    55b4:	f7fd fa68 	bl	2a88 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    55b8:	f7fc fdd8 	bl	216c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    55bc:	f04f 33ff 	mov.w	r3, #4294967295
    55c0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    55c2:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    55c4:	f7fd fbba 	bl	2d3c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    55c8:	f7fd fb00 	bl	2bcc <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    55cc:	f7fc f834 	bl	1638 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    55d0:	f240 1301 	movw	r3, #257	; 0x101
    55d4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    55d8:	ab06      	add	r3, sp, #24
    55da:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    55dc:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    55e0:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    55e2:	f001 ffaa 	bl	753a <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    55e6:	4620      	mov	r0, r4
    55e8:	f7ff fecc 	bl	5384 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    55ec:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    55ee:	4d16      	ldr	r5, [pc, #88]	; (5648 <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    55f0:	f7ff fec8 	bl	5384 <z_sys_init_run_level>
	z_sched_init();
    55f4:	f000 fc6c 	bl	5ed0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    55f8:	4b14      	ldr	r3, [pc, #80]	; (564c <z_cstart+0xd0>)
	_kernel.ready_q.cache = &z_main_thread;
    55fa:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    55fc:	9305      	str	r3, [sp, #20]
    55fe:	2301      	movs	r3, #1
    5600:	4913      	ldr	r1, [pc, #76]	; (5650 <z_cstart+0xd4>)
    5602:	9400      	str	r4, [sp, #0]
    5604:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5608:	f44f 6280 	mov.w	r2, #1024	; 0x400
    560c:	463b      	mov	r3, r7
    560e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5612:	4628      	mov	r0, r5
    5614:	f000 f840 	bl	5698 <z_setup_new_thread>
    5618:	7b6a      	ldrb	r2, [r5, #13]
    561a:	4606      	mov	r6, r0
    561c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    5620:	4628      	mov	r0, r5
    5622:	736a      	strb	r2, [r5, #13]
    5624:	f001 fffc 	bl	7620 <z_ready_thread>
	z_init_cpu(0);
    5628:	4620      	mov	r0, r4
    562a:	f7ff ff6f 	bl	550c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    562e:	463a      	mov	r2, r7
    5630:	4631      	mov	r1, r6
    5632:	4628      	mov	r0, r5
    5634:	f7fc ff0e 	bl	2454 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5638:	20001f80 	.word	0x20001f80
    563c:	e000ed00 	.word	0xe000ed00
    5640:	20000a54 	.word	0x20000a54
    5644:	000054c1 	.word	0x000054c1
    5648:	20000758 	.word	0x20000758
    564c:	000087c3 	.word	0x000087c3
    5650:	200011e0 	.word	0x200011e0

00005654 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    5654:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5656:	4b0e      	ldr	r3, [pc, #56]	; (5690 <init_mem_slab_module+0x3c>)
    5658:	4c0e      	ldr	r4, [pc, #56]	; (5694 <init_mem_slab_module+0x40>)
    565a:	42a3      	cmp	r3, r4
    565c:	d301      	bcc.n	5662 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    565e:	2000      	movs	r0, #0
	return rc;
}
    5660:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5662:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    5666:	ea41 0200 	orr.w	r2, r1, r0
    566a:	f012 0203 	ands.w	r2, r2, #3
    566e:	d10b      	bne.n	5688 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5670:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5672:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5674:	42aa      	cmp	r2, r5
    5676:	d101      	bne.n	567c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5678:	331c      	adds	r3, #28
    567a:	e7ee      	b.n	565a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    567c:	695e      	ldr	r6, [r3, #20]
    567e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5680:	3201      	adds	r2, #1
		slab->free_list = p;
    5682:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5684:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5686:	e7f5      	b.n	5674 <init_mem_slab_module+0x20>
	return rc;
    5688:	f06f 0015 	mvn.w	r0, #21
    568c:	e7e8      	b.n	5660 <init_mem_slab_module+0xc>
    568e:	bf00      	nop
    5690:	200001d8 	.word	0x200001d8
    5694:	200001d8 	.word	0x200001d8

00005698 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5698:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    569c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    569e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    56a0:	2604      	movs	r6, #4
    56a2:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    56a4:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    56a6:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    56a8:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    56ac:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56ae:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    56b0:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    56b6:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56b8:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    56bc:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    56be:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    56c2:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    56c6:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    56c8:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    56ca:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    56cc:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56d0:	9202      	str	r2, [sp, #8]
    56d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    56d4:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    56d6:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    56da:	9200      	str	r2, [sp, #0]
    56dc:	4642      	mov	r2, r8
{
    56de:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    56e0:	f7fc fe86 	bl	23f0 <arch_new_thread>
	if (!_current) {
    56e4:	4b04      	ldr	r3, [pc, #16]	; (56f8 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    56e6:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    56e8:	689b      	ldr	r3, [r3, #8]
    56ea:	b103      	cbz	r3, 56ee <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    56ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    56ee:	6723      	str	r3, [r4, #112]	; 0x70
}
    56f0:	4640      	mov	r0, r8
    56f2:	b004      	add	sp, #16
    56f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56f8:	20000a54 	.word	0x20000a54

000056fc <z_impl_k_thread_create>:
{
    56fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    56fe:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5700:	2700      	movs	r7, #0
    5702:	9705      	str	r7, [sp, #20]
    5704:	9f10      	ldr	r7, [sp, #64]	; 0x40
    5706:	9704      	str	r7, [sp, #16]
    5708:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    570a:	9703      	str	r7, [sp, #12]
    570c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    570e:	9702      	str	r7, [sp, #8]
{
    5710:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5714:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    5716:	9701      	str	r7, [sp, #4]
    5718:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    571a:	9700      	str	r7, [sp, #0]
{
    571c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    571e:	f7ff ffbb 	bl	5698 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    5722:	f1b5 3fff 	cmp.w	r5, #4294967295
    5726:	bf08      	it	eq
    5728:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    572c:	d005      	beq.n	573a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    572e:	ea55 0306 	orrs.w	r3, r5, r6
    5732:	d105      	bne.n	5740 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    5734:	4620      	mov	r0, r4
    5736:	f000 fac5 	bl	5cc4 <z_sched_start>
}
    573a:	4620      	mov	r0, r4
    573c:	b007      	add	sp, #28
    573e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5740:	4903      	ldr	r1, [pc, #12]	; (5750 <z_impl_k_thread_create+0x54>)
    5742:	4632      	mov	r2, r6
    5744:	462b      	mov	r3, r5
    5746:	f104 0018 	add.w	r0, r4, #24
    574a:	f000 fd2b 	bl	61a4 <z_add_timeout>
    574e:	e7f4      	b.n	573a <z_impl_k_thread_create+0x3e>
    5750:	00007641 	.word	0x00007641

00005754 <z_init_static_threads>:
{
    5754:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5758:	4c29      	ldr	r4, [pc, #164]	; (5800 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    575a:	4d2a      	ldr	r5, [pc, #168]	; (5804 <z_init_static_threads+0xb0>)
{
    575c:	b087      	sub	sp, #28
    575e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    5760:	42ae      	cmp	r6, r5
    5762:	f104 0430 	add.w	r4, r4, #48	; 0x30
    5766:	d30f      	bcc.n	5788 <z_init_static_threads+0x34>
	k_sched_lock();
    5768:	f000 f9c6 	bl	5af8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    576c:	4c24      	ldr	r4, [pc, #144]	; (5800 <z_init_static_threads+0xac>)
    576e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5808 <z_init_static_threads+0xb4>
    5772:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5776:	f240 37e7 	movw	r7, #999	; 0x3e7
    577a:	42ac      	cmp	r4, r5
    577c:	d320      	bcc.n	57c0 <z_init_static_threads+0x6c>
}
    577e:	b007      	add	sp, #28
    5780:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5784:	f000 bb88 	b.w	5e98 <k_sched_unlock>
		z_setup_new_thread(
    5788:	f854 3c04 	ldr.w	r3, [r4, #-4]
    578c:	9305      	str	r3, [sp, #20]
    578e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5792:	9304      	str	r3, [sp, #16]
    5794:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5798:	9303      	str	r3, [sp, #12]
    579a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    579e:	9302      	str	r3, [sp, #8]
    57a0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    57a4:	9301      	str	r3, [sp, #4]
    57a6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    57aa:	9300      	str	r3, [sp, #0]
    57ac:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    57b0:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    57b4:	f7ff ff70 	bl	5698 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    57b8:	f854 3c30 	ldr.w	r3, [r4, #-48]
    57bc:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    57be:	e7ce      	b.n	575e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    57c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    57c2:	1c5a      	adds	r2, r3, #1
    57c4:	d00d      	beq.n	57e2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    57c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    57ca:	2100      	movs	r1, #0
    57cc:	4638      	mov	r0, r7
    57ce:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    57d2:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    57d6:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    57da:	d104      	bne.n	57e6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    57dc:	4640      	mov	r0, r8
    57de:	f000 fa71 	bl	5cc4 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    57e2:	3430      	adds	r4, #48	; 0x30
    57e4:	e7c9      	b.n	577a <z_init_static_threads+0x26>
    57e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    57ea:	2300      	movs	r3, #0
    57ec:	f7fa fc76 	bl	dc <__aeabi_uldivmod>
    57f0:	4602      	mov	r2, r0
    57f2:	460b      	mov	r3, r1
    57f4:	f108 0018 	add.w	r0, r8, #24
    57f8:	4649      	mov	r1, r9
    57fa:	f000 fcd3 	bl	61a4 <z_add_timeout>
    57fe:	e7f0      	b.n	57e2 <z_init_static_threads+0x8e>
    5800:	200001d8 	.word	0x200001d8
    5804:	200001d8 	.word	0x200001d8
    5808:	00007641 	.word	0x00007641

0000580c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    580c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    580e:	4c0b      	ldr	r4, [pc, #44]	; (583c <idle+0x30>)
	return !z_sys_post_kernel;
    5810:	4d0b      	ldr	r5, [pc, #44]	; (5840 <idle+0x34>)
	__asm__ volatile(
    5812:	f04f 0220 	mov.w	r2, #32
    5816:	f3ef 8311 	mrs	r3, BASEPRI
    581a:	f382 8812 	msr	BASEPRI_MAX, r2
    581e:	f3bf 8f6f 	isb	sy
    5822:	f001 ff9c 	bl	775e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    5826:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    5828:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    582a:	b913      	cbnz	r3, 5832 <idle+0x26>
	arch_cpu_idle();
    582c:	f7fc fca4 	bl	2178 <arch_cpu_idle>
}
    5830:	e7ef      	b.n	5812 <idle+0x6>
    5832:	f7fc fbc1 	bl	1fb8 <pm_system_suspend>
    5836:	2800      	cmp	r0, #0
    5838:	d1eb      	bne.n	5812 <idle+0x6>
    583a:	e7f7      	b.n	582c <idle+0x20>
    583c:	20000a54 	.word	0x20000a54
    5840:	20000eba 	.word	0x20000eba

00005844 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5844:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5848:	4604      	mov	r4, r0
    584a:	4617      	mov	r7, r2
    584c:	461e      	mov	r6, r3
    584e:	f04f 0320 	mov.w	r3, #32
    5852:	f3ef 8811 	mrs	r8, BASEPRI
    5856:	f383 8812 	msr	BASEPRI_MAX, r3
    585a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    585e:	68c3      	ldr	r3, [r0, #12]
    5860:	4a32      	ldr	r2, [pc, #200]	; (592c <z_impl_k_mutex_lock+0xe8>)
    5862:	b16b      	cbz	r3, 5880 <z_impl_k_mutex_lock+0x3c>
    5864:	6880      	ldr	r0, [r0, #8]
    5866:	6891      	ldr	r1, [r2, #8]
    5868:	4288      	cmp	r0, r1
    586a:	d019      	beq.n	58a0 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    586c:	ea57 0306 	orrs.w	r3, r7, r6
    5870:	d118      	bne.n	58a4 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5872:	f388 8811 	msr	BASEPRI, r8
    5876:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    587a:	f06f 000f 	mvn.w	r0, #15
    587e:	e00c      	b.n	589a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5880:	6891      	ldr	r1, [r2, #8]
    5882:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5886:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5888:	3301      	adds	r3, #1
    588a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    588c:	6893      	ldr	r3, [r2, #8]
    588e:	60a3      	str	r3, [r4, #8]
    5890:	f388 8811 	msr	BASEPRI, r8
    5894:	f3bf 8f6f 	isb	sy
		return 0;
    5898:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    589a:	b002      	add	sp, #8
    589c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    58a0:	6921      	ldr	r1, [r4, #16]
    58a2:	e7f0      	b.n	5886 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    58a4:	f991 100e 	ldrsb.w	r1, [r1, #14]
    58a8:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    58ac:	4299      	cmp	r1, r3
    58ae:	bfa8      	it	ge
    58b0:	4619      	movge	r1, r3
    58b2:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    58b6:	4291      	cmp	r1, r2
    58b8:	bfb8      	it	lt
    58ba:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    58bc:	428b      	cmp	r3, r1
    58be:	dd2e      	ble.n	591e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    58c0:	f001 fe5c 	bl	757c <adjust_owner_prio.isra.0>
    58c4:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    58c6:	e9cd 7600 	strd	r7, r6, [sp]
    58ca:	4819      	ldr	r0, [pc, #100]	; (5930 <z_impl_k_mutex_lock+0xec>)
    58cc:	4622      	mov	r2, r4
    58ce:	4641      	mov	r1, r8
    58d0:	f000 fa54 	bl	5d7c <z_pend_curr>
	if (got_mutex == 0) {
    58d4:	2800      	cmp	r0, #0
    58d6:	d0e0      	beq.n	589a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    58d8:	f04f 0320 	mov.w	r3, #32
    58dc:	f3ef 8611 	mrs	r6, BASEPRI
    58e0:	f383 8812 	msr	BASEPRI_MAX, r3
    58e4:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    58e8:	6823      	ldr	r3, [r4, #0]
    58ea:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    58ec:	429c      	cmp	r4, r3
    58ee:	d00a      	beq.n	5906 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    58f0:	b14b      	cbz	r3, 5906 <z_impl_k_mutex_lock+0xc2>
    58f2:	f993 300e 	ldrsb.w	r3, [r3, #14]
    58f6:	4299      	cmp	r1, r3
    58f8:	bfa8      	it	ge
    58fa:	4619      	movge	r1, r3
    58fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5900:	4299      	cmp	r1, r3
    5902:	bfb8      	it	lt
    5904:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5906:	68a0      	ldr	r0, [r4, #8]
    5908:	f001 fe38 	bl	757c <adjust_owner_prio.isra.0>
    590c:	b900      	cbnz	r0, 5910 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    590e:	b145      	cbz	r5, 5922 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    5910:	4807      	ldr	r0, [pc, #28]	; (5930 <z_impl_k_mutex_lock+0xec>)
    5912:	4631      	mov	r1, r6
    5914:	f000 f8de 	bl	5ad4 <z_reschedule>
	return -EAGAIN;
    5918:	f06f 000a 	mvn.w	r0, #10
    591c:	e7bd      	b.n	589a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    591e:	2500      	movs	r5, #0
    5920:	e7d1      	b.n	58c6 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    5922:	f386 8811 	msr	BASEPRI, r6
    5926:	f3bf 8f6f 	isb	sy
    592a:	e7f5      	b.n	5918 <z_impl_k_mutex_lock+0xd4>
    592c:	20000a54 	.word	0x20000a54
    5930:	20000ebb 	.word	0x20000ebb

00005934 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    5934:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    5936:	6883      	ldr	r3, [r0, #8]
{
    5938:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    593a:	2b00      	cmp	r3, #0
    593c:	d032      	beq.n	59a4 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    593e:	4a1c      	ldr	r2, [pc, #112]	; (59b0 <z_impl_k_mutex_unlock+0x7c>)
    5940:	6892      	ldr	r2, [r2, #8]
    5942:	4293      	cmp	r3, r2
    5944:	d131      	bne.n	59aa <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    5946:	7bda      	ldrb	r2, [r3, #15]
    5948:	3a01      	subs	r2, #1
    594a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    594c:	68c3      	ldr	r3, [r0, #12]
    594e:	2b01      	cmp	r3, #1
    5950:	d905      	bls.n	595e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    5952:	3b01      	subs	r3, #1
    5954:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    5956:	f000 fa9f 	bl	5e98 <k_sched_unlock>

	return 0;
    595a:	2000      	movs	r0, #0
}
    595c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    595e:	f04f 0320 	mov.w	r3, #32
    5962:	f3ef 8511 	mrs	r5, BASEPRI
    5966:	f383 8812 	msr	BASEPRI_MAX, r3
    596a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    596e:	6901      	ldr	r1, [r0, #16]
    5970:	6880      	ldr	r0, [r0, #8]
    5972:	f001 fe03 	bl	757c <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5976:	4620      	mov	r0, r4
    5978:	f001 fec3 	bl	7702 <z_unpend_first_thread>
	mutex->owner = new_owner;
    597c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    597e:	b158      	cbz	r0, 5998 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    5980:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5984:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5986:	2200      	movs	r2, #0
    5988:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    598a:	f001 fe49 	bl	7620 <z_ready_thread>
		z_reschedule(&lock, key);
    598e:	4809      	ldr	r0, [pc, #36]	; (59b4 <z_impl_k_mutex_unlock+0x80>)
    5990:	4629      	mov	r1, r5
    5992:	f000 f89f 	bl	5ad4 <z_reschedule>
    5996:	e7de      	b.n	5956 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5998:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    599a:	f385 8811 	msr	BASEPRI, r5
    599e:	f3bf 8f6f 	isb	sy
    59a2:	e7d8      	b.n	5956 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    59a4:	f06f 0015 	mvn.w	r0, #21
    59a8:	e7d8      	b.n	595c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    59aa:	f04f 30ff 	mov.w	r0, #4294967295
    59ae:	e7d5      	b.n	595c <z_impl_k_mutex_unlock+0x28>
    59b0:	20000a54 	.word	0x20000a54
    59b4:	20000ebb 	.word	0x20000ebb

000059b8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    59b8:	b538      	push	{r3, r4, r5, lr}
    59ba:	4604      	mov	r4, r0
	__asm__ volatile(
    59bc:	f04f 0320 	mov.w	r3, #32
    59c0:	f3ef 8511 	mrs	r5, BASEPRI
    59c4:	f383 8812 	msr	BASEPRI_MAX, r3
    59c8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    59cc:	f001 fe99 	bl	7702 <z_unpend_first_thread>

	if (thread != NULL) {
    59d0:	b148      	cbz	r0, 59e6 <z_impl_k_sem_give+0x2e>
    59d2:	2200      	movs	r2, #0
    59d4:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    59d6:	f001 fe23 	bl	7620 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    59da:	4629      	mov	r1, r5
    59dc:	4805      	ldr	r0, [pc, #20]	; (59f4 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    59de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    59e2:	f000 b877 	b.w	5ad4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    59e6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    59ea:	429a      	cmp	r2, r3
    59ec:	bf18      	it	ne
    59ee:	3301      	addne	r3, #1
    59f0:	60a3      	str	r3, [r4, #8]
}
    59f2:	e7f2      	b.n	59da <z_impl_k_sem_give+0x22>
    59f4:	20000ebb 	.word	0x20000ebb

000059f8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    59f8:	b513      	push	{r0, r1, r4, lr}
    59fa:	f04f 0420 	mov.w	r4, #32
    59fe:	f3ef 8111 	mrs	r1, BASEPRI
    5a02:	f384 8812 	msr	BASEPRI_MAX, r4
    5a06:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    5a0a:	6884      	ldr	r4, [r0, #8]
    5a0c:	b144      	cbz	r4, 5a20 <z_impl_k_sem_take+0x28>
		sem->count--;
    5a0e:	3c01      	subs	r4, #1
    5a10:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    5a12:	f381 8811 	msr	BASEPRI, r1
    5a16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    5a1a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    5a1c:	b002      	add	sp, #8
    5a1e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    5a20:	ea52 0403 	orrs.w	r4, r2, r3
    5a24:	d106      	bne.n	5a34 <z_impl_k_sem_take+0x3c>
    5a26:	f381 8811 	msr	BASEPRI, r1
    5a2a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    5a2e:	f06f 000f 	mvn.w	r0, #15
    5a32:	e7f3      	b.n	5a1c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    5a34:	e9cd 2300 	strd	r2, r3, [sp]
    5a38:	4602      	mov	r2, r0
    5a3a:	4802      	ldr	r0, [pc, #8]	; (5a44 <z_impl_k_sem_take+0x4c>)
    5a3c:	f000 f99e 	bl	5d7c <z_pend_curr>
	return ret;
    5a40:	e7ec      	b.n	5a1c <z_impl_k_sem_take+0x24>
    5a42:	bf00      	nop
    5a44:	20000ebb 	.word	0x20000ebb

00005a48 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5a48:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5a4a:	4d07      	ldr	r5, [pc, #28]	; (5a68 <z_reset_time_slice+0x20>)
    5a4c:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5a4e:	b154      	cbz	r4, 5a66 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5a50:	f7fe fc98 	bl	4384 <sys_clock_elapsed>
    5a54:	4b05      	ldr	r3, [pc, #20]	; (5a6c <z_reset_time_slice+0x24>)
    5a56:	4404      	add	r4, r0
    5a58:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5a5a:	6828      	ldr	r0, [r5, #0]
    5a5c:	2100      	movs	r1, #0
	}
}
    5a5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    5a62:	f001 be8c 	b.w	777e <z_set_timeout_expiry>
}
    5a66:	bd38      	pop	{r3, r4, r5, pc}
    5a68:	20000a84 	.word	0x20000a84
    5a6c:	20000a54 	.word	0x20000a54

00005a70 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a72:	4604      	mov	r4, r0
    5a74:	460d      	mov	r5, r1
	__asm__ volatile(
    5a76:	f04f 0320 	mov.w	r3, #32
    5a7a:	f3ef 8711 	mrs	r7, BASEPRI
    5a7e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a82:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    5a86:	4e10      	ldr	r6, [pc, #64]	; (5ac8 <k_sched_time_slice_set+0x58>)
    5a88:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5a8a:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5a8e:	f240 30e7 	movw	r0, #999	; 0x3e7
    5a92:	6131      	str	r1, [r6, #16]
    5a94:	2300      	movs	r3, #0
    5a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a9a:	fbe4 010c 	umlal	r0, r1, r4, ip
    5a9e:	f7fa fb1d 	bl	dc <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    5aa2:	2c00      	cmp	r4, #0
    5aa4:	4b09      	ldr	r3, [pc, #36]	; (5acc <k_sched_time_slice_set+0x5c>)
    5aa6:	dc0a      	bgt.n	5abe <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5aa8:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5aaa:	4b09      	ldr	r3, [pc, #36]	; (5ad0 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5aac:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    5aae:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5ab0:	f7ff ffca 	bl	5a48 <z_reset_time_slice>
	__asm__ volatile(
    5ab4:	f387 8811 	msr	BASEPRI, r7
    5ab8:	f3bf 8f6f 	isb	sy
	}
}
    5abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5abe:	2802      	cmp	r0, #2
    5ac0:	bfb8      	it	lt
    5ac2:	2002      	movlt	r0, #2
    5ac4:	e7f0      	b.n	5aa8 <k_sched_time_slice_set+0x38>
    5ac6:	bf00      	nop
    5ac8:	20000a54 	.word	0x20000a54
    5acc:	20000a84 	.word	0x20000a84
    5ad0:	20000a80 	.word	0x20000a80

00005ad4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    5ad4:	b949      	cbnz	r1, 5aea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5ad6:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    5ada:	b930      	cbnz	r0, 5aea <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    5adc:	4b05      	ldr	r3, [pc, #20]	; (5af4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    5ade:	69da      	ldr	r2, [r3, #28]
    5ae0:	689b      	ldr	r3, [r3, #8]
    5ae2:	429a      	cmp	r2, r3
    5ae4:	d001      	beq.n	5aea <z_reschedule+0x16>
	ret = arch_swap(key);
    5ae6:	f7fc bc2f 	b.w	2348 <arch_swap>
    5aea:	f381 8811 	msr	BASEPRI, r1
    5aee:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    5af2:	4770      	bx	lr
    5af4:	20000a54 	.word	0x20000a54

00005af8 <k_sched_lock>:
	__asm__ volatile(
    5af8:	f04f 0320 	mov.w	r3, #32
    5afc:	f3ef 8111 	mrs	r1, BASEPRI
    5b00:	f383 8812 	msr	BASEPRI_MAX, r3
    5b04:	f3bf 8f6f 	isb	sy
    5b08:	4b04      	ldr	r3, [pc, #16]	; (5b1c <k_sched_lock+0x24>)
    5b0a:	689a      	ldr	r2, [r3, #8]
    5b0c:	7bd3      	ldrb	r3, [r2, #15]
    5b0e:	3b01      	subs	r3, #1
    5b10:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    5b12:	f381 8811 	msr	BASEPRI, r1
    5b16:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    5b1a:	4770      	bx	lr
    5b1c:	20000a54 	.word	0x20000a54

00005b20 <update_cache>:
{
    5b20:	b538      	push	{r3, r4, r5, lr}
    5b22:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    5b24:	480c      	ldr	r0, [pc, #48]	; (5b58 <update_cache+0x38>)
    5b26:	4d0d      	ldr	r5, [pc, #52]	; (5b5c <update_cache+0x3c>)
    5b28:	f001 fd74 	bl	7614 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5b2c:	4604      	mov	r4, r0
    5b2e:	b900      	cbnz	r0, 5b32 <update_cache+0x12>
    5b30:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    5b32:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    5b34:	b94a      	cbnz	r2, 5b4a <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    5b36:	7b5a      	ldrb	r2, [r3, #13]
    5b38:	06d2      	lsls	r2, r2, #27
    5b3a:	d106      	bne.n	5b4a <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5b3c:	69a2      	ldr	r2, [r4, #24]
    5b3e:	b922      	cbnz	r2, 5b4a <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5b40:	89da      	ldrh	r2, [r3, #14]
    5b42:	2a7f      	cmp	r2, #127	; 0x7f
    5b44:	d901      	bls.n	5b4a <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    5b46:	61eb      	str	r3, [r5, #28]
}
    5b48:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5b4a:	429c      	cmp	r4, r3
    5b4c:	d002      	beq.n	5b54 <update_cache+0x34>
			z_reset_time_slice(thread);
    5b4e:	4620      	mov	r0, r4
    5b50:	f7ff ff7a 	bl	5a48 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    5b54:	61ec      	str	r4, [r5, #28]
}
    5b56:	e7f7      	b.n	5b48 <update_cache+0x28>
    5b58:	20000a74 	.word	0x20000a74
    5b5c:	20000a54 	.word	0x20000a54

00005b60 <move_thread_to_end_of_prio_q>:
{
    5b60:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    5b62:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5b66:	7b43      	ldrb	r3, [r0, #13]
    5b68:	2a00      	cmp	r2, #0
{
    5b6a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5b6c:	da04      	bge.n	5b78 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5b6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5b72:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    5b74:	f001 fd16 	bl	75a4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5b78:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5b7a:	4a15      	ldr	r2, [pc, #84]	; (5bd0 <move_thread_to_end_of_prio_q+0x70>)
    5b7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b80:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5b82:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5b86:	f102 0520 	add.w	r5, r2, #32
    5b8a:	42ab      	cmp	r3, r5
    5b8c:	d01b      	beq.n	5bc6 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b8e:	b1d3      	cbz	r3, 5bc6 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    5b90:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    5b94:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5b98:	4286      	cmp	r6, r0
    5b9a:	d00f      	beq.n	5bbc <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5b9c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b9e:	2800      	cmp	r0, #0
    5ba0:	dd0c      	ble.n	5bbc <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    5ba2:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    5ba4:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5ba8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5baa:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5bac:	6890      	ldr	r0, [r2, #8]
    5bae:	1a43      	subs	r3, r0, r1
    5bb0:	4258      	negs	r0, r3
}
    5bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    5bb6:	4158      	adcs	r0, r3
    5bb8:	f7ff bfb2 	b.w	5b20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5bbc:	42a3      	cmp	r3, r4
    5bbe:	d002      	beq.n	5bc6 <move_thread_to_end_of_prio_q+0x66>
    5bc0:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5bc2:	2b00      	cmp	r3, #0
    5bc4:	d1e6      	bne.n	5b94 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    5bc6:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    5bca:	6021      	str	r1, [r4, #0]
	list->tail = node;
    5bcc:	6251      	str	r1, [r2, #36]	; 0x24
}
    5bce:	e7ed      	b.n	5bac <move_thread_to_end_of_prio_q+0x4c>
    5bd0:	20000a54 	.word	0x20000a54

00005bd4 <z_time_slice>:
{
    5bd4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    5bd6:	f04f 0320 	mov.w	r3, #32
    5bda:	f3ef 8511 	mrs	r5, BASEPRI
    5bde:	f383 8812 	msr	BASEPRI_MAX, r3
    5be2:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    5be6:	4b17      	ldr	r3, [pc, #92]	; (5c44 <z_time_slice+0x70>)
    5be8:	4a17      	ldr	r2, [pc, #92]	; (5c48 <z_time_slice+0x74>)
    5bea:	689c      	ldr	r4, [r3, #8]
    5bec:	6811      	ldr	r1, [r2, #0]
    5bee:	428c      	cmp	r4, r1
    5bf0:	d107      	bne.n	5c02 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    5bf2:	4620      	mov	r0, r4
    5bf4:	f7ff ff28 	bl	5a48 <z_reset_time_slice>
	__asm__ volatile(
    5bf8:	f385 8811 	msr	BASEPRI, r5
    5bfc:	f3bf 8f6f 	isb	sy
}
    5c00:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    5c02:	2100      	movs	r1, #0
    5c04:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    5c06:	4a11      	ldr	r2, [pc, #68]	; (5c4c <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    5c08:	6812      	ldr	r2, [r2, #0]
    5c0a:	b1c2      	cbz	r2, 5c3e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    5c0c:	89e2      	ldrh	r2, [r4, #14]
    5c0e:	2a7f      	cmp	r2, #127	; 0x7f
    5c10:	d815      	bhi.n	5c3e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    5c12:	7b62      	ldrb	r2, [r4, #13]
    5c14:	06d2      	lsls	r2, r2, #27
    5c16:	d112      	bne.n	5c3e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    5c18:	4a0d      	ldr	r2, [pc, #52]	; (5c50 <z_time_slice+0x7c>)
    5c1a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    5c1e:	6812      	ldr	r2, [r2, #0]
    5c20:	4291      	cmp	r1, r2
    5c22:	db0c      	blt.n	5c3e <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    5c24:	4a0b      	ldr	r2, [pc, #44]	; (5c54 <z_time_slice+0x80>)
    5c26:	4294      	cmp	r4, r2
    5c28:	d009      	beq.n	5c3e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5c2a:	691a      	ldr	r2, [r3, #16]
    5c2c:	4282      	cmp	r2, r0
    5c2e:	dc03      	bgt.n	5c38 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5c30:	4620      	mov	r0, r4
    5c32:	f7ff ff95 	bl	5b60 <move_thread_to_end_of_prio_q>
    5c36:	e7dc      	b.n	5bf2 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5c38:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5c3a:	611a      	str	r2, [r3, #16]
    5c3c:	e7dc      	b.n	5bf8 <z_time_slice+0x24>
    5c3e:	2200      	movs	r2, #0
    5c40:	e7fb      	b.n	5c3a <z_time_slice+0x66>
    5c42:	bf00      	nop
    5c44:	20000a54 	.word	0x20000a54
    5c48:	20000a7c 	.word	0x20000a7c
    5c4c:	20000a84 	.word	0x20000a84
    5c50:	20000a80 	.word	0x20000a80
    5c54:	200006d8 	.word	0x200006d8

00005c58 <ready_thread>:
{
    5c58:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5c5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5c5e:	7b43      	ldrb	r3, [r0, #13]
    5c60:	2a00      	cmp	r2, #0
    5c62:	db2a      	blt.n	5cba <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5c64:	06da      	lsls	r2, r3, #27
    5c66:	d128      	bne.n	5cba <ready_thread+0x62>
    5c68:	6982      	ldr	r2, [r0, #24]
    5c6a:	bb32      	cbnz	r2, 5cba <ready_thread+0x62>
	return list->head == list;
    5c6c:	4a14      	ldr	r2, [pc, #80]	; (5cc0 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5c6e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5c72:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    5c74:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c78:	f102 0520 	add.w	r5, r2, #32
    5c7c:	42ab      	cmp	r3, r5
    5c7e:	d017      	beq.n	5cb0 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5c80:	b1b3      	cbz	r3, 5cb0 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    5c82:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    5c86:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5c8a:	428e      	cmp	r6, r1
    5c8c:	d00b      	beq.n	5ca6 <ready_thread+0x4e>
		return b2 - b1;
    5c8e:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5c90:	2900      	cmp	r1, #0
    5c92:	dd08      	ble.n	5ca6 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    5c94:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5c96:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5c9a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5c9c:	6058      	str	r0, [r3, #4]
}
    5c9e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5ca0:	2000      	movs	r0, #0
    5ca2:	f7ff bf3d 	b.w	5b20 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5ca6:	42a3      	cmp	r3, r4
    5ca8:	d002      	beq.n	5cb0 <ready_thread+0x58>
    5caa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5cac:	2b00      	cmp	r3, #0
    5cae:	d1ea      	bne.n	5c86 <ready_thread+0x2e>
	node->prev = tail;
    5cb0:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    5cb4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    5cb6:	6250      	str	r0, [r2, #36]	; 0x24
}
    5cb8:	e7f1      	b.n	5c9e <ready_thread+0x46>
}
    5cba:	bc70      	pop	{r4, r5, r6}
    5cbc:	4770      	bx	lr
    5cbe:	bf00      	nop
    5cc0:	20000a54 	.word	0x20000a54

00005cc4 <z_sched_start>:
{
    5cc4:	b510      	push	{r4, lr}
	__asm__ volatile(
    5cc6:	f04f 0220 	mov.w	r2, #32
    5cca:	f3ef 8411 	mrs	r4, BASEPRI
    5cce:	f382 8812 	msr	BASEPRI_MAX, r2
    5cd2:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    5cd6:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    5cd8:	0751      	lsls	r1, r2, #29
    5cda:	d404      	bmi.n	5ce6 <z_sched_start+0x22>
	__asm__ volatile(
    5cdc:	f384 8811 	msr	BASEPRI, r4
    5ce0:	f3bf 8f6f 	isb	sy
}
    5ce4:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5ce6:	f022 0204 	bic.w	r2, r2, #4
    5cea:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    5cec:	f7ff ffb4 	bl	5c58 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    5cf0:	4621      	mov	r1, r4
    5cf2:	4802      	ldr	r0, [pc, #8]	; (5cfc <z_sched_start+0x38>)
}
    5cf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    5cf8:	f7ff beec 	b.w	5ad4 <z_reschedule>
    5cfc:	20000ebb 	.word	0x20000ebb

00005d00 <unready_thread>:
{
    5d00:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    5d02:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    5d06:	7b43      	ldrb	r3, [r0, #13]
    5d08:	2a00      	cmp	r2, #0
{
    5d0a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5d0c:	da04      	bge.n	5d18 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5d0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5d12:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5d14:	f001 fc46 	bl	75a4 <sys_dlist_remove>
	update_cache(thread == _current);
    5d18:	4b04      	ldr	r3, [pc, #16]	; (5d2c <unready_thread+0x2c>)
    5d1a:	6898      	ldr	r0, [r3, #8]
    5d1c:	1a43      	subs	r3, r0, r1
    5d1e:	4258      	negs	r0, r3
    5d20:	4158      	adcs	r0, r3
}
    5d22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    5d26:	f7ff befb 	b.w	5b20 <update_cache>
    5d2a:	bf00      	nop
    5d2c:	20000a54 	.word	0x20000a54

00005d30 <pend>:
{
    5d30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d34:	4606      	mov	r6, r0
    5d36:	4615      	mov	r5, r2
    5d38:	461c      	mov	r4, r3
	__asm__ volatile(
    5d3a:	f04f 0320 	mov.w	r3, #32
    5d3e:	f3ef 8711 	mrs	r7, BASEPRI
    5d42:	f383 8812 	msr	BASEPRI_MAX, r3
    5d46:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5d4a:	f001 fc9b 	bl	7684 <add_to_waitq_locked>
	__asm__ volatile(
    5d4e:	f387 8811 	msr	BASEPRI, r7
    5d52:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5d56:	f1b4 3fff 	cmp.w	r4, #4294967295
    5d5a:	bf08      	it	eq
    5d5c:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5d60:	d008      	beq.n	5d74 <pend+0x44>
    5d62:	462a      	mov	r2, r5
    5d64:	4623      	mov	r3, r4
    5d66:	f106 0018 	add.w	r0, r6, #24
    5d6a:	4903      	ldr	r1, [pc, #12]	; (5d78 <pend+0x48>)
}
    5d6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d70:	f000 ba18 	b.w	61a4 <z_add_timeout>
    5d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d78:	00007641 	.word	0x00007641

00005d7c <z_pend_curr>:
{
    5d7c:	b510      	push	{r4, lr}
	pending_current = _current;
    5d7e:	4b07      	ldr	r3, [pc, #28]	; (5d9c <z_pend_curr+0x20>)
    5d80:	6898      	ldr	r0, [r3, #8]
    5d82:	4b07      	ldr	r3, [pc, #28]	; (5da0 <z_pend_curr+0x24>)
{
    5d84:	460c      	mov	r4, r1
	pending_current = _current;
    5d86:	6018      	str	r0, [r3, #0]
{
    5d88:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5d8e:	f7ff ffcf 	bl	5d30 <pend>
    5d92:	4620      	mov	r0, r4
}
    5d94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d98:	f7fc bad6 	b.w	2348 <arch_swap>
    5d9c:	20000a54 	.word	0x20000a54
    5da0:	20000a7c 	.word	0x20000a7c

00005da4 <z_set_prio>:
{
    5da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5da6:	4604      	mov	r4, r0
	__asm__ volatile(
    5da8:	f04f 0320 	mov.w	r3, #32
    5dac:	f3ef 8611 	mrs	r6, BASEPRI
    5db0:	f383 8812 	msr	BASEPRI_MAX, r3
    5db4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5db8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5dba:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5dbc:	b249      	sxtb	r1, r1
    5dbe:	d133      	bne.n	5e28 <z_set_prio+0x84>
		if (need_sched) {
    5dc0:	6982      	ldr	r2, [r0, #24]
    5dc2:	bb8a      	cbnz	r2, 5e28 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5dc8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5dca:	f001 fbeb 	bl	75a4 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5dce:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    5dd0:	4a17      	ldr	r2, [pc, #92]	; (5e30 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    5dd2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    5dd4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5dd8:	7343      	strb	r3, [r0, #13]
    5dda:	4610      	mov	r0, r2
    5ddc:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5de0:	4283      	cmp	r3, r0
    5de2:	d01b      	beq.n	5e1c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5de4:	b1d3      	cbz	r3, 5e1c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    5de6:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    5de8:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    5dec:	42a9      	cmp	r1, r5
    5dee:	d010      	beq.n	5e12 <z_set_prio+0x6e>
		return b2 - b1;
    5df0:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    5df2:	2d00      	cmp	r5, #0
    5df4:	dd0d      	ble.n	5e12 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    5df6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5df8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5dfc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5dfe:	605c      	str	r4, [r3, #4]
			update_cache(1);
    5e00:	2001      	movs	r0, #1
    5e02:	f7ff fe8d 	bl	5b20 <update_cache>
    5e06:	2001      	movs	r0, #1
	__asm__ volatile(
    5e08:	f386 8811 	msr	BASEPRI, r6
    5e0c:	f3bf 8f6f 	isb	sy
}
    5e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    5e12:	42bb      	cmp	r3, r7
    5e14:	d002      	beq.n	5e1c <z_set_prio+0x78>
    5e16:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5e18:	2b00      	cmp	r3, #0
    5e1a:	d1e5      	bne.n	5de8 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    5e1c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    5e1e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    5e22:	601c      	str	r4, [r3, #0]
	list->tail = node;
    5e24:	6254      	str	r4, [r2, #36]	; 0x24
}
    5e26:	e7eb      	b.n	5e00 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5e28:	73a1      	strb	r1, [r4, #14]
    5e2a:	2000      	movs	r0, #0
    5e2c:	e7ec      	b.n	5e08 <z_set_prio+0x64>
    5e2e:	bf00      	nop
    5e30:	20000a54 	.word	0x20000a54

00005e34 <z_impl_k_thread_suspend>:
{
    5e34:	b570      	push	{r4, r5, r6, lr}
    5e36:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5e38:	3018      	adds	r0, #24
    5e3a:	f001 fc7a 	bl	7732 <z_abort_timeout>
	__asm__ volatile(
    5e3e:	f04f 0320 	mov.w	r3, #32
    5e42:	f3ef 8611 	mrs	r6, BASEPRI
    5e46:	f383 8812 	msr	BASEPRI_MAX, r3
    5e4a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5e4e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5e52:	7b63      	ldrb	r3, [r4, #13]
    5e54:	2a00      	cmp	r2, #0
    5e56:	da05      	bge.n	5e64 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5e5c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5e5e:	4620      	mov	r0, r4
    5e60:	f001 fba0 	bl	75a4 <sys_dlist_remove>
		update_cache(thread == _current);
    5e64:	4d0b      	ldr	r5, [pc, #44]	; (5e94 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5e66:	7b63      	ldrb	r3, [r4, #13]
    5e68:	68a8      	ldr	r0, [r5, #8]
    5e6a:	f043 0310 	orr.w	r3, r3, #16
    5e6e:	7363      	strb	r3, [r4, #13]
    5e70:	1b03      	subs	r3, r0, r4
    5e72:	4258      	negs	r0, r3
    5e74:	4158      	adcs	r0, r3
    5e76:	f7ff fe53 	bl	5b20 <update_cache>
	__asm__ volatile(
    5e7a:	f386 8811 	msr	BASEPRI, r6
    5e7e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5e82:	68ab      	ldr	r3, [r5, #8]
    5e84:	42a3      	cmp	r3, r4
    5e86:	d103      	bne.n	5e90 <z_impl_k_thread_suspend+0x5c>
}
    5e88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5e8c:	f001 bbb8 	b.w	7600 <z_reschedule_unlocked>
}
    5e90:	bd70      	pop	{r4, r5, r6, pc}
    5e92:	bf00      	nop
    5e94:	20000a54 	.word	0x20000a54

00005e98 <k_sched_unlock>:
{
    5e98:	b510      	push	{r4, lr}
	__asm__ volatile(
    5e9a:	f04f 0320 	mov.w	r3, #32
    5e9e:	f3ef 8411 	mrs	r4, BASEPRI
    5ea2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ea6:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5eaa:	4b08      	ldr	r3, [pc, #32]	; (5ecc <k_sched_unlock+0x34>)
    5eac:	689a      	ldr	r2, [r3, #8]
    5eae:	7bd3      	ldrb	r3, [r2, #15]
    5eb0:	3301      	adds	r3, #1
    5eb2:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5eb4:	2000      	movs	r0, #0
    5eb6:	f7ff fe33 	bl	5b20 <update_cache>
	__asm__ volatile(
    5eba:	f384 8811 	msr	BASEPRI, r4
    5ebe:	f3bf 8f6f 	isb	sy
}
    5ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5ec6:	f001 bb9b 	b.w	7600 <z_reschedule_unlocked>
    5eca:	bf00      	nop
    5ecc:	20000a54 	.word	0x20000a54

00005ed0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5ed0:	4b04      	ldr	r3, [pc, #16]	; (5ee4 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5ed2:	2100      	movs	r1, #0
    5ed4:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5ed8:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5edc:	4608      	mov	r0, r1
    5ede:	f7ff bdc7 	b.w	5a70 <k_sched_time_slice_set>
    5ee2:	bf00      	nop
    5ee4:	20000a54 	.word	0x20000a54

00005ee8 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5eea:	f04f 0320 	mov.w	r3, #32
    5eee:	f3ef 8511 	mrs	r5, BASEPRI
    5ef2:	f383 8812 	msr	BASEPRI_MAX, r3
    5ef6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5efa:	491a      	ldr	r1, [pc, #104]	; (5f64 <z_impl_k_yield+0x7c>)
    5efc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5efe:	7b43      	ldrb	r3, [r0, #13]
    5f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5f04:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5f06:	f001 fb4d 	bl	75a4 <sys_dlist_remove>
	}
	queue_thread(_current);
    5f0a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5f0c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5f0e:	4608      	mov	r0, r1
    5f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5f14:	735a      	strb	r2, [r3, #13]
    5f16:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f1a:	4282      	cmp	r2, r0
    5f1c:	d01c      	beq.n	5f58 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f1e:	b1da      	cbz	r2, 5f58 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5f20:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5f22:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5f26:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5f2a:	42a6      	cmp	r6, r4
    5f2c:	d00f      	beq.n	5f4e <z_impl_k_yield+0x66>
		return b2 - b1;
    5f2e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5f30:	2c00      	cmp	r4, #0
    5f32:	dd0c      	ble.n	5f4e <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5f34:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5f36:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5f3a:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5f3c:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5f3e:	2001      	movs	r0, #1
    5f40:	f7ff fdee 	bl	5b20 <update_cache>
    5f44:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5f4a:	f7fc b9fd 	b.w	2348 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5f4e:	42ba      	cmp	r2, r7
    5f50:	d002      	beq.n	5f58 <z_impl_k_yield+0x70>
    5f52:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5f54:	2a00      	cmp	r2, #0
    5f56:	d1e6      	bne.n	5f26 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5f58:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5f5a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5f5e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5f60:	624b      	str	r3, [r1, #36]	; 0x24
}
    5f62:	e7ec      	b.n	5f3e <z_impl_k_yield+0x56>
    5f64:	20000a54 	.word	0x20000a54

00005f68 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5f68:	ea50 0301 	orrs.w	r3, r0, r1
{
    5f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f70:	4605      	mov	r5, r0
    5f72:	460e      	mov	r6, r1
	if (ticks == 0) {
    5f74:	d103      	bne.n	5f7e <z_tick_sleep+0x16>
	z_impl_k_yield();
    5f76:	f7ff ffb7 	bl	5ee8 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5f7a:	2000      	movs	r0, #0
    5f7c:	e033      	b.n	5fe6 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5f7e:	f06f 0401 	mvn.w	r4, #1
    5f82:	1a24      	subs	r4, r4, r0
    5f84:	f04f 33ff 	mov.w	r3, #4294967295
    5f88:	eb63 0301 	sbc.w	r3, r3, r1
    5f8c:	2c01      	cmp	r4, #1
    5f8e:	f173 0300 	sbcs.w	r3, r3, #0
    5f92:	da02      	bge.n	5f9a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5f94:	f001 fc0d 	bl	77b2 <sys_clock_tick_get_32>
    5f98:	1944      	adds	r4, r0, r5
    5f9a:	f04f 0320 	mov.w	r3, #32
    5f9e:	f3ef 8811 	mrs	r8, BASEPRI
    5fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    5fa6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5faa:	4f10      	ldr	r7, [pc, #64]	; (5fec <z_tick_sleep+0x84>)
    5fac:	4b10      	ldr	r3, [pc, #64]	; (5ff0 <z_tick_sleep+0x88>)
    5fae:	68b8      	ldr	r0, [r7, #8]
    5fb0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5fb2:	f7ff fea5 	bl	5d00 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5fb6:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5fb8:	490e      	ldr	r1, [pc, #56]	; (5ff4 <z_tick_sleep+0x8c>)
    5fba:	462a      	mov	r2, r5
    5fbc:	4633      	mov	r3, r6
    5fbe:	3018      	adds	r0, #24
    5fc0:	f000 f8f0 	bl	61a4 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5fc4:	68ba      	ldr	r2, [r7, #8]
    5fc6:	7b53      	ldrb	r3, [r2, #13]
    5fc8:	f043 0310 	orr.w	r3, r3, #16
    5fcc:	7353      	strb	r3, [r2, #13]
    5fce:	4640      	mov	r0, r8
    5fd0:	f7fc f9ba 	bl	2348 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5fd4:	f001 fbed 	bl	77b2 <sys_clock_tick_get_32>
    5fd8:	1a20      	subs	r0, r4, r0
    5fda:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5fde:	2801      	cmp	r0, #1
    5fe0:	f173 0300 	sbcs.w	r3, r3, #0
    5fe4:	dbc9      	blt.n	5f7a <z_tick_sleep+0x12>
}
    5fe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fea:	bf00      	nop
    5fec:	20000a54 	.word	0x20000a54
    5ff0:	20000a7c 	.word	0x20000a7c
    5ff4:	00007641 	.word	0x00007641

00005ff8 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5ff8:	f1b1 3fff 	cmp.w	r1, #4294967295
    5ffc:	bf08      	it	eq
    5ffe:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6002:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6004:	d106      	bne.n	6014 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    6006:	4b08      	ldr	r3, [pc, #32]	; (6028 <z_impl_k_sleep+0x30>)
    6008:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    600a:	f7ff ff13 	bl	5e34 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    600e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6012:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6014:	f7ff ffa8 	bl	5f68 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6018:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    601c:	fb80 0303 	smull	r0, r3, r0, r3
    6020:	0bc0      	lsrs	r0, r0, #15
    6022:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    6026:	e7f4      	b.n	6012 <z_impl_k_sleep+0x1a>
    6028:	20000a54 	.word	0x20000a54

0000602c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    602c:	4b01      	ldr	r3, [pc, #4]	; (6034 <z_impl_z_current_get+0x8>)
    602e:	6898      	ldr	r0, [r3, #8]
    6030:	4770      	bx	lr
    6032:	bf00      	nop
    6034:	20000a54 	.word	0x20000a54

00006038 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    603c:	4604      	mov	r4, r0
    603e:	f04f 0320 	mov.w	r3, #32
    6042:	f3ef 8611 	mrs	r6, BASEPRI
    6046:	f383 8812 	msr	BASEPRI_MAX, r3
    604a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    604e:	7b43      	ldrb	r3, [r0, #13]
    6050:	071a      	lsls	r2, r3, #28
    6052:	d505      	bpl.n	6060 <z_thread_abort+0x28>
	__asm__ volatile(
    6054:	f386 8811 	msr	BASEPRI, r6
    6058:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    605c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6060:	f023 0220 	bic.w	r2, r3, #32
    6064:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6068:	09d2      	lsrs	r2, r2, #7
    606a:	d120      	bne.n	60ae <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    606c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    606e:	68a3      	ldr	r3, [r4, #8]
    6070:	b113      	cbz	r3, 6078 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    6072:	4620      	mov	r0, r4
    6074:	f001 fa9e 	bl	75b4 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6078:	f104 0018 	add.w	r0, r4, #24
    607c:	f001 fb59 	bl	7732 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6080:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6084:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6088:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    608a:	42bd      	cmp	r5, r7
    608c:	d000      	beq.n	6090 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    608e:	b9b5      	cbnz	r5, 60be <z_thread_abort+0x86>
		update_cache(1);
    6090:	2001      	movs	r0, #1
    6092:	f7ff fd45 	bl	5b20 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6096:	4b10      	ldr	r3, [pc, #64]	; (60d8 <z_thread_abort+0xa0>)
    6098:	689b      	ldr	r3, [r3, #8]
    609a:	42a3      	cmp	r3, r4
    609c:	d1da      	bne.n	6054 <z_thread_abort+0x1c>
    609e:	f3ef 8305 	mrs	r3, IPSR
    60a2:	2b00      	cmp	r3, #0
    60a4:	d1d6      	bne.n	6054 <z_thread_abort+0x1c>
    60a6:	4630      	mov	r0, r6
    60a8:	f7fc f94e 	bl	2348 <arch_swap>
	return ret;
    60ac:	e7d2      	b.n	6054 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    60ae:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    60b2:	f043 0308 	orr.w	r3, r3, #8
    60b6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    60b8:	f001 fa74 	bl	75a4 <sys_dlist_remove>
}
    60bc:	e7d7      	b.n	606e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    60be:	4628      	mov	r0, r5
    60c0:	f001 fa78 	bl	75b4 <unpend_thread_no_timeout>
    60c4:	f105 0018 	add.w	r0, r5, #24
    60c8:	f001 fb33 	bl	7732 <z_abort_timeout>
    60cc:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    60d0:	4628      	mov	r0, r5
    60d2:	f7ff fdc1 	bl	5c58 <ready_thread>
    60d6:	e7d7      	b.n	6088 <z_thread_abort+0x50>
    60d8:	20000a54 	.word	0x20000a54

000060dc <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    60dc:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    60de:	4806      	ldr	r0, [pc, #24]	; (60f8 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    60e0:	4a06      	ldr	r2, [pc, #24]	; (60fc <z_data_copy+0x20>)
    60e2:	4907      	ldr	r1, [pc, #28]	; (6100 <z_data_copy+0x24>)
    60e4:	1a12      	subs	r2, r2, r0
    60e6:	f001 fa35 	bl	7554 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    60ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    60ee:	4a05      	ldr	r2, [pc, #20]	; (6104 <z_data_copy+0x28>)
    60f0:	4905      	ldr	r1, [pc, #20]	; (6108 <z_data_copy+0x2c>)
    60f2:	4806      	ldr	r0, [pc, #24]	; (610c <z_data_copy+0x30>)
    60f4:	f001 ba2e 	b.w	7554 <z_early_memcpy>
    60f8:	20000000 	.word	0x20000000
    60fc:	200001fc 	.word	0x200001fc
    6100:	00008800 	.word	0x00008800
    6104:	00000000 	.word	0x00000000
    6108:	00008800 	.word	0x00008800
    610c:	20000000 	.word	0x20000000

00006110 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6110:	4b03      	ldr	r3, [pc, #12]	; (6120 <elapsed+0x10>)
    6112:	681b      	ldr	r3, [r3, #0]
    6114:	b90b      	cbnz	r3, 611a <elapsed+0xa>
    6116:	f7fe b935 	b.w	4384 <sys_clock_elapsed>
}
    611a:	2000      	movs	r0, #0
    611c:	4770      	bx	lr
    611e:	bf00      	nop
    6120:	20000a88 	.word	0x20000a88

00006124 <next_timeout>:
	return list->head == list;
    6124:	4b10      	ldr	r3, [pc, #64]	; (6168 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    6126:	b510      	push	{r4, lr}
    6128:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    612a:	429c      	cmp	r4, r3
    612c:	bf08      	it	eq
    612e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6130:	f7ff ffee 	bl	6110 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    6134:	b1a4      	cbz	r4, 6160 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6136:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    613a:	1a1b      	subs	r3, r3, r0
    613c:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6144:	f170 0200 	sbcs.w	r2, r0, #0
    6148:	da0a      	bge.n	6160 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    614a:	2800      	cmp	r0, #0
    614c:	bfac      	ite	ge
    614e:	4618      	movge	r0, r3
    6150:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6152:	4b06      	ldr	r3, [pc, #24]	; (616c <next_timeout+0x48>)
    6154:	691b      	ldr	r3, [r3, #16]
    6156:	b113      	cbz	r3, 615e <next_timeout+0x3a>
    6158:	4298      	cmp	r0, r3
    615a:	bfa8      	it	ge
    615c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    615e:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6160:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6164:	e7f5      	b.n	6152 <next_timeout+0x2e>
    6166:	bf00      	nop
    6168:	200001b4 	.word	0x200001b4
    616c:	20000a54 	.word	0x20000a54

00006170 <remove_timeout>:
{
    6170:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    6172:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6174:	b168      	cbz	r0, 6192 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6176:	4a0a      	ldr	r2, [pc, #40]	; (61a0 <remove_timeout+0x30>)
    6178:	6852      	ldr	r2, [r2, #4]
    617a:	4290      	cmp	r0, r2
    617c:	d009      	beq.n	6192 <remove_timeout+0x22>
	if (next(t) != NULL) {
    617e:	b143      	cbz	r3, 6192 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6180:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6184:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6188:	1912      	adds	r2, r2, r4
    618a:	eb41 0105 	adc.w	r1, r1, r5
    618e:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6192:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    6194:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6196:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6198:	2300      	movs	r3, #0
	node->prev = NULL;
    619a:	e9c0 3300 	strd	r3, r3, [r0]
}
    619e:	bd30      	pop	{r4, r5, pc}
    61a0:	200001b4 	.word	0x200001b4

000061a4 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    61a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    61a8:	bf08      	it	eq
    61aa:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    61ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    61b0:	4604      	mov	r4, r0
    61b2:	461f      	mov	r7, r3
    61b4:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    61b6:	d067      	beq.n	6288 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    61b8:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    61ba:	f04f 0320 	mov.w	r3, #32
    61be:	f3ef 8611 	mrs	r6, BASEPRI
    61c2:	f383 8812 	msr	BASEPRI_MAX, r3
    61c6:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    61ca:	f06f 0201 	mvn.w	r2, #1
    61ce:	1b53      	subs	r3, r2, r5
    61d0:	f04f 3cff 	mov.w	ip, #4294967295
    61d4:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    61d8:	2b00      	cmp	r3, #0
    61da:	db1b      	blt.n	6214 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    61dc:	4b2b      	ldr	r3, [pc, #172]	; (628c <z_add_timeout+0xe8>)
    61de:	e9d3 1300 	ldrd	r1, r3, [r3]
    61e2:	1a52      	subs	r2, r2, r1
    61e4:	eb6c 0303 	sbc.w	r3, ip, r3
    61e8:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    61ea:	eb63 0307 	sbc.w	r3, r3, r7
    61ee:	2d01      	cmp	r5, #1
    61f0:	f173 0200 	sbcs.w	r2, r3, #0
    61f4:	bfbc      	itt	lt
    61f6:	2501      	movlt	r5, #1
    61f8:	2300      	movlt	r3, #0
    61fa:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    61fe:	4824      	ldr	r0, [pc, #144]	; (6290 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    6200:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6204:	4283      	cmp	r3, r0
    6206:	d118      	bne.n	623a <z_add_timeout+0x96>
	node->prev = tail;
    6208:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    620c:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6210:	6044      	str	r4, [r0, #4]
}
    6212:	e026      	b.n	6262 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6214:	f7ff ff7c 	bl	6110 <elapsed>
    6218:	3501      	adds	r5, #1
    621a:	f147 0700 	adc.w	r7, r7, #0
    621e:	182d      	adds	r5, r5, r0
    6220:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    6224:	e9c4 5704 	strd	r5, r7, [r4, #16]
    6228:	e7e9      	b.n	61fe <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    622a:	1a52      	subs	r2, r2, r1
    622c:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6230:	459c      	cmp	ip, r3
    6232:	e9c4 2504 	strd	r2, r5, [r4, #16]
    6236:	d0e7      	beq.n	6208 <z_add_timeout+0x64>
    6238:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    623a:	2b00      	cmp	r3, #0
    623c:	d0e4      	beq.n	6208 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    623e:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    6242:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    6246:	428a      	cmp	r2, r1
    6248:	eb75 0e07 	sbcs.w	lr, r5, r7
    624c:	daed      	bge.n	622a <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    624e:	1a8a      	subs	r2, r1, r2
    6250:	eb67 0505 	sbc.w	r5, r7, r5
    6254:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6258:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    625a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    625e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6260:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6262:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6264:	4283      	cmp	r3, r0
    6266:	d00b      	beq.n	6280 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6268:	429c      	cmp	r4, r3
    626a:	d109      	bne.n	6280 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    626c:	f7ff ff5a 	bl	6124 <next_timeout>

			if (next_time == 0 ||
    6270:	b118      	cbz	r0, 627a <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    6272:	4b08      	ldr	r3, [pc, #32]	; (6294 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    6274:	691b      	ldr	r3, [r3, #16]
    6276:	4283      	cmp	r3, r0
    6278:	d002      	beq.n	6280 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    627a:	2100      	movs	r1, #0
    627c:	f7fe f850 	bl	4320 <sys_clock_set_timeout>
	__asm__ volatile(
    6280:	f386 8811 	msr	BASEPRI, r6
    6284:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    628a:	bf00      	nop
    628c:	200007d8 	.word	0x200007d8
    6290:	200001b4 	.word	0x200001b4
    6294:	20000a54 	.word	0x20000a54

00006298 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    629c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    629e:	f7ff fc99 	bl	5bd4 <z_time_slice>
	__asm__ volatile(
    62a2:	f04f 0320 	mov.w	r3, #32
    62a6:	f3ef 8411 	mrs	r4, BASEPRI
    62aa:	f383 8812 	msr	BASEPRI_MAX, r3
    62ae:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    62b2:	4e24      	ldr	r6, [pc, #144]	; (6344 <sys_clock_announce+0xac>)
	return list->head == list;
    62b4:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6348 <sys_clock_announce+0xb0>
    62b8:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    62ba:	4d24      	ldr	r5, [pc, #144]	; (634c <sys_clock_announce+0xb4>)
    62bc:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    62c0:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    62c2:	4540      	cmp	r0, r8
		curr_tick += dt;
    62c4:	e9d5 1e00 	ldrd	r1, lr, [r5]
    62c8:	ea4f 77e2 	mov.w	r7, r2, asr #31
    62cc:	d00b      	beq.n	62e6 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    62ce:	b150      	cbz	r0, 62e6 <sys_clock_announce+0x4e>
    62d0:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    62d4:	429a      	cmp	r2, r3
    62d6:	eb77 090c 	sbcs.w	r9, r7, ip
    62da:	da16      	bge.n	630a <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    62dc:	1a9b      	subs	r3, r3, r2
    62de:	eb6c 0c07 	sbc.w	ip, ip, r7
    62e2:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    62e6:	1852      	adds	r2, r2, r1
    62e8:	eb4e 0707 	adc.w	r7, lr, r7
    62ec:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    62f0:	2500      	movs	r5, #0
    62f2:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    62f4:	f7ff ff16 	bl	6124 <next_timeout>
    62f8:	4629      	mov	r1, r5
    62fa:	f7fe f811 	bl	4320 <sys_clock_set_timeout>
	__asm__ volatile(
    62fe:	f384 8811 	msr	BASEPRI, r4
    6302:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    6306:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    630a:	1859      	adds	r1, r3, r1
    630c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    6310:	1ad3      	subs	r3, r2, r3
    6312:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    6314:	2200      	movs	r2, #0
    6316:	2300      	movs	r3, #0
    6318:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    631c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    6320:	f7ff ff26 	bl	6170 <remove_timeout>
    6324:	f384 8811 	msr	BASEPRI, r4
    6328:	f3bf 8f6f 	isb	sy
		t->fn(t);
    632c:	6883      	ldr	r3, [r0, #8]
    632e:	4798      	blx	r3
	__asm__ volatile(
    6330:	f04f 0320 	mov.w	r3, #32
    6334:	f3ef 8411 	mrs	r4, BASEPRI
    6338:	f383 8812 	msr	BASEPRI_MAX, r3
    633c:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    6340:	e7bc      	b.n	62bc <sys_clock_announce+0x24>
    6342:	bf00      	nop
    6344:	20000a88 	.word	0x20000a88
    6348:	200001b4 	.word	0x200001b4
    634c:	200007d8 	.word	0x200007d8

00006350 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    6350:	b510      	push	{r4, lr}
    6352:	f04f 0320 	mov.w	r3, #32
    6356:	f3ef 8411 	mrs	r4, BASEPRI
    635a:	f383 8812 	msr	BASEPRI_MAX, r3
    635e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    6362:	f7fe f80f 	bl	4384 <sys_clock_elapsed>
    6366:	4a05      	ldr	r2, [pc, #20]	; (637c <sys_clock_tick_get+0x2c>)
    6368:	e9d2 3100 	ldrd	r3, r1, [r2]
    636c:	18c0      	adds	r0, r0, r3
    636e:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    6372:	f384 8811 	msr	BASEPRI, r4
    6376:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    637a:	bd10      	pop	{r4, pc}
    637c:	200007d8 	.word	0x200007d8

00006380 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    6380:	b570      	push	{r4, r5, r6, lr}
    6382:	4604      	mov	r4, r0
	__asm__ volatile(
    6384:	f04f 0320 	mov.w	r3, #32
    6388:	f3ef 8511 	mrs	r5, BASEPRI
    638c:	f383 8812 	msr	BASEPRI_MAX, r3
    6390:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    6394:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    6398:	3301      	adds	r3, #1
    639a:	f142 0200 	adc.w	r2, r2, #0
    639e:	2b02      	cmp	r3, #2
    63a0:	f172 0300 	sbcs.w	r3, r2, #0
    63a4:	d304      	bcc.n	63b0 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    63a6:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    63aa:	4917      	ldr	r1, [pc, #92]	; (6408 <z_timer_expiration_handler+0x88>)
    63ac:	f7ff fefa 	bl	61a4 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    63b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    63b2:	3301      	adds	r3, #1
    63b4:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    63b6:	6a23      	ldr	r3, [r4, #32]
    63b8:	b173      	cbz	r3, 63d8 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    63ba:	f385 8811 	msr	BASEPRI, r5
    63be:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    63c2:	6a23      	ldr	r3, [r4, #32]
    63c4:	4620      	mov	r0, r4
    63c6:	4798      	blx	r3
	__asm__ volatile(
    63c8:	f04f 0320 	mov.w	r3, #32
    63cc:	f3ef 8511 	mrs	r5, BASEPRI
    63d0:	f383 8812 	msr	BASEPRI_MAX, r3
    63d4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    63d8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    63dc:	42a6      	cmp	r6, r4
    63de:	d000      	beq.n	63e2 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    63e0:	b926      	cbnz	r6, 63ec <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    63e2:	f385 8811 	msr	BASEPRI, r5
    63e6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    63ea:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    63ec:	4630      	mov	r0, r6
    63ee:	f001 f8eb 	bl	75c8 <z_unpend_thread_no_timeout>
    63f2:	2300      	movs	r3, #0
    63f4:	67b3      	str	r3, [r6, #120]	; 0x78
    63f6:	f385 8811 	msr	BASEPRI, r5
    63fa:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    63fe:	4630      	mov	r0, r6
}
    6400:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6404:	f001 b90c 	b.w	7620 <z_ready_thread>
    6408:	00006381 	.word	0x00006381

0000640c <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    640c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6410:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6412:	f1b3 3fff 	cmp.w	r3, #4294967295
    6416:	bf08      	it	eq
    6418:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    641c:	4606      	mov	r6, r0
    641e:	461c      	mov	r4, r3
    6420:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    6424:	4689      	mov	r9, r1
    6426:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6428:	d03e      	beq.n	64a8 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    642a:	f1b0 3fff 	cmp.w	r0, #4294967295
    642e:	bf08      	it	eq
    6430:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6434:	4615      	mov	r5, r2
    6436:	4607      	mov	r7, r0
    6438:	d014      	beq.n	6464 <z_impl_k_timer_start+0x58>
    643a:	ea50 0302 	orrs.w	r3, r0, r2
    643e:	d011      	beq.n	6464 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    6440:	f06f 0301 	mvn.w	r3, #1
    6444:	1a9b      	subs	r3, r3, r2
    6446:	f04f 33ff 	mov.w	r3, #4294967295
    644a:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    644e:	2b00      	cmp	r3, #0
    6450:	da08      	bge.n	6464 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    6452:	2a02      	cmp	r2, #2
    6454:	f170 0300 	sbcs.w	r3, r0, #0
    6458:	bfbc      	itt	lt
    645a:	2502      	movlt	r5, #2
    645c:	2700      	movlt	r7, #0
    645e:	3d01      	subs	r5, #1
    6460:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6464:	f06f 0301 	mvn.w	r3, #1
    6468:	1a5b      	subs	r3, r3, r1
    646a:	f04f 33ff 	mov.w	r3, #4294967295
    646e:	eb63 0304 	sbc.w	r3, r3, r4
    6472:	2b00      	cmp	r3, #0
    6474:	da09      	bge.n	648a <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6476:	2901      	cmp	r1, #1
    6478:	f174 0300 	sbcs.w	r3, r4, #0
    647c:	bfbc      	itt	lt
    647e:	2101      	movlt	r1, #1
    6480:	2400      	movlt	r4, #0
    6482:	f111 39ff 	adds.w	r9, r1, #4294967295
    6486:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    648a:	4630      	mov	r0, r6
    648c:	f001 f951 	bl	7732 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    6490:	2300      	movs	r3, #0
    6492:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    6494:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6498:	464a      	mov	r2, r9
    649a:	4643      	mov	r3, r8
    649c:	4630      	mov	r0, r6
    649e:	4903      	ldr	r1, [pc, #12]	; (64ac <z_impl_k_timer_start+0xa0>)
		     duration);
}
    64a0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    64a4:	f7ff be7e 	b.w	61a4 <z_add_timeout>
}
    64a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    64ac:	00006381 	.word	0x00006381

000064b0 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    64b0:	4a02      	ldr	r2, [pc, #8]	; (64bc <boot_banner+0xc>)
    64b2:	4903      	ldr	r1, [pc, #12]	; (64c0 <boot_banner+0x10>)
    64b4:	4803      	ldr	r0, [pc, #12]	; (64c4 <boot_banner+0x14>)
    64b6:	f000 b867 	b.w	6588 <printk>
    64ba:	bf00      	nop
    64bc:	00008408 	.word	0x00008408
    64c0:	000087cb 	.word	0x000087cb
    64c4:	000087d8 	.word	0x000087d8

000064c8 <cbpprintf_external>:
{
    64c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    64cc:	4607      	mov	r7, r0
    64ce:	460e      	mov	r6, r1
    64d0:	4690      	mov	r8, r2
	if (buf == NULL) {
    64d2:	461d      	mov	r5, r3
    64d4:	b30b      	cbz	r3, 651a <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    64d6:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    64d8:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    64da:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    64de:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    64e0:	441c      	add	r4, r3
    64e2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    64e6:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    64e8:	f04f 0900 	mov.w	r9, #0
    64ec:	45d1      	cmp	r9, sl
    64ee:	d308      	bcc.n	6502 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    64f0:	686a      	ldr	r2, [r5, #4]
    64f2:	f105 0308 	add.w	r3, r5, #8
    64f6:	4641      	mov	r1, r8
    64f8:	4638      	mov	r0, r7
    64fa:	46b4      	mov	ip, r6
}
    64fc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6500:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6502:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    6506:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    650a:	4620      	mov	r0, r4
    650c:	f000 fc49 	bl	6da2 <strlen>
    6510:	3001      	adds	r0, #1
    6512:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    6514:	f109 0901 	add.w	r9, r9, #1
    6518:	e7e8      	b.n	64ec <cbpprintf_external+0x24>
}
    651a:	f06f 0015 	mvn.w	r0, #21
    651e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006522 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6522:	4603      	mov	r3, r0
    6524:	b158      	cbz	r0, 653e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6526:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    6528:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    652c:	2a01      	cmp	r2, #1
    652e:	d003      	beq.n	6538 <sys_notify_validate+0x16>
    6530:	2a03      	cmp	r2, #3
    6532:	d104      	bne.n	653e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    6534:	6802      	ldr	r2, [r0, #0]
    6536:	b112      	cbz	r2, 653e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    6538:	2000      	movs	r0, #0
    653a:	6098      	str	r0, [r3, #8]
    653c:	4770      	bx	lr
		return -EINVAL;
    653e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6542:	4770      	bx	lr

00006544 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    6544:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    6546:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    6548:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    654c:	2a03      	cmp	r2, #3
    654e:	f04f 0200 	mov.w	r2, #0
{
    6552:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    6554:	bf0c      	ite	eq
    6556:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    6558:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    655a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    655c:	4770      	bx	lr

0000655e <arch_printk_char_out>:
}
    655e:	2000      	movs	r0, #0
    6560:	4770      	bx	lr

00006562 <str_out>:
{
    6562:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    6564:	688a      	ldr	r2, [r1, #8]
    6566:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    6568:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    656a:	b114      	cbz	r4, 6572 <str_out+0x10>
    656c:	684b      	ldr	r3, [r1, #4]
    656e:	4293      	cmp	r3, r2
    6570:	dc01      	bgt.n	6576 <str_out+0x14>
		ctx->count++;
    6572:	608d      	str	r5, [r1, #8]
}
    6574:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    6576:	3b01      	subs	r3, #1
    6578:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    657a:	bf08      	it	eq
    657c:	2200      	moveq	r2, #0
    657e:	608d      	str	r5, [r1, #8]
    6580:	bf0c      	ite	eq
    6582:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    6584:	54a0      	strbne	r0, [r4, r2]
    6586:	e7f5      	b.n	6574 <str_out+0x12>

00006588 <printk>:
{
    6588:	b40f      	push	{r0, r1, r2, r3}
    658a:	b507      	push	{r0, r1, r2, lr}
    658c:	a904      	add	r1, sp, #16
    658e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    6592:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    6594:	f000 fb30 	bl	6bf8 <z_log_vprintk>
}
    6598:	b003      	add	sp, #12
    659a:	f85d eb04 	ldr.w	lr, [sp], #4
    659e:	b004      	add	sp, #16
    65a0:	4770      	bx	lr

000065a2 <snprintk>:
{
    65a2:	b40c      	push	{r2, r3}
    65a4:	b507      	push	{r0, r1, r2, lr}
    65a6:	ab04      	add	r3, sp, #16
    65a8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    65ac:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    65ae:	f7fa fac7 	bl	b40 <vsnprintk>
}
    65b2:	b003      	add	sp, #12
    65b4:	f85d eb04 	ldr.w	lr, [sp], #4
    65b8:	b002      	add	sp, #8
    65ba:	4770      	bx	lr

000065bc <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    65bc:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    65be:	f013 0307 	ands.w	r3, r3, #7
    65c2:	d105      	bne.n	65d0 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    65c4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    65c6:	2b00      	cmp	r3, #0
    65c8:	bf0c      	ite	eq
    65ca:	2000      	moveq	r0, #0
    65cc:	2003      	movne	r0, #3
    65ce:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    65d0:	2b02      	cmp	r3, #2
    65d2:	d105      	bne.n	65e0 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    65d4:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    65d6:	2b00      	cmp	r3, #0
    65d8:	bf14      	ite	ne
    65da:	2000      	movne	r0, #0
    65dc:	2004      	moveq	r0, #4
    65de:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    65e0:	2b01      	cmp	r3, #1
    65e2:	d105      	bne.n	65f0 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    65e4:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    65e6:	2b00      	cmp	r3, #0
    65e8:	bf0c      	ite	eq
    65ea:	2000      	moveq	r0, #0
    65ec:	2005      	movne	r0, #5
    65ee:	4770      	bx	lr
	int evt = EVT_NOP;
    65f0:	2000      	movs	r0, #0
}
    65f2:	4770      	bx	lr

000065f4 <notify_one>:
{
    65f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    65f8:	460d      	mov	r5, r1
    65fa:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    65fc:	4619      	mov	r1, r3
    65fe:	1d28      	adds	r0, r5, #4
{
    6600:	4690      	mov	r8, r2
    6602:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6604:	f7ff ff9e 	bl	6544 <sys_notify_finalize>
	if (cb) {
    6608:	4604      	mov	r4, r0
    660a:	b138      	cbz	r0, 661c <notify_one+0x28>
		cb(mgr, cli, state, res);
    660c:	4633      	mov	r3, r6
    660e:	4642      	mov	r2, r8
    6610:	4629      	mov	r1, r5
    6612:	4638      	mov	r0, r7
    6614:	46a4      	mov	ip, r4
}
    6616:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    661a:	4760      	bx	ip
}
    661c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006620 <transition_complete>:
{
    6620:	b410      	push	{r4}
	__asm__ volatile(
    6622:	f04f 0420 	mov.w	r4, #32
    6626:	f3ef 8211 	mrs	r2, BASEPRI
    662a:	f384 8812 	msr	BASEPRI_MAX, r4
    662e:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6632:	6141      	str	r1, [r0, #20]
}
    6634:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    6636:	2101      	movs	r1, #1
    6638:	f7fa ba96 	b.w	b68 <process_event>

0000663c <validate_args>:
{
    663c:	b510      	push	{r4, lr}
    663e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6640:	b140      	cbz	r0, 6654 <validate_args+0x18>
    6642:	b139      	cbz	r1, 6654 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    6644:	1d08      	adds	r0, r1, #4
    6646:	f7ff ff6c 	bl	6522 <sys_notify_validate>
	if ((rv == 0)
    664a:	b928      	cbnz	r0, 6658 <validate_args+0x1c>
	    && ((cli->notify.flags
    664c:	68a3      	ldr	r3, [r4, #8]
    664e:	f033 0303 	bics.w	r3, r3, #3
    6652:	d001      	beq.n	6658 <validate_args+0x1c>
		rv = -EINVAL;
    6654:	f06f 0015 	mvn.w	r0, #21
}
    6658:	bd10      	pop	{r4, pc}

0000665a <onoff_manager_init>:
{
    665a:	b538      	push	{r3, r4, r5, lr}
    665c:	460c      	mov	r4, r1
	if ((mgr == NULL)
    665e:	4605      	mov	r5, r0
    6660:	b158      	cbz	r0, 667a <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6662:	b151      	cbz	r1, 667a <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    6664:	680b      	ldr	r3, [r1, #0]
    6666:	b143      	cbz	r3, 667a <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    6668:	684b      	ldr	r3, [r1, #4]
    666a:	b133      	cbz	r3, 667a <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    666c:	221c      	movs	r2, #28
    666e:	2100      	movs	r1, #0
    6670:	f000 fbb2 	bl	6dd8 <memset>
    6674:	612c      	str	r4, [r5, #16]
	return 0;
    6676:	2000      	movs	r0, #0
}
    6678:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    667a:	f06f 0015 	mvn.w	r0, #21
    667e:	e7fb      	b.n	6678 <onoff_manager_init+0x1e>

00006680 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    6680:	b570      	push	{r4, r5, r6, lr}
    6682:	4604      	mov	r4, r0
    6684:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    6686:	f7ff ffd9 	bl	663c <validate_args>

	if (rv < 0) {
    668a:	1e05      	subs	r5, r0, #0
    668c:	db31      	blt.n	66f2 <onoff_request+0x72>
    668e:	f04f 0320 	mov.w	r3, #32
    6692:	f3ef 8111 	mrs	r1, BASEPRI
    6696:	f383 8812 	msr	BASEPRI_MAX, r3
    669a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    669e:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    66a0:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    66a2:	f64f 75ff 	movw	r5, #65535	; 0xffff
    66a6:	42ab      	cmp	r3, r5
    66a8:	f000 0207 	and.w	r2, r0, #7
    66ac:	d02e      	beq.n	670c <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    66ae:	2a02      	cmp	r2, #2
    66b0:	d10e      	bne.n	66d0 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    66b2:	3301      	adds	r3, #1
    66b4:	8363      	strh	r3, [r4, #26]
	rv = state;
    66b6:	4615      	mov	r5, r2
		notify = true;
    66b8:	2301      	movs	r3, #1
	__asm__ volatile(
    66ba:	f381 8811 	msr	BASEPRI, r1
    66be:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    66c2:	b1b3      	cbz	r3, 66f2 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    66c4:	2300      	movs	r3, #0
    66c6:	4631      	mov	r1, r6
    66c8:	4620      	mov	r0, r4
    66ca:	f7ff ff93 	bl	65f4 <notify_one>
    66ce:	e010      	b.n	66f2 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    66d0:	0783      	lsls	r3, r0, #30
    66d2:	d001      	beq.n	66d8 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    66d4:	2a06      	cmp	r2, #6
    66d6:	d10e      	bne.n	66f6 <onoff_request+0x76>
	parent->next = child;
    66d8:	2300      	movs	r3, #0
    66da:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    66dc:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    66de:	b993      	cbnz	r3, 6706 <onoff_request+0x86>
	list->head = node;
    66e0:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    66e4:	4615      	mov	r5, r2
    66e6:	b962      	cbnz	r2, 6702 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    66e8:	460a      	mov	r2, r1
    66ea:	4620      	mov	r0, r4
    66ec:	2102      	movs	r1, #2
    66ee:	f7fa fa3b 	bl	b68 <process_event>
		}
	}

	return rv;
}
    66f2:	4628      	mov	r0, r5
    66f4:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    66f6:	2a05      	cmp	r2, #5
    66f8:	bf0c      	ite	eq
    66fa:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    66fe:	f06f 0504 	mvnne.w	r5, #4
    6702:	2300      	movs	r3, #0
    6704:	e7d9      	b.n	66ba <onoff_request+0x3a>
	parent->next = child;
    6706:	601e      	str	r6, [r3, #0]
	list->tail = node;
    6708:	6066      	str	r6, [r4, #4]
}
    670a:	e7eb      	b.n	66e4 <onoff_request+0x64>
		rv = -EAGAIN;
    670c:	f06f 050a 	mvn.w	r5, #10
    6710:	e7f7      	b.n	6702 <onoff_request+0x82>

00006712 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6712:	4604      	mov	r4, r0
    6714:	b508      	push	{r3, lr}
    6716:	4608      	mov	r0, r1
    6718:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    671a:	461a      	mov	r2, r3
    671c:	47a0      	blx	r4
	return z_impl_z_current_get();
    671e:	f7ff fc85 	bl	602c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    6722:	f7fc fa3d 	bl	2ba0 <z_impl_k_thread_abort>

00006726 <encode_uint>:
{
    6726:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    672a:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    672c:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    672e:	2b6f      	cmp	r3, #111	; 0x6f
{
    6730:	4680      	mov	r8, r0
    6732:	460f      	mov	r7, r1
    6734:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    6736:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    673a:	d029      	beq.n	6790 <encode_uint+0x6a>
    673c:	d824      	bhi.n	6788 <encode_uint+0x62>
		return 16;
    673e:	2b58      	cmp	r3, #88	; 0x58
    6740:	bf14      	ite	ne
    6742:	260a      	movne	r6, #10
    6744:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    6746:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    674a:	4632      	mov	r2, r6
    674c:	2300      	movs	r3, #0
    674e:	4640      	mov	r0, r8
    6750:	4639      	mov	r1, r7
    6752:	f7f9 fcc3 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6756:	2a09      	cmp	r2, #9
    6758:	b2d4      	uxtb	r4, r2
    675a:	d81e      	bhi.n	679a <encode_uint+0x74>
    675c:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    675e:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6760:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    6762:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    6766:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    676a:	d301      	bcc.n	6770 <encode_uint+0x4a>
    676c:	45d1      	cmp	r9, sl
    676e:	d811      	bhi.n	6794 <encode_uint+0x6e>
	if (conv->flag_hash) {
    6770:	782b      	ldrb	r3, [r5, #0]
    6772:	069b      	lsls	r3, r3, #26
    6774:	d505      	bpl.n	6782 <encode_uint+0x5c>
		if (radix == 8) {
    6776:	2e08      	cmp	r6, #8
    6778:	d115      	bne.n	67a6 <encode_uint+0x80>
			conv->altform_0 = true;
    677a:	78ab      	ldrb	r3, [r5, #2]
    677c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6780:	70ab      	strb	r3, [r5, #2]
}
    6782:	4648      	mov	r0, r9
    6784:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6788:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    678c:	2b70      	cmp	r3, #112	; 0x70
    678e:	e7d7      	b.n	6740 <encode_uint+0x1a>
	switch (specifier) {
    6790:	2608      	movs	r6, #8
    6792:	e7d8      	b.n	6746 <encode_uint+0x20>
		value /= radix;
    6794:	4680      	mov	r8, r0
    6796:	460f      	mov	r7, r1
    6798:	e7d7      	b.n	674a <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    679a:	f1bb 0f19 	cmp.w	fp, #25
    679e:	bf94      	ite	ls
    67a0:	3437      	addls	r4, #55	; 0x37
    67a2:	3457      	addhi	r4, #87	; 0x57
    67a4:	e7db      	b.n	675e <encode_uint+0x38>
		} else if (radix == 16) {
    67a6:	2e10      	cmp	r6, #16
    67a8:	d1eb      	bne.n	6782 <encode_uint+0x5c>
			conv->altform_0c = true;
    67aa:	78ab      	ldrb	r3, [r5, #2]
    67ac:	f043 0310 	orr.w	r3, r3, #16
    67b0:	e7e6      	b.n	6780 <encode_uint+0x5a>

000067b2 <outs>:
{
    67b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67b6:	4607      	mov	r7, r0
    67b8:	4688      	mov	r8, r1
    67ba:	4615      	mov	r5, r2
    67bc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    67be:	4614      	mov	r4, r2
    67c0:	42b4      	cmp	r4, r6
    67c2:	eba4 0005 	sub.w	r0, r4, r5
    67c6:	d302      	bcc.n	67ce <outs+0x1c>
    67c8:	b93e      	cbnz	r6, 67da <outs+0x28>
    67ca:	7823      	ldrb	r3, [r4, #0]
    67cc:	b12b      	cbz	r3, 67da <outs+0x28>
		int rc = out((int)*sp++, ctx);
    67ce:	f814 0b01 	ldrb.w	r0, [r4], #1
    67d2:	4641      	mov	r1, r8
    67d4:	47b8      	blx	r7
		if (rc < 0) {
    67d6:	2800      	cmp	r0, #0
    67d8:	daf2      	bge.n	67c0 <outs+0xe>
}
    67da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067de <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    67de:	4602      	mov	r2, r0
    67e0:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    67e2:	68c0      	ldr	r0, [r0, #12]
    67e4:	6814      	ldr	r4, [r2, #0]
    67e6:	42a0      	cmp	r0, r4
    67e8:	d904      	bls.n	67f4 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    67ea:	3801      	subs	r0, #1
    67ec:	1b00      	subs	r0, r0, r4
    67ee:	6008      	str	r0, [r1, #0]

		return false;
    67f0:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    67f2:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    67f4:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    67f6:	b918      	cbnz	r0, 6800 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    67f8:	3b01      	subs	r3, #1
    67fa:	1b1b      	subs	r3, r3, r4
    67fc:	600b      	str	r3, [r1, #0]
		return false;
    67fe:	e7f8      	b.n	67f2 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    6800:	1b1b      	subs	r3, r3, r4
    6802:	600b      	str	r3, [r1, #0]
	return true;
    6804:	2001      	movs	r0, #1
    6806:	e7f4      	b.n	67f2 <free_space+0x14>

00006808 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6808:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    680a:	a901      	add	r1, sp, #4
{
    680c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    680e:	f7ff ffe6 	bl	67de <free_space>
    6812:	b120      	cbz	r0, 681e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6814:	9b01      	ldr	r3, [sp, #4]
    6816:	68e2      	ldr	r2, [r4, #12]
    6818:	3b01      	subs	r3, #1
    681a:	4413      	add	r3, r2
    681c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    681e:	9801      	ldr	r0, [sp, #4]
    6820:	6a23      	ldr	r3, [r4, #32]
    6822:	43c0      	mvns	r0, r0
}
    6824:	4418      	add	r0, r3
    6826:	b002      	add	sp, #8
    6828:	bd10      	pop	{r4, pc}

0000682a <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    682a:	b510      	push	{r4, lr}
    682c:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    682e:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6830:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    6832:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    6834:	07d2      	lsls	r2, r2, #31
    6836:	d502      	bpl.n	683e <idx_inc+0x14>
		return i & (buffer->size - 1);
    6838:	3b01      	subs	r3, #1
    683a:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    683c:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    683e:	4298      	cmp	r0, r3
    6840:	bf28      	it	cs
    6842:	1ac0      	subcs	r0, r0, r3
    6844:	e7fa      	b.n	683c <idx_inc+0x12>

00006846 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    6846:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6848:	69c2      	ldr	r2, [r0, #28]
{
    684a:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    684c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    684e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    6850:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    6854:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6858:	462a      	mov	r2, r5
    685a:	6801      	ldr	r1, [r0, #0]
{
    685c:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    685e:	f7ff ffe4 	bl	682a <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6862:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    6864:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6866:	462a      	mov	r2, r5
    6868:	4620      	mov	r0, r4
    686a:	f7ff ffde 	bl	682a <idx_inc>
    686e:	6060      	str	r0, [r4, #4]
}
    6870:	bd38      	pop	{r3, r4, r5, pc}

00006872 <max_utilization_update>:
{
    6872:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    6874:	6903      	ldr	r3, [r0, #16]
    6876:	075b      	lsls	r3, r3, #29
{
    6878:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    687a:	d506      	bpl.n	688a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    687c:	6a45      	ldr	r5, [r0, #36]	; 0x24
    687e:	f7ff ffc3 	bl	6808 <get_usage>
    6882:	4285      	cmp	r5, r0
    6884:	d902      	bls.n	688c <max_utilization_update+0x1a>
    6886:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6888:	6260      	str	r0, [r4, #36]	; 0x24
}
    688a:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    688c:	4620      	mov	r0, r4
    688e:	f7ff ffbb 	bl	6808 <get_usage>
    6892:	e7f9      	b.n	6888 <max_utilization_update+0x16>

00006894 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    6894:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6898:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    689c:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    68a0:	461f      	mov	r7, r3
	*user_packet = false;
    68a2:	2300      	movs	r3, #0
    68a4:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    68a6:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    68aa:	f003 0303 	and.w	r3, r3, #3
    68ae:	2b02      	cmp	r3, #2
{
    68b0:	4604      	mov	r4, r0
    68b2:	468b      	mov	fp, r1
    68b4:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    68b6:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    68ba:	d103      	bne.n	68c4 <drop_item_locked+0x30>
		return item->skip.len;
    68bc:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    68c0:	08ad      	lsrs	r5, r5, #2
    68c2:	d12e      	bne.n	6922 <drop_item_locked+0x8e>
    68c4:	69a3      	ldr	r3, [r4, #24]
    68c6:	4630      	mov	r0, r6
    68c8:	4798      	blx	r3
    68ca:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    68cc:	f1b8 0f00 	cmp.w	r8, #0
    68d0:	d036      	beq.n	6940 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    68d2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    68d6:	079b      	lsls	r3, r3, #30
    68d8:	d52f      	bpl.n	693a <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    68da:	f10b 0101 	add.w	r1, fp, #1
    68de:	4620      	mov	r0, r4
    68e0:	f7ff ffb1 	bl	6846 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    68e4:	6861      	ldr	r1, [r4, #4]
    68e6:	462a      	mov	r2, r5
    68e8:	4620      	mov	r0, r4
    68ea:	f7ff ff9e 	bl	682a <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    68ee:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    68f0:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    68f2:	462a      	mov	r2, r5
    68f4:	4620      	mov	r0, r4
    68f6:	f7ff ff98 	bl	682a <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    68fa:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    68fc:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    68fe:	68e1      	ldr	r1, [r4, #12]
    6900:	4620      	mov	r0, r4
    6902:	f7ff ff92 	bl	682a <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6906:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    6908:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    690c:	f002 0203 	and.w	r2, r2, #3
    6910:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6912:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6916:	d10c      	bne.n	6932 <drop_item_locked+0x9e>
		return item->skip.len;
    6918:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    691c:	089b      	lsrs	r3, r3, #2
    691e:	d008      	beq.n	6932 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    6920:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    6922:	68e1      	ldr	r1, [r4, #12]
    6924:	462a      	mov	r2, r5
    6926:	4620      	mov	r0, r4
    6928:	f7ff ff7f 	bl	682a <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    692c:	e9c4 0002 	strd	r0, r0, [r4, #8]
    6930:	e007      	b.n	6942 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    6932:	69a3      	ldr	r3, [r4, #24]
    6934:	4630      	mov	r0, r6
    6936:	4798      	blx	r3
    6938:	4405      	add	r5, r0
			*user_packet = true;
    693a:	2301      	movs	r3, #1
    693c:	703b      	strb	r3, [r7, #0]
    693e:	e7f0      	b.n	6922 <drop_item_locked+0x8e>
		item = NULL;
    6940:	4646      	mov	r6, r8
	}

	return item;
}
    6942:	4630      	mov	r0, r6
    6944:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006948 <mpsc_pbuf_init>:
{
    6948:	b538      	push	{r3, r4, r5, lr}
    694a:	460d      	mov	r5, r1
    694c:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    694e:	221c      	movs	r2, #28
    6950:	2100      	movs	r1, #0
    6952:	f000 fa41 	bl	6dd8 <memset>
	buffer->get_wlen = cfg->get_wlen;
    6956:	68eb      	ldr	r3, [r5, #12]
    6958:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    695a:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    695c:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    695e:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    6960:	682b      	ldr	r3, [r5, #0]
    6962:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    6964:	2300      	movs	r3, #0
    6966:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    6968:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    696a:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    696c:	b122      	cbz	r2, 6978 <mpsc_pbuf_init+0x30>
    696e:	1e51      	subs	r1, r2, #1
    6970:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    6972:	bf08      	it	eq
    6974:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    6978:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    697a:	2201      	movs	r2, #1
    697c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6980:	2100      	movs	r1, #0
}
    6982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6986:	f000 be01 	b.w	758c <z_impl_k_sem_init>

0000698a <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    698a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    698e:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6990:	6a03      	ldr	r3, [r0, #32]
    6992:	3b01      	subs	r3, #1
    6994:	428b      	cmp	r3, r1
{
    6996:	b085      	sub	sp, #20
    6998:	4604      	mov	r4, r0
    699a:	460f      	mov	r7, r1
    699c:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    699e:	d364      	bcc.n	6a6a <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    69a0:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    69a2:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    69a4:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    69a8:	f04f 0320 	mov.w	r3, #32
    69ac:	f3ef 8611 	mrs	r6, BASEPRI
    69b0:	f383 8812 	msr	BASEPRI_MAX, r3
    69b4:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    69b8:	a903      	add	r1, sp, #12
    69ba:	4620      	mov	r0, r4
    69bc:	f7ff ff0f 	bl	67de <free_space>
		if (free_wlen >= wlen) {
    69c0:	9903      	ldr	r1, [sp, #12]
    69c2:	42b9      	cmp	r1, r7
    69c4:	d321      	bcc.n	6a0a <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    69c6:	6821      	ldr	r1, [r4, #0]
			item =
    69c8:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    69ca:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    69ce:	f022 0203 	bic.w	r2, r2, #3
    69d2:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    69d6:	4620      	mov	r0, r4
    69d8:	463a      	mov	r2, r7
			item =
    69da:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    69de:	f7ff ff24 	bl	682a <idx_inc>
		cont = false;
    69e2:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    69e4:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    69e6:	f386 8811 	msr	BASEPRI, r6
    69ea:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    69ee:	2b00      	cmp	r3, #0
    69f0:	d03d      	beq.n	6a6e <mpsc_pbuf_alloc+0xe4>
    69f2:	2d00      	cmp	r5, #0
    69f4:	d0d8      	beq.n	69a8 <mpsc_pbuf_alloc+0x1e>
    69f6:	f89d 300b 	ldrb.w	r3, [sp, #11]
    69fa:	2b00      	cmp	r3, #0
    69fc:	d0d4      	beq.n	69a8 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    69fe:	4629      	mov	r1, r5
    6a00:	6963      	ldr	r3, [r4, #20]
    6a02:	4620      	mov	r0, r4
    6a04:	4798      	blx	r3
			dropped_item = NULL;
    6a06:	2500      	movs	r5, #0
    6a08:	e7ce      	b.n	69a8 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    6a0a:	b128      	cbz	r0, 6a18 <mpsc_pbuf_alloc+0x8e>
    6a0c:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    6a0e:	4620      	mov	r0, r4
    6a10:	f7ff ff19 	bl	6846 <add_skip_item>
			cont = true;
    6a14:	9b01      	ldr	r3, [sp, #4]
    6a16:	e7e6      	b.n	69e6 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6a18:	ea58 0309 	orrs.w	r3, r8, r9
    6a1c:	d017      	beq.n	6a4e <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    6a1e:	f000 fd9b 	bl	7558 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6a22:	b9a0      	cbnz	r0, 6a4e <mpsc_pbuf_alloc+0xc4>
    6a24:	f386 8811 	msr	BASEPRI, r6
    6a28:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    6a2c:	4642      	mov	r2, r8
    6a2e:	464b      	mov	r3, r9
    6a30:	4658      	mov	r0, fp
    6a32:	f7fe ffe1 	bl	59f8 <z_impl_k_sem_take>
	__asm__ volatile(
    6a36:	f04f 0320 	mov.w	r3, #32
    6a3a:	f3ef 8611 	mrs	r6, BASEPRI
    6a3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6a42:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    6a46:	fab0 f380 	clz	r3, r0
    6a4a:	095b      	lsrs	r3, r3, #5
    6a4c:	e7cb      	b.n	69e6 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    6a4e:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    6a50:	9903      	ldr	r1, [sp, #12]
    6a52:	f10d 030b 	add.w	r3, sp, #11
    6a56:	f3c2 0240 	ubfx	r2, r2, #1, #1
    6a5a:	4620      	mov	r0, r4
    6a5c:	f7ff ff1a 	bl	6894 <drop_item_locked>
			cont = dropped_item != NULL;
    6a60:	1e03      	subs	r3, r0, #0
    6a62:	4605      	mov	r5, r0
    6a64:	bf18      	it	ne
    6a66:	2301      	movne	r3, #1
    6a68:	e7bd      	b.n	69e6 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    6a6a:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    6a6e:	4650      	mov	r0, sl
    6a70:	b005      	add	sp, #20
    6a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00006a76 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    6a76:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6a78:	6983      	ldr	r3, [r0, #24]
{
    6a7a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6a7c:	4608      	mov	r0, r1
{
    6a7e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6a80:	4798      	blx	r3
    6a82:	4602      	mov	r2, r0
    6a84:	f04f 0320 	mov.w	r3, #32
    6a88:	f3ef 8611 	mrs	r6, BASEPRI
    6a8c:	f383 8812 	msr	BASEPRI_MAX, r3
    6a90:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6a94:	782b      	ldrb	r3, [r5, #0]
    6a96:	f043 0301 	orr.w	r3, r3, #1
    6a9a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    6a9c:	6861      	ldr	r1, [r4, #4]
    6a9e:	4620      	mov	r0, r4
    6aa0:	f7ff fec3 	bl	682a <idx_inc>
    6aa4:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6aa6:	4620      	mov	r0, r4
    6aa8:	f7ff fee3 	bl	6872 <max_utilization_update>
	__asm__ volatile(
    6aac:	f386 8811 	msr	BASEPRI, r6
    6ab0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    6ab4:	bd70      	pop	{r4, r5, r6, pc}

00006ab6 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6aba:	4604      	mov	r4, r0
	__asm__ volatile(
    6abc:	f04f 0320 	mov.w	r3, #32
    6ac0:	f3ef 8611 	mrs	r6, BASEPRI
    6ac4:	f383 8812 	msr	BASEPRI_MAX, r3
    6ac8:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6acc:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    6ad0:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6ad2:	bf88      	it	hi
    6ad4:	6a23      	ldrhi	r3, [r4, #32]
    6ad6:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    6ad8:	b1f3      	cbz	r3, 6b18 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    6ada:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    6adc:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    6ae0:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    6ae4:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    6ae8:	d016      	beq.n	6b18 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    6aea:	2b02      	cmp	r3, #2
    6aec:	d103      	bne.n	6af6 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    6aee:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    6af2:	08ad      	lsrs	r5, r5, #2
    6af4:	d115      	bne.n	6b22 <mpsc_pbuf_claim+0x6c>
    6af6:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    6af8:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    6afa:	d50f      	bpl.n	6b1c <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    6afc:	f042 0202 	orr.w	r2, r2, #2
    6b00:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6b04:	4640      	mov	r0, r8
    6b06:	4798      	blx	r3
    6b08:	4639      	mov	r1, r7
    6b0a:	4602      	mov	r2, r0
    6b0c:	4620      	mov	r0, r4
    6b0e:	f7ff fe8c 	bl	682a <idx_inc>
		cont = false;
    6b12:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    6b14:	60a0      	str	r0, [r4, #8]
    6b16:	e011      	b.n	6b3c <mpsc_pbuf_claim+0x86>
			item = NULL;
    6b18:	4698      	mov	r8, r3
    6b1a:	e00f      	b.n	6b3c <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    6b1c:	4640      	mov	r0, r8
    6b1e:	4798      	blx	r3
    6b20:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    6b22:	68a1      	ldr	r1, [r4, #8]
    6b24:	462a      	mov	r2, r5
    6b26:	4620      	mov	r0, r4
    6b28:	f7ff fe7f 	bl	682a <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    6b2c:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    6b2e:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    6b30:	462a      	mov	r2, r5
    6b32:	4620      	mov	r0, r4
    6b34:	f7ff fe79 	bl	682a <idx_inc>
				cont = true;
    6b38:	2301      	movs	r3, #1
				buffer->rd_idx =
    6b3a:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6b3c:	f386 8811 	msr	BASEPRI, r6
    6b40:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    6b44:	2b00      	cmp	r3, #0
    6b46:	d1b9      	bne.n	6abc <mpsc_pbuf_claim+0x6>

	return item;
}
    6b48:	4640      	mov	r0, r8
    6b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006b4e <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    6b4e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    6b50:	6983      	ldr	r3, [r0, #24]
{
    6b52:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    6b54:	4608      	mov	r0, r1
{
    6b56:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6b58:	4798      	blx	r3
    6b5a:	4602      	mov	r2, r0
	__asm__ volatile(
    6b5c:	f04f 0320 	mov.w	r3, #32
    6b60:	f3ef 8611 	mrs	r6, BASEPRI
    6b64:	f383 8812 	msr	BASEPRI_MAX, r3
    6b68:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    6b6c:	782b      	ldrb	r3, [r5, #0]
    6b6e:	f36f 0300 	bfc	r3, #0, #1
    6b72:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6b74:	6923      	ldr	r3, [r4, #16]
    6b76:	079b      	lsls	r3, r3, #30
    6b78:	d505      	bpl.n	6b86 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    6b7a:	68e1      	ldr	r1, [r4, #12]
    6b7c:	69e3      	ldr	r3, [r4, #28]
    6b7e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6b82:	429d      	cmp	r5, r3
    6b84:	d112      	bne.n	6bac <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    6b86:	782b      	ldrb	r3, [r5, #0]
    6b88:	f36f 0341 	bfc	r3, #1, #1
    6b8c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    6b8e:	68e1      	ldr	r1, [r4, #12]
    6b90:	4620      	mov	r0, r4
    6b92:	f7ff fe4a 	bl	682a <idx_inc>
    6b96:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6b98:	f386 8811 	msr	BASEPRI, r6
    6b9c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6ba0:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    6ba4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6ba8:	f7fe bf06 	b.w	59b8 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    6bac:	682b      	ldr	r3, [r5, #0]
    6bae:	f360 039f 	bfi	r3, r0, #2, #30
    6bb2:	602b      	str	r3, [r5, #0]
    6bb4:	e7f0      	b.n	6b98 <mpsc_pbuf_free+0x4a>

00006bb6 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6bb6:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    6bba:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    6bbc:	bf8a      	itet	hi
    6bbe:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    6bc0:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6bc2:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    6bc4:	1e18      	subs	r0, r3, #0
    6bc6:	bf18      	it	ne
    6bc8:	2001      	movne	r0, #1
    6bca:	4770      	bx	lr

00006bcc <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    6bcc:	4770      	bx	lr

00006bce <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    6bce:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    6bd0:	075b      	lsls	r3, r3, #29
    6bd2:	d40b      	bmi.n	6bec <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6bd4:	6803      	ldr	r3, [r0, #0]
    6bd6:	8840      	ldrh	r0, [r0, #2]
    6bd8:	f3c3 2349 	ubfx	r3, r3, #9, #10
    6bdc:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    6be0:	4418      	add	r0, r3
    6be2:	3017      	adds	r0, #23
    6be4:	f020 0007 	bic.w	r0, r0, #7
    6be8:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    6bea:	4770      	bx	lr
	return 0;
    6bec:	2000      	movs	r0, #0
}
    6bee:	4770      	bx	lr

00006bf0 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6bf0:	f000 bb47 	b.w	7282 <sys_clock_cycle_get_32>

00006bf4 <dummy_timestamp>:
    6bf4:	2000      	movs	r0, #0
    6bf6:	4770      	bx	lr

00006bf8 <z_log_vprintk>:
{
    6bf8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    6bfa:	2300      	movs	r3, #0
    6bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6c00:	e9cd 3300 	strd	r3, r3, [sp]
    6c04:	461a      	mov	r2, r3
    6c06:	4619      	mov	r1, r3
    6c08:	4618      	mov	r0, r3
    6c0a:	f7fb f835 	bl	1c78 <z_impl_z_log_msg2_runtime_vcreate>
}
    6c0e:	b005      	add	sp, #20
    6c10:	f85d fb04 	ldr.w	pc, [sp], #4

00006c14 <notify_drop>:
	z_log_dropped(true);
    6c14:	2001      	movs	r0, #1
    6c16:	f7fa bcbd 	b.w	1594 <z_log_dropped>

00006c1a <get_msg>:
{
    6c1a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    6c1c:	f7fa fd2e 	bl	167c <z_log_msg2_claim>
}
    6c20:	bd08      	pop	{r3, pc}

00006c22 <z_log_get_tag>:
}
    6c22:	2000      	movs	r0, #0
    6c24:	4770      	bx	lr

00006c26 <buffer_write>:
{
    6c26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c28:	4606      	mov	r6, r0
    6c2a:	460d      	mov	r5, r1
    6c2c:	4614      	mov	r4, r2
    6c2e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    6c30:	4621      	mov	r1, r4
    6c32:	4628      	mov	r0, r5
    6c34:	463a      	mov	r2, r7
    6c36:	47b0      	blx	r6
	} while (len != 0);
    6c38:	1a24      	subs	r4, r4, r0
		buf += processed;
    6c3a:	4405      	add	r5, r0
	} while (len != 0);
    6c3c:	d1f8      	bne.n	6c30 <buffer_write+0xa>
}
    6c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006c40 <log_output_flush>:
		     output->control_block->offset,
    6c40:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    6c42:	6881      	ldr	r1, [r0, #8]
{
    6c44:	b510      	push	{r4, lr}
    6c46:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    6c48:	e9d2 2300 	ldrd	r2, r3, [r2]
    6c4c:	6800      	ldr	r0, [r0, #0]
    6c4e:	f7ff ffea 	bl	6c26 <buffer_write>
	output->control_block->offset = 0;
    6c52:	6863      	ldr	r3, [r4, #4]
    6c54:	2200      	movs	r2, #0
    6c56:	601a      	str	r2, [r3, #0]
}
    6c58:	bd10      	pop	{r4, pc}

00006c5a <out_func>:
{
    6c5a:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    6c5c:	684b      	ldr	r3, [r1, #4]
    6c5e:	681a      	ldr	r2, [r3, #0]
    6c60:	68cb      	ldr	r3, [r1, #12]
    6c62:	429a      	cmp	r2, r3
{
    6c64:	4605      	mov	r5, r0
    6c66:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    6c68:	d102      	bne.n	6c70 <out_func+0x16>
		log_output_flush(out_ctx);
    6c6a:	4608      	mov	r0, r1
    6c6c:	f7ff ffe8 	bl	6c40 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    6c70:	6863      	ldr	r3, [r4, #4]
    6c72:	f3bf 8f5b 	dmb	ish
    6c76:	e853 2f00 	ldrex	r2, [r3]
    6c7a:	1c51      	adds	r1, r2, #1
    6c7c:	e843 1000 	strex	r0, r1, [r3]
    6c80:	2800      	cmp	r0, #0
    6c82:	d1f8      	bne.n	6c76 <out_func+0x1c>
    6c84:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6c88:	68a3      	ldr	r3, [r4, #8]
    6c8a:	549d      	strb	r5, [r3, r2]
}
    6c8c:	2000      	movs	r0, #0
    6c8e:	bd38      	pop	{r3, r4, r5, pc}

00006c90 <cr_out_func>:
{
    6c90:	b538      	push	{r3, r4, r5, lr}
    6c92:	4605      	mov	r5, r0
    6c94:	460c      	mov	r4, r1
	out_func(c, ctx);
    6c96:	f7ff ffe0 	bl	6c5a <out_func>
	if (c == '\n') {
    6c9a:	2d0a      	cmp	r5, #10
    6c9c:	d103      	bne.n	6ca6 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    6c9e:	4621      	mov	r1, r4
    6ca0:	200d      	movs	r0, #13
    6ca2:	f7ff ffda 	bl	6c5a <out_func>
}
    6ca6:	2000      	movs	r0, #0
    6ca8:	bd38      	pop	{r3, r4, r5, pc}

00006caa <z_log_msg2_finalize>:
{
    6caa:	b570      	push	{r4, r5, r6, lr}
    6cac:	460e      	mov	r6, r1
    6cae:	4615      	mov	r5, r2
    6cb0:	4619      	mov	r1, r3
	if (!msg) {
    6cb2:	4604      	mov	r4, r0
    6cb4:	b918      	cbnz	r0, 6cbe <z_log_msg2_finalize+0x14>
}
    6cb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    6cba:	f7fa bc6b 	b.w	1594 <z_log_dropped>
	if (data) {
    6cbe:	b143      	cbz	r3, 6cd2 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    6cc0:	f100 0310 	add.w	r3, r0, #16
    6cc4:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    6cc8:	4418      	add	r0, r3
    6cca:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    6cce:	f000 f878 	bl	6dc2 <memcpy>
	msg->hdr.source = source;
    6cd2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    6cd6:	4620      	mov	r0, r4
}
    6cd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    6cdc:	f7fa bd90 	b.w	1800 <z_log_msg2_commit>

00006ce0 <z_impl_z_log_msg2_static_create>:
{
    6ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6ce4:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    6ce8:	f3c1 2649 	ubfx	r6, r1, #9, #10
    6cec:	b089      	sub	sp, #36	; 0x24
    6cee:	4681      	mov	r9, r0
    6cf0:	460d      	mov	r5, r1
    6cf2:	4690      	mov	r8, r2
    6cf4:	469a      	mov	sl, r3
    6cf6:	3417      	adds	r4, #23
	if (inlen > 0) {
    6cf8:	b386      	cbz	r6, 6d5c <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    6cfa:	2302      	movs	r3, #2
    6cfc:	9300      	str	r3, [sp, #0]
    6cfe:	f04f 0b04 	mov.w	fp, #4
    6d02:	2300      	movs	r3, #0
    6d04:	af06      	add	r7, sp, #24
    6d06:	4631      	mov	r1, r6
    6d08:	461a      	mov	r2, r3
    6d0a:	f8cd b008 	str.w	fp, [sp, #8]
    6d0e:	9701      	str	r7, [sp, #4]
    6d10:	4640      	mov	r0, r8
    6d12:	9605      	str	r6, [sp, #20]
    6d14:	f7f9 fdbe 	bl	894 <cbprintf_package_copy>
		out_desc.package_len = len;
    6d18:	f3c0 0309 	ubfx	r3, r0, #0, #10
    6d1c:	1918      	adds	r0, r3, r4
    6d1e:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6d22:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    6d24:	461e      	mov	r6, r3
    6d26:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6d28:	f7fa fca0 	bl	166c <z_log_msg2_alloc>
		if (msg) {
    6d2c:	4604      	mov	r4, r0
    6d2e:	b150      	cbz	r0, 6d46 <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    6d30:	2302      	movs	r3, #2
    6d32:	9300      	str	r3, [sp, #0]
    6d34:	f100 0210 	add.w	r2, r0, #16
    6d38:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    6d3c:	9b04      	ldr	r3, [sp, #16]
    6d3e:	9905      	ldr	r1, [sp, #20]
    6d40:	4640      	mov	r0, r8
    6d42:	f7f9 fda7 	bl	894 <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    6d46:	f366 2552 	bfi	r5, r6, #9, #10
    6d4a:	4653      	mov	r3, sl
    6d4c:	462a      	mov	r2, r5
    6d4e:	4649      	mov	r1, r9
    6d50:	4620      	mov	r0, r4
}
    6d52:	b009      	add	sp, #36	; 0x24
    6d54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    6d58:	f7ff bfa7 	b.w	6caa <z_log_msg2_finalize>
    6d5c:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    6d60:	0880      	lsrs	r0, r0, #2
    6d62:	f7fa fc83 	bl	166c <z_log_msg2_alloc>
    6d66:	4604      	mov	r4, r0
    6d68:	e7ed      	b.n	6d46 <z_impl_z_log_msg2_static_create+0x66>

00006d6a <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    6d6a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    6d6c:	6800      	ldr	r0, [r0, #0]
    6d6e:	f7fb ba1b 	b.w	21a8 <z_arm_fatal_error>

00006d72 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    6d72:	2100      	movs	r1, #0
    6d74:	2001      	movs	r0, #1
    6d76:	f7fb ba17 	b.w	21a8 <z_arm_fatal_error>

00006d7a <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    6d7a:	b508      	push	{r3, lr}
	handler();
    6d7c:	f7fb fac4 	bl	2308 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6d80:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6d84:	f7fb bb9c 	b.w	24c0 <z_arm_exc_exit>

00006d88 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    6d88:	2300      	movs	r3, #0
    6d8a:	f7ff bfa9 	b.w	6ce0 <z_impl_z_log_msg2_static_create>

00006d8e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6d8e:	3901      	subs	r1, #1
    6d90:	4603      	mov	r3, r0
    6d92:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6d96:	b90a      	cbnz	r2, 6d9c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6d98:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6d9a:	4770      	bx	lr
		*d = *s;
    6d9c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6da0:	e7f7      	b.n	6d92 <strcpy+0x4>

00006da2 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6da2:	4603      	mov	r3, r0
	size_t n = 0;
    6da4:	2000      	movs	r0, #0

	while (*s != '\0') {
    6da6:	5c1a      	ldrb	r2, [r3, r0]
    6da8:	b902      	cbnz	r2, 6dac <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6daa:	4770      	bx	lr
		n++;
    6dac:	3001      	adds	r0, #1
    6dae:	e7fa      	b.n	6da6 <strlen+0x4>

00006db0 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6db0:	4603      	mov	r3, r0
	size_t n = 0;
    6db2:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6db4:	5c1a      	ldrb	r2, [r3, r0]
    6db6:	b10a      	cbz	r2, 6dbc <strnlen+0xc>
    6db8:	4288      	cmp	r0, r1
    6dba:	d100      	bne.n	6dbe <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6dbc:	4770      	bx	lr
		n++;
    6dbe:	3001      	adds	r0, #1
    6dc0:	e7f8      	b.n	6db4 <strnlen+0x4>

00006dc2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6dc2:	b510      	push	{r4, lr}
    6dc4:	1e43      	subs	r3, r0, #1
    6dc6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6dc8:	4291      	cmp	r1, r2
    6dca:	d100      	bne.n	6dce <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6dcc:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6dce:	f811 4b01 	ldrb.w	r4, [r1], #1
    6dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6dd6:	e7f7      	b.n	6dc8 <memcpy+0x6>

00006dd8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6dd8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6dda:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6ddc:	4603      	mov	r3, r0
	while (n > 0) {
    6dde:	4293      	cmp	r3, r2
    6de0:	d100      	bne.n	6de4 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6de2:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6de4:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6de8:	e7f9      	b.n	6dde <memset+0x6>

00006dea <_stdout_hook_default>:
}
    6dea:	f04f 30ff 	mov.w	r0, #4294967295
    6dee:	4770      	bx	lr

00006df0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6df0:	2806      	cmp	r0, #6
    6df2:	d108      	bne.n	6e06 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6df8:	2201      	movs	r2, #1
    6dfa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6dfe:	f3bf 8f4f 	dsb	sy
        __WFE();
    6e02:	bf20      	wfe
    while (true)
    6e04:	e7fd      	b.n	6e02 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6e06:	4770      	bx	lr

00006e08 <pm_state_exit_post_ops>:
    6e08:	2300      	movs	r3, #0
    6e0a:	f383 8811 	msr	BASEPRI, r3
    6e0e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6e12:	4770      	bx	lr

00006e14 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6e14:	6903      	ldr	r3, [r0, #16]
    6e16:	b2c9      	uxtb	r1, r1
    6e18:	220c      	movs	r2, #12
    6e1a:	fb01 3302 	mla	r3, r1, r2, r3
    6e1e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6e20:	f000 0007 	and.w	r0, r0, #7
    6e24:	4770      	bx	lr

00006e26 <set_on_state>:
	__asm__ volatile(
    6e26:	f04f 0320 	mov.w	r3, #32
    6e2a:	f3ef 8211 	mrs	r2, BASEPRI
    6e2e:	f383 8812 	msr	BASEPRI_MAX, r3
    6e32:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6e36:	6803      	ldr	r3, [r0, #0]
    6e38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6e3c:	f043 0302 	orr.w	r3, r3, #2
    6e40:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6e42:	f382 8811 	msr	BASEPRI, r2
    6e46:	f3bf 8f6f 	isb	sy
}
    6e4a:	4770      	bx	lr

00006e4c <stop>:
{
    6e4c:	4603      	mov	r3, r0
    6e4e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6e50:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6e52:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6e54:	f04f 0420 	mov.w	r4, #32
    6e58:	f3ef 8611 	mrs	r6, BASEPRI
    6e5c:	f384 8812 	msr	BASEPRI_MAX, r4
    6e60:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6e64:	250c      	movs	r5, #12
    6e66:	fb05 0401 	mla	r4, r5, r1, r0
    6e6a:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6e6c:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6e70:	d001      	beq.n	6e76 <stop+0x2a>
    6e72:	42a2      	cmp	r2, r4
    6e74:	d111      	bne.n	6e9a <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6e76:	fb05 0001 	mla	r0, r5, r1, r0
    6e7a:	2201      	movs	r2, #1
    6e7c:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6e7e:	2000      	movs	r0, #0
	__asm__ volatile(
    6e80:	f386 8811 	msr	BASEPRI, r6
    6e84:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6e88:	b930      	cbnz	r0, 6e98 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6e8a:	685b      	ldr	r3, [r3, #4]
    6e8c:	220c      	movs	r2, #12
    6e8e:	fb02 3101 	mla	r1, r2, r1, r3
    6e92:	684b      	ldr	r3, [r1, #4]
    6e94:	4798      	blx	r3
	return 0;
    6e96:	2000      	movs	r0, #0
}
    6e98:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6e9a:	f04f 30ff 	mov.w	r0, #4294967295
    6e9e:	e7ef      	b.n	6e80 <stop+0x34>

00006ea0 <api_stop>:
	return stop(dev, subsys, CTX_API);
    6ea0:	2280      	movs	r2, #128	; 0x80
    6ea2:	f7ff bfd3 	b.w	6e4c <stop>

00006ea6 <async_start>:
{
    6ea6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ea8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6eaa:	6904      	ldr	r4, [r0, #16]
{
    6eac:	4605      	mov	r5, r0
    6eae:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6eb0:	f04f 0020 	mov.w	r0, #32
    6eb4:	f3ef 8c11 	mrs	ip, BASEPRI
    6eb8:	f380 8812 	msr	BASEPRI_MAX, r0
    6ebc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6ec0:	260c      	movs	r6, #12
    6ec2:	fb06 4601 	mla	r6, r6, r1, r4
    6ec6:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6ec8:	f000 0e07 	and.w	lr, r0, #7
    6ecc:	f1be 0f01 	cmp.w	lr, #1
    6ed0:	d110      	bne.n	6ef4 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6ed2:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6ed4:	2600      	movs	r6, #0
	__asm__ volatile(
    6ed6:	f38c 8811 	msr	BASEPRI, ip
    6eda:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6ede:	b93e      	cbnz	r6, 6ef0 <async_start+0x4a>
	subdata->cb = cb;
    6ee0:	200c      	movs	r0, #12
    6ee2:	4341      	muls	r1, r0
    6ee4:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6ee6:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6eea:	686b      	ldr	r3, [r5, #4]
    6eec:	585b      	ldr	r3, [r3, r1]
    6eee:	4798      	blx	r3
}
    6ef0:	4630      	mov	r0, r6
    6ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6ef4:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6ef8:	4287      	cmp	r7, r0
    6efa:	bf14      	ite	ne
    6efc:	f04f 36ff 	movne.w	r6, #4294967295
    6f00:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6f04:	e7e7      	b.n	6ed6 <async_start+0x30>

00006f06 <api_start>:
{
    6f06:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6f08:	2480      	movs	r4, #128	; 0x80
    6f0a:	9400      	str	r4, [sp, #0]
    6f0c:	f7ff ffcb 	bl	6ea6 <async_start>
}
    6f10:	b002      	add	sp, #8
    6f12:	bd10      	pop	{r4, pc}

00006f14 <onoff_started_callback>:
	return &data->mgr[type];
    6f14:	6900      	ldr	r0, [r0, #16]
{
    6f16:	b410      	push	{r4}
	return &data->mgr[type];
    6f18:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6f1a:	241c      	movs	r4, #28
    6f1c:	fb03 0004 	mla	r0, r3, r4, r0
    6f20:	2100      	movs	r1, #0
}
    6f22:	bc10      	pop	{r4}
	notify(mgr, 0);
    6f24:	4710      	bx	r2

00006f26 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6f26:	2000      	movs	r0, #0
    6f28:	f000 ba9b 	b.w	7462 <nrfx_clock_stop>

00006f2c <blocking_start_callback>:
{
    6f2c:	4610      	mov	r0, r2
    6f2e:	f7fe bd43 	b.w	59b8 <z_impl_k_sem_give>

00006f32 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6f32:	6843      	ldr	r3, [r0, #4]
    6f34:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6f36:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6f3a:	600b      	str	r3, [r1, #0]
}
    6f3c:	2000      	movs	r0, #0
    6f3e:	4770      	bx	lr

00006f40 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6f40:	6843      	ldr	r3, [r0, #4]
    6f42:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6f44:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6f48:	4042      	eors	r2, r0
    6f4a:	400a      	ands	r2, r1
    6f4c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6f4e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6f52:	2000      	movs	r0, #0
    6f54:	4770      	bx	lr

00006f56 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6f56:	6843      	ldr	r3, [r0, #4]
    6f58:	685b      	ldr	r3, [r3, #4]
}
    6f5a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6f5c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6f60:	4770      	bx	lr

00006f62 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6f62:	6843      	ldr	r3, [r0, #4]
    6f64:	685b      	ldr	r3, [r3, #4]
}
    6f66:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6f68:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6f6c:	4770      	bx	lr

00006f6e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6f6e:	6843      	ldr	r3, [r0, #4]
    6f70:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6f72:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6f76:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6f78:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6f7c:	2000      	movs	r0, #0
    6f7e:	4770      	bx	lr

00006f80 <gpio_nrfx_manage_callback>:
	return port->data;
    6f80:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6f82:	6858      	ldr	r0, [r3, #4]
{
    6f84:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6f86:	b158      	cbz	r0, 6fa0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6f88:	2400      	movs	r4, #0
    6f8a:	4281      	cmp	r1, r0
    6f8c:	d112      	bne.n	6fb4 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6f8e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6f90:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6f92:	b954      	cbnz	r4, 6faa <gpio_nrfx_manage_callback+0x2a>
    6f94:	428d      	cmp	r5, r1
	list->head = node;
    6f96:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6f98:	d100      	bne.n	6f9c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6f9a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6f9c:	2000      	movs	r0, #0
    6f9e:	6008      	str	r0, [r1, #0]
	if (set) {
    6fa0:	b96a      	cbnz	r2, 6fbe <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6fa2:	2000      	movs	r0, #0
}
    6fa4:	bd30      	pop	{r4, r5, pc}
    6fa6:	4628      	mov	r0, r5
    6fa8:	e7ef      	b.n	6f8a <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6faa:	428d      	cmp	r5, r1
	parent->next = child;
    6fac:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6fae:	bf08      	it	eq
    6fb0:	609c      	streq	r4, [r3, #8]
}
    6fb2:	e7f3      	b.n	6f9c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6fb4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6fb6:	4604      	mov	r4, r0
    6fb8:	2d00      	cmp	r5, #0
    6fba:	d1f4      	bne.n	6fa6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6fbc:	b13a      	cbz	r2, 6fce <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6fbe:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6fc0:	685a      	ldr	r2, [r3, #4]
    6fc2:	600a      	str	r2, [r1, #0]
	list->head = node;
    6fc4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6fc6:	2800      	cmp	r0, #0
    6fc8:	d1eb      	bne.n	6fa2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6fca:	6099      	str	r1, [r3, #8]
}
    6fcc:	e7ea      	b.n	6fa4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6fce:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6fd2:	e7e7      	b.n	6fa4 <gpio_nrfx_manage_callback+0x24>

00006fd4 <as5048a_sample_fetch>:
    switch(chan){
    6fd4:	2922      	cmp	r1, #34	; 0x22
    const struct as5048a_data *data = (struct as5048a_data *)dev->data;
    6fd6:	6902      	ldr	r2, [r0, #16]
    switch(chan){
    6fd8:	d105      	bne.n	6fe6 <as5048a_sample_fetch+0x12>
            ret = as5048a_reg_read(dev, AS5048_REG_ANGLE, (uint16_t*)&data->angle_raw);
    6fda:	6840      	ldr	r0, [r0, #4]
	return cfg->bus_io->read(&cfg->spi, addr, buf);
    6fdc:	69c3      	ldr	r3, [r0, #28]
    6fde:	f643 71ff 	movw	r1, #16383	; 0x3fff
    6fe2:	685b      	ldr	r3, [r3, #4]
    6fe4:	4718      	bx	r3
}
    6fe6:	f06f 0015 	mvn.w	r0, #21
    6fea:	4770      	bx	lr

00006fec <as5048a_channel_get>:
    if(chan == SENSOR_CHAN_ROTATION){
    6fec:	2922      	cmp	r1, #34	; 0x22
    struct as5048a_data *data = (struct as5048a_data *)dev->data;
    6fee:	6903      	ldr	r3, [r0, #16]
    if(chan == SENSOR_CHAN_ROTATION){
    6ff0:	d001      	beq.n	6ff6 <as5048a_channel_get+0xa>
    6ff2:	f7fc ba05 	b.w	3400 <as5048a_channel_get.part.0>
        val->val1 = data->angle_raw;
    6ff6:	881b      	ldrh	r3, [r3, #0]
    6ff8:	6013      	str	r3, [r2, #0]
}
    6ffa:	2000      	movs	r0, #0
    6ffc:	4770      	bx	lr

00006ffe <as5048_bus_check_spi>:
{
    6ffe:	b510      	push	{r4, lr}
    7000:	4604      	mov	r4, r0
	if (!device_is_ready(spec->bus)) {
    7002:	6800      	ldr	r0, [r0, #0]
    7004:	f000 fa9a 	bl	753c <z_device_is_ready>
    7008:	b140      	cbz	r0, 701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
	if (spec->config.cs &&
    700a:	68e3      	ldr	r3, [r4, #12]
    700c:	b90b      	cbnz	r3, 7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
	return spi_is_ready(bus) ? 0 : -ENODEV;
    700e:	2000      	movs	r0, #0
}
    7010:	bd10      	pop	{r4, pc}
	    !device_is_ready(spec->config.cs->gpio.port)) {
    7012:	6818      	ldr	r0, [r3, #0]
    7014:	f000 fa92 	bl	753c <z_device_is_ready>
	if (spec->config.cs &&
    7018:	2800      	cmp	r0, #0
    701a:	d1f8      	bne.n	700e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe>
	return spi_is_ready(bus) ? 0 : -ENODEV;
    701c:	f06f 0012 	mvn.w	r0, #18
    7020:	e7f6      	b.n	7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>

00007022 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7022:	b530      	push	{r4, r5, lr}
    7024:	4604      	mov	r4, r0
	while (*count) {
    7026:	6808      	ldr	r0, [r1, #0]
    7028:	b908      	cbnz	r0, 702e <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    702a:	6010      	str	r0, [r2, #0]
	return NULL;
    702c:	e004      	b.n	7038 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    702e:	6823      	ldr	r3, [r4, #0]
    7030:	685d      	ldr	r5, [r3, #4]
    7032:	b115      	cbz	r5, 703a <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    7034:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    7036:	6015      	str	r5, [r2, #0]
}
    7038:	bd30      	pop	{r4, r5, pc}
		++(*current);
    703a:	3308      	adds	r3, #8
		--(*count);
    703c:	3801      	subs	r0, #1
		++(*current);
    703e:	6023      	str	r3, [r4, #0]
		--(*count);
    7040:	6008      	str	r0, [r1, #0]
    7042:	e7f0      	b.n	7026 <spi_context_get_next_buf.constprop.0+0x4>

00007044 <z_log_msg2_static_create.constprop.0>:
    7044:	2300      	movs	r3, #0
    7046:	f7ff be4b 	b.w	6ce0 <z_impl_z_log_msg2_static_create>

0000704a <pinctrl_apply_state.constprop.0>:
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    704a:	b513      	push	{r0, r1, r4, lr}
	ret = pinctrl_lookup_state(config, id, &state);
    704c:	2100      	movs	r1, #0
    704e:	aa01      	add	r2, sp, #4
static inline int pinctrl_apply_state(const struct pinctrl_dev_config *config,
    7050:	4604      	mov	r4, r0
	ret = pinctrl_lookup_state(config, id, &state);
    7052:	f000 f91a 	bl	728a <pinctrl_lookup_state>
	if (ret < 0) {
    7056:	2800      	cmp	r0, #0
    7058:	db05      	blt.n	7066 <pinctrl_apply_state.constprop.0+0x1c>
	return pinctrl_apply_state_direct(config, state);
    705a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    705c:	6822      	ldr	r2, [r4, #0]
    705e:	7919      	ldrb	r1, [r3, #4]
    7060:	6818      	ldr	r0, [r3, #0]
    7062:	f000 f954 	bl	730e <pinctrl_configure_pins>
}
    7066:	b002      	add	sp, #8
    7068:	bd10      	pop	{r4, pc}

0000706a <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    706a:	4603      	mov	r3, r0
    706c:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    706e:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7070:	7919      	ldrb	r1, [r3, #4]
    7072:	2301      	movs	r3, #1
    7074:	fa03 f101 	lsl.w	r1, r3, r1
    7078:	6903      	ldr	r3, [r0, #16]
    707a:	681b      	ldr	r3, [r3, #0]
    707c:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    707e:	bf18      	it	ne
    7080:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7084:	b112      	cbz	r2, 708c <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    7086:	6883      	ldr	r3, [r0, #8]
    7088:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    708a:	4718      	bx	r3
    708c:	6883      	ldr	r3, [r0, #8]
    708e:	691b      	ldr	r3, [r3, #16]
    7090:	e7fb      	b.n	708a <gpio_pin_set_dt.isra.0+0x20>

00007092 <_spi_context_cs_control>:
{
    7092:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7094:	6803      	ldr	r3, [r0, #0]
{
    7096:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7098:	b1e3      	cbz	r3, 70d4 <_spi_context_cs_control+0x42>
    709a:	6898      	ldr	r0, [r3, #8]
    709c:	b1d0      	cbz	r0, 70d4 <_spi_context_cs_control+0x42>
    709e:	6805      	ldr	r5, [r0, #0]
    70a0:	b1c5      	cbz	r5, 70d4 <_spi_context_cs_control+0x42>
		if (on) {
    70a2:	b149      	cbz	r1, 70b8 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    70a4:	2101      	movs	r1, #1
    70a6:	f7ff ffe0 	bl	706a <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    70aa:	6823      	ldr	r3, [r4, #0]
    70ac:	689b      	ldr	r3, [r3, #8]
    70ae:	6898      	ldr	r0, [r3, #8]
}
    70b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    70b4:	f000 bb81 	b.w	77ba <z_impl_k_busy_wait>
			if (!force_off &&
    70b8:	b912      	cbnz	r2, 70c0 <_spi_context_cs_control+0x2e>
    70ba:	889b      	ldrh	r3, [r3, #4]
    70bc:	04db      	lsls	r3, r3, #19
    70be:	d409      	bmi.n	70d4 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    70c0:	6880      	ldr	r0, [r0, #8]
    70c2:	f000 fb7a 	bl	77ba <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    70c6:	6823      	ldr	r3, [r4, #0]
    70c8:	2100      	movs	r1, #0
    70ca:	6898      	ldr	r0, [r3, #8]
}
    70cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    70d0:	f7ff bfcb 	b.w	706a <gpio_pin_set_dt.isra.0>
}
    70d4:	bd38      	pop	{r3, r4, r5, pc}

000070d6 <spi_context_unlock_unconditionally>:
{
    70d6:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    70d8:	2201      	movs	r2, #1
    70da:	2100      	movs	r1, #0
{
    70dc:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    70de:	f7ff ffd8 	bl	7092 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    70e2:	69a3      	ldr	r3, [r4, #24]
    70e4:	b933      	cbnz	r3, 70f4 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    70e6:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    70e8:	f104 0010 	add.w	r0, r4, #16
}
    70ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    70f0:	f7fe bc62 	b.w	59b8 <z_impl_k_sem_give>
    70f4:	bd10      	pop	{r4, pc}

000070f6 <spi_nrfx_release>:
#endif /* CONFIG_SPI_ASYNC */

static int spi_nrfx_release(const struct device *dev,
			    const struct spi_config *spi_cfg)
{
	struct spi_nrfx_data *dev_data = dev->data;
    70f6:	6900      	ldr	r0, [r0, #16]

	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    70f8:	6803      	ldr	r3, [r0, #0]
    70fa:	428b      	cmp	r3, r1
{
    70fc:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    70fe:	d106      	bne.n	710e <spi_nrfx_release+0x18>
		return -EINVAL;
	}

	if (dev_data->busy) {
    7100:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    7104:	b934      	cbnz	r4, 7114 <spi_nrfx_release+0x1e>
		return -EBUSY;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    7106:	f7ff ffe6 	bl	70d6 <spi_context_unlock_unconditionally>

	return 0;
    710a:	4620      	mov	r0, r4
}
    710c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    710e:	f06f 0015 	mvn.w	r0, #21
    7112:	e7fb      	b.n	710c <spi_nrfx_release+0x16>
		return -EBUSY;
    7114:	f06f 000f 	mvn.w	r0, #15
    7118:	e7f8      	b.n	710c <spi_nrfx_release+0x16>

0000711a <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPI
SPI_NRFX_SPI_DEVICE(0);
    711a:	b538      	push	{r3, r4, r5, lr}
    711c:	4604      	mov	r4, r0
    711e:	6905      	ldr	r5, [r0, #16]
    7120:	2200      	movs	r2, #0
    7122:	2101      	movs	r1, #1
    7124:	2003      	movs	r0, #3
    7126:	f7fb f8d7 	bl	22d8 <z_arm_irq_priority_set>
    712a:	6863      	ldr	r3, [r4, #4]
    712c:	69d8      	ldr	r0, [r3, #28]
    712e:	f7ff ff8c 	bl	704a <pinctrl_apply_state.constprop.0>
    7132:	2800      	cmp	r0, #0
    7134:	db08      	blt.n	7148 <spi_0_init+0x2e>
    7136:	4628      	mov	r0, r5
    7138:	f7fc fad6 	bl	36e8 <spi_context_cs_configure_all>
    713c:	2800      	cmp	r0, #0
    713e:	db03      	blt.n	7148 <spi_0_init+0x2e>
    7140:	4628      	mov	r0, r5
    7142:	f7ff ffc8 	bl	70d6 <spi_context_unlock_unconditionally>
    7146:	2000      	movs	r0, #0
    7148:	bd38      	pop	{r3, r4, r5, pc}

0000714a <spi_1_init>:
#endif

#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
    714a:	b538      	push	{r3, r4, r5, lr}
    714c:	4604      	mov	r4, r0
    714e:	6905      	ldr	r5, [r0, #16]
    7150:	2200      	movs	r2, #0
    7152:	2101      	movs	r1, #1
    7154:	2004      	movs	r0, #4
    7156:	f7fb f8bf 	bl	22d8 <z_arm_irq_priority_set>
    715a:	6863      	ldr	r3, [r4, #4]
    715c:	69d8      	ldr	r0, [r3, #28]
    715e:	f7ff ff74 	bl	704a <pinctrl_apply_state.constprop.0>
    7162:	2800      	cmp	r0, #0
    7164:	db08      	blt.n	7178 <spi_1_init+0x2e>
    7166:	4628      	mov	r0, r5
    7168:	f7fc fabe 	bl	36e8 <spi_context_cs_configure_all>
    716c:	2800      	cmp	r0, #0
    716e:	db03      	blt.n	7178 <spi_1_init+0x2e>
    7170:	4628      	mov	r0, r5
    7172:	f7ff ffb0 	bl	70d6 <spi_context_unlock_unconditionally>
    7176:	2000      	movs	r0, #0
    7178:	bd38      	pop	{r3, r4, r5, pc}

0000717a <spi_2_init>:
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
    717a:	b538      	push	{r3, r4, r5, lr}
    717c:	4604      	mov	r4, r0
    717e:	6905      	ldr	r5, [r0, #16]
    7180:	2200      	movs	r2, #0
    7182:	2101      	movs	r1, #1
    7184:	2023      	movs	r0, #35	; 0x23
    7186:	f7fb f8a7 	bl	22d8 <z_arm_irq_priority_set>
    718a:	6863      	ldr	r3, [r4, #4]
    718c:	69d8      	ldr	r0, [r3, #28]
    718e:	f7ff ff5c 	bl	704a <pinctrl_apply_state.constprop.0>
    7192:	2800      	cmp	r0, #0
    7194:	db08      	blt.n	71a8 <spi_2_init+0x2e>
    7196:	4628      	mov	r0, r5
    7198:	f7fc faa6 	bl	36e8 <spi_context_cs_configure_all>
    719c:	2800      	cmp	r0, #0
    719e:	db03      	blt.n	71a8 <spi_2_init+0x2e>
    71a0:	4628      	mov	r0, r5
    71a2:	f7ff ff98 	bl	70d6 <spi_context_unlock_unconditionally>
    71a6:	2000      	movs	r0, #0
    71a8:	bd38      	pop	{r3, r4, r5, pc}

000071aa <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    71aa:	6902      	ldr	r2, [r0, #16]
{
    71ac:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    71ae:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    71b2:	e883 0003 	stmia.w	r3, {r0, r1}
}
    71b6:	2000      	movs	r0, #0
    71b8:	4770      	bx	lr

000071ba <uarte_nrfx_err_check>:
	return config->uarte_regs;
    71ba:	6843      	ldr	r3, [r0, #4]
    71bc:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    71be:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    71c2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    71c6:	4770      	bx	lr

000071c8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    71c8:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    71ca:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    71cc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71ce:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    71d2:	b148      	cbz	r0, 71e8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    71d4:	7c52      	ldrb	r2, [r2, #17]
    71d6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71d8:	2000      	movs	r0, #0
    71da:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    71de:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    71e2:	2201      	movs	r2, #1
    71e4:	601a      	str	r2, [r3, #0]
	return 0;
    71e6:	4770      	bx	lr
		return -1;
    71e8:	f04f 30ff 	mov.w	r0, #4294967295
}
    71ec:	4770      	bx	lr

000071ee <is_tx_ready.isra.0>:
	return config->uarte_regs;
    71ee:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    71f0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71f2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    71f6:	b940      	cbnz	r0, 720a <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    71f8:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    71fa:	079b      	lsls	r3, r3, #30
    71fc:	d406      	bmi.n	720c <is_tx_ready.isra.0+0x1e>
    71fe:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    7202:	3800      	subs	r0, #0
    7204:	bf18      	it	ne
    7206:	2001      	movne	r0, #1
    7208:	4770      	bx	lr
    720a:	2001      	movs	r0, #1
}
    720c:	4770      	bx	lr

0000720e <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    720e:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    7210:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7212:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    7216:	05c9      	lsls	r1, r1, #23
    7218:	d518      	bpl.n	724c <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    721a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    721e:	b1a9      	cbz	r1, 724c <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    7220:	f04f 0020 	mov.w	r0, #32
    7224:	f3ef 8111 	mrs	r1, BASEPRI
    7228:	f380 8812 	msr	BASEPRI_MAX, r0
    722c:	f3bf 8f6f 	isb	sy
    7230:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    7234:	b130      	cbz	r0, 7244 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7236:	2000      	movs	r0, #0
    7238:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    723c:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7240:	2001      	movs	r0, #1
    7242:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    7244:	f381 8811 	msr	BASEPRI, r1
    7248:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    724c:	6852      	ldr	r2, [r2, #4]
    724e:	06d2      	lsls	r2, r2, #27
    7250:	d515      	bpl.n	727e <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    7252:	f04f 0120 	mov.w	r1, #32
    7256:	f3ef 8211 	mrs	r2, BASEPRI
    725a:	f381 8812 	msr	BASEPRI_MAX, r1
    725e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7262:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    7266:	b111      	cbz	r1, 726e <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7268:	2100      	movs	r1, #0
    726a:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    726e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    7272:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    7276:	f382 8811 	msr	BASEPRI, r2
    727a:	f3bf 8f6f 	isb	sy
}
    727e:	4770      	bx	lr

00007280 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7280:	4770      	bx	lr

00007282 <sys_clock_cycle_get_32>:
{
    7282:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7284:	f7fc fed0 	bl	4028 <z_nrf_rtc_timer_read>
}
    7288:	bd08      	pop	{r3, pc}

0000728a <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    728a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    728c:	6843      	ldr	r3, [r0, #4]
    728e:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7290:	7a03      	ldrb	r3, [r0, #8]
    7292:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7296:	3b01      	subs	r3, #1
    7298:	00db      	lsls	r3, r3, #3
    729a:	6845      	ldr	r5, [r0, #4]
    729c:	6814      	ldr	r4, [r2, #0]
    729e:	441d      	add	r5, r3
    72a0:	42ac      	cmp	r4, r5
    72a2:	d902      	bls.n	72aa <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    72a4:	f06f 0001 	mvn.w	r0, #1
}
    72a8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    72aa:	7965      	ldrb	r5, [r4, #5]
    72ac:	428d      	cmp	r5, r1
    72ae:	d002      	beq.n	72b6 <pinctrl_lookup_state+0x2c>
		(*state)++;
    72b0:	3408      	adds	r4, #8
    72b2:	6014      	str	r4, [r2, #0]
    72b4:	e7f1      	b.n	729a <pinctrl_lookup_state+0x10>
			return 0;
    72b6:	2000      	movs	r0, #0
    72b8:	e7f6      	b.n	72a8 <pinctrl_lookup_state+0x1e>

000072ba <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    72ba:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    72be:	2001      	movs	r0, #1
    72c0:	4098      	lsls	r0, r3
    72c2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    72c6:	b911      	cbnz	r1, 72ce <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    72c8:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    72cc:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    72ce:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    72d2:	4770      	bx	lr

000072d4 <nrf_pin_configure>:
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    72d4:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    72d8:	2b00      	cmp	r3, #0
{
    72da:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    72dc:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    72e0:	bf08      	it	eq
    72e2:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    72e4:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    72e8:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    72ec:	bf18      	it	ne
    72ee:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    72f0:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    72f4:	ea42 0201 	orr.w	r2, r2, r1
    72f8:	bf18      	it	ne
    72fa:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    72fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7300:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7304:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7308:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    730c:	bd10      	pop	{r4, pc}

0000730e <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    730e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7312:	4614      	mov	r4, r2
    7314:	4680      	mov	r8, r0
    7316:	eb00 0781 	add.w	r7, r0, r1, lsl #2
			break;
		case NRF_FUN_PWM_OUT3:
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
					   NRF_GET_INVERT(pins[i]));
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    731a:	2501      	movs	r5, #1
    p_reg->OUTCLR = clr_mask;
    731c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7320:	45b8      	cmp	r8, r7
    7322:	d102      	bne.n	732a <pinctrl_configure_pins+0x1c>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7324:	2000      	movs	r0, #0
}
    7326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    732a:	f8d8 3000 	ldr.w	r3, [r8]
    732e:	0c1a      	lsrs	r2, r3, #16
    7330:	2a19      	cmp	r2, #25
    7332:	d875      	bhi.n	7420 <pinctrl_configure_pins+0x112>
    7334:	e8df f002 	tbb	[pc, r2]
    7338:	49221b0d 	.word	0x49221b0d
    733c:	74493c27 	.word	0x74493c27
    7340:	4e747474 	.word	0x4e747474
    7344:	74747453 	.word	0x74747453
    7348:	74747474 	.word	0x74747474
    734c:	65587474 	.word	0x65587474
    7350:	6f6a      	.short	0x6f6a
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    7352:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7356:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    735a:	f8d8 3000 	ldr.w	r3, [r8]
    735e:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7362:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
    7366:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    736a:	2201      	movs	r2, #1
    736c:	e004      	b.n	7378 <pinctrl_configure_pins+0x6a>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    736e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7372:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7376:	2200      	movs	r2, #0
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7378:	4611      	mov	r1, r2
    737a:	e012      	b.n	73a2 <pinctrl_configure_pins+0x94>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    737c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7380:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    7384:	e7e9      	b.n	735a <pinctrl_configure_pins+0x4c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7386:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    738a:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    738e:	f8d8 3000 	ldr.w	r3, [r8]
    7392:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7396:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    739a:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    739e:	2200      	movs	r2, #0
    73a0:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    73a2:	f8d8 0000 	ldr.w	r0, [r8]
    73a6:	f7ff ff95 	bl	72d4 <nrf_pin_configure>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    73aa:	f108 0804 	add.w	r8, r8, #4
    73ae:	e7b7      	b.n	7320 <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    73b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73b4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    73b8:	f8d8 3000 	ldr.w	r3, [r8]
    73bc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    73c0:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    73c4:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    73c8:	e7cf      	b.n	736a <pinctrl_configure_pins+0x5c>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    73ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73ce:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    73d2:	e7d0      	b.n	7376 <pinctrl_configure_pins+0x68>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    73d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73d8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    73dc:	e7cb      	b.n	7376 <pinctrl_configure_pins+0x68>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    73de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73e2:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    73e6:	e7c6      	b.n	7376 <pinctrl_configure_pins+0x68>
			NRF_PSEL_PWM(reg, OUT[0]) = NRF_GET_PIN(pins[i]);
    73e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    73ec:	f8c4 3560 	str.w	r3, [r4, #1376]	; 0x560
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    73f0:	f8d8 0000 	ldr.w	r0, [r8]
    73f4:	f3c0 3140 	ubfx	r1, r0, #13, #1
    73f8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    73fc:	f7ff ff5d 	bl	72ba <nrf_gpio_pin_write>
    7400:	e7b3      	b.n	736a <pinctrl_configure_pins+0x5c>
			NRF_PSEL_PWM(reg, OUT[1]) = NRF_GET_PIN(pins[i]);
    7402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7406:	f8c4 3564 	str.w	r3, [r4, #1380]	; 0x564
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    740a:	e7f1      	b.n	73f0 <pinctrl_configure_pins+0xe2>
			NRF_PSEL_PWM(reg, OUT[2]) = NRF_GET_PIN(pins[i]);
    740c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7410:	f8c4 3568 	str.w	r3, [r4, #1384]	; 0x568
			nrf_gpio_pin_write(NRF_GET_PIN(pins[i]),
    7414:	e7ec      	b.n	73f0 <pinctrl_configure_pins+0xe2>
			NRF_PSEL_PWM(reg, OUT[3]) = NRF_GET_PIN(pins[i]);
    7416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    741a:	f8c4 356c 	str.w	r3, [r4, #1388]	; 0x56c
    741e:	e7e7      	b.n	73f0 <pinctrl_configure_pins+0xe2>
		switch (NRF_GET_FUN(pins[i])) {
    7420:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7424:	e77f      	b.n	7326 <pinctrl_configure_pins+0x18>

00007426 <nrf52_errata_108>:
            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    7426:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    742a:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
    742e:	1c42      	adds	r2, r0, #1
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    7430:	bf04      	itt	eq
    7432:	f04f 4370 	moveq.w	r3, #4026531840	; 0xf0000000
    7436:	f893 0fe0 	ldrbeq.w	r0, [r3, #4064]	; 0xfe0
}
    743a:	1f83      	subs	r3, r0, #6
    743c:	4258      	negs	r0, r3
    743e:	4158      	adcs	r0, r3
    7440:	4770      	bx	lr

00007442 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    7442:	4700      	bx	r0

00007444 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    7444:	f000 b9b9 	b.w	77ba <z_impl_k_busy_wait>

00007448 <nrfx_clock_enable>:
{
    7448:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    744a:	2000      	movs	r0, #0
    744c:	f7fa ff36 	bl	22bc <arch_irq_is_enabled>
    7450:	b908      	cbnz	r0, 7456 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7452:	f7fa ff0f 	bl	2274 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7456:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    745a:	2200      	movs	r2, #0
    745c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7460:	bd08      	pop	{r3, pc}

00007462 <nrfx_clock_stop>:
    clock_stop(domain);
    7462:	f7fd b957 	b.w	4714 <clock_stop>

00007466 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    7466:	f000 001f 	and.w	r0, r0, #31
    746a:	0080      	lsls	r0, r0, #2
    746c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7470:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    7474:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7478:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    747c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    7480:	4770      	bx	lr

00007482 <transfer_byte>:
{
    7482:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
    7484:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7488:	698a      	ldr	r2, [r1, #24]
    748a:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
    748c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
    7490:	6a0b      	ldr	r3, [r1, #32]
    7492:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
    7494:	bf3e      	ittt	cc
    7496:	694a      	ldrcc	r2, [r1, #20]
    7498:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
    749c:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
    749e:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
    74a0:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
    74a4:	1c53      	adds	r3, r2, #1
    74a6:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
    74a8:	3202      	adds	r2, #2
    if (p_cb->abort)
    74aa:	b13c      	cbz	r4, 74bc <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    74ac:	690c      	ldr	r4, [r1, #16]
    74ae:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    74b0:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
    74b2:	bf38      	it	cc
    74b4:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    74b6:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
    74b8:	bf88      	it	hi
    74ba:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
    74bc:	690d      	ldr	r5, [r1, #16]
    74be:	4295      	cmp	r5, r2
    74c0:	d905      	bls.n	74ce <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
    74c2:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
    74c4:	5c9b      	ldrb	r3, [r3, r2]
    74c6:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    74ca:	2001      	movs	r0, #1
    74cc:	e00a      	b.n	74e4 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
    74ce:	698c      	ldr	r4, [r1, #24]
    74d0:	4294      	cmp	r4, r2
    74d2:	d901      	bls.n	74d8 <transfer_byte+0x56>
    74d4:	7fcb      	ldrb	r3, [r1, #31]
    74d6:	e7f6      	b.n	74c6 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
    74d8:	42ab      	cmp	r3, r5
    74da:	d3f6      	bcc.n	74ca <transfer_byte+0x48>
    74dc:	42a3      	cmp	r3, r4
    74de:	bf2c      	ite	cs
    74e0:	2000      	movcs	r0, #0
    74e2:	2001      	movcc	r0, #1
}
    74e4:	b003      	add	sp, #12
    74e6:	bd30      	pop	{r4, r5, pc}

000074e8 <irq_handler>:
{
    74e8:	4603      	mov	r3, r0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74ea:	2200      	movs	r2, #0
    74ec:	b510      	push	{r4, lr}
    74ee:	f8c0 2108 	str.w	r2, [r0, #264]	; 0x108
    74f2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
    74f6:	460c      	mov	r4, r1
    if (!transfer_byte(p_spi, p_cb))
    74f8:	f7ff ffc3 	bl	7482 <transfer_byte>
    74fc:	b9a8      	cbnz	r0, 752a <irq_handler+0x42>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
    74fe:	7f8b      	ldrb	r3, [r1, #30]
    7500:	2bff      	cmp	r3, #255	; 0xff
    7502:	d008      	beq.n	7516 <irq_handler+0x2e>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7504:	2201      	movs	r2, #1
    *p_pin = pin_number & 0x1F;
    7506:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    750a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->OUTSET = set_mask;
    750e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    7512:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    p_cb->transfer_in_progress = false;
    7516:	2300      	movs	r3, #0
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7518:	4620      	mov	r0, r4
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
    751a:	7223      	strb	r3, [r4, #8]
    p_cb->transfer_in_progress = false;
    751c:	7763      	strb	r3, [r4, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    751e:	6861      	ldr	r1, [r4, #4]
    7520:	f850 3b08 	ldr.w	r3, [r0], #8
}
    7524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7528:	4718      	bx	r3
}
    752a:	bd10      	pop	{r4, pc}

0000752c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    752c:	f7fd bea4 	b.w	5278 <_DoInit>

00007530 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    7530:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    7532:	f7ff fffb 	bl	752c <SEGGER_RTT_Init>

	return 0;
}
    7536:	2000      	movs	r0, #0
    7538:	bd08      	pop	{r3, pc}

0000753a <z_device_state_init>:
}
    753a:	4770      	bx	lr

0000753c <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    753c:	b138      	cbz	r0, 754e <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    753e:	68c3      	ldr	r3, [r0, #12]
    7540:	8818      	ldrh	r0, [r3, #0]
    7542:	f3c0 0008 	ubfx	r0, r0, #0, #9
    7546:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    754a:	4258      	negs	r0, r3
    754c:	4158      	adcs	r0, r3
}
    754e:	4770      	bx	lr

00007550 <z_early_memset>:
	(void) memset(dst, c, n);
    7550:	f7ff bc42 	b.w	6dd8 <memset>

00007554 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    7554:	f7ff bc35 	b.w	6dc2 <memcpy>

00007558 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7558:	f3ef 8005 	mrs	r0, IPSR
}
    755c:	3800      	subs	r0, #0
    755e:	bf18      	it	ne
    7560:	2001      	movne	r0, #1
    7562:	4770      	bx	lr

00007564 <z_impl_k_thread_name_set>:
}
    7564:	f06f 0057 	mvn.w	r0, #87	; 0x57
    7568:	4770      	bx	lr

0000756a <k_thread_name_get>:
}
    756a:	2000      	movs	r0, #0
    756c:	4770      	bx	lr

0000756e <z_pm_save_idle_exit>:
{
    756e:	b508      	push	{r3, lr}
	pm_system_resume();
    7570:	f7fa fce4 	bl	1f3c <pm_system_resume>
}
    7574:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    7578:	f7ff be82 	b.w	7280 <sys_clock_idle_exit>

0000757c <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    757c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    7580:	428b      	cmp	r3, r1
    7582:	d001      	beq.n	7588 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    7584:	f7fe bc0e 	b.w	5da4 <z_set_prio>
}
    7588:	2000      	movs	r0, #0
    758a:	4770      	bx	lr

0000758c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    758c:	b13a      	cbz	r2, 759e <z_impl_k_sem_init+0x12>
    758e:	428a      	cmp	r2, r1
    7590:	d305      	bcc.n	759e <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    7592:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    7596:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    759a:	2000      	movs	r0, #0
    759c:	4770      	bx	lr
		return -EINVAL;
    759e:	f06f 0015 	mvn.w	r0, #21
}
    75a2:	4770      	bx	lr

000075a4 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    75a4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    75a8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    75aa:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    75ac:	2300      	movs	r3, #0
	node->prev = NULL;
    75ae:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    75b2:	4770      	bx	lr

000075b4 <unpend_thread_no_timeout>:
{
    75b4:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    75b6:	f7ff fff5 	bl	75a4 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    75ba:	7b43      	ldrb	r3, [r0, #13]
    75bc:	f023 0302 	bic.w	r3, r3, #2
    75c0:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    75c2:	2300      	movs	r3, #0
    75c4:	6083      	str	r3, [r0, #8]
}
    75c6:	bd08      	pop	{r3, pc}

000075c8 <z_unpend_thread_no_timeout>:
{
    75c8:	b508      	push	{r3, lr}
	__asm__ volatile(
    75ca:	f04f 0320 	mov.w	r3, #32
    75ce:	f3ef 8111 	mrs	r1, BASEPRI
    75d2:	f383 8812 	msr	BASEPRI_MAX, r3
    75d6:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    75da:	f7ff ffeb 	bl	75b4 <unpend_thread_no_timeout>
	__asm__ volatile(
    75de:	f381 8811 	msr	BASEPRI, r1
    75e2:	f3bf 8f6f 	isb	sy
}
    75e6:	bd08      	pop	{r3, pc}

000075e8 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    75e8:	4603      	mov	r3, r0
    75ea:	b920      	cbnz	r0, 75f6 <z_reschedule_irqlock+0xe>
    75ec:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    75f0:	b90a      	cbnz	r2, 75f6 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    75f2:	f7fa bea9 	b.w	2348 <arch_swap>
    75f6:	f383 8811 	msr	BASEPRI, r3
    75fa:	f3bf 8f6f 	isb	sy
}
    75fe:	4770      	bx	lr

00007600 <z_reschedule_unlocked>:
	__asm__ volatile(
    7600:	f04f 0320 	mov.w	r3, #32
    7604:	f3ef 8011 	mrs	r0, BASEPRI
    7608:	f383 8812 	msr	BASEPRI_MAX, r3
    760c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7610:	f7ff bfea 	b.w	75e8 <z_reschedule_irqlock>

00007614 <z_priq_dumb_best>:
{
    7614:	4603      	mov	r3, r0
	return list->head == list;
    7616:	6800      	ldr	r0, [r0, #0]
}
    7618:	4283      	cmp	r3, r0
    761a:	bf08      	it	eq
    761c:	2000      	moveq	r0, #0
    761e:	4770      	bx	lr

00007620 <z_ready_thread>:
{
    7620:	b510      	push	{r4, lr}
    7622:	f04f 0320 	mov.w	r3, #32
    7626:	f3ef 8411 	mrs	r4, BASEPRI
    762a:	f383 8812 	msr	BASEPRI_MAX, r3
    762e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7632:	f7fe fb11 	bl	5c58 <ready_thread>
	__asm__ volatile(
    7636:	f384 8811 	msr	BASEPRI, r4
    763a:	f3bf 8f6f 	isb	sy
}
    763e:	bd10      	pop	{r4, pc}

00007640 <z_thread_timeout>:
{
    7640:	b510      	push	{r4, lr}
    7642:	4601      	mov	r1, r0
	__asm__ volatile(
    7644:	f04f 0320 	mov.w	r3, #32
    7648:	f3ef 8411 	mrs	r4, BASEPRI
    764c:	f383 8812 	msr	BASEPRI_MAX, r3
    7650:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7654:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    7658:	f013 0f28 	tst.w	r3, #40	; 0x28
    765c:	d10d      	bne.n	767a <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    765e:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7662:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7664:	b10b      	cbz	r3, 766a <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7666:	f7ff ffa5 	bl	75b4 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    766a:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    766e:	f023 0314 	bic.w	r3, r3, #20
    7672:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7676:	f7fe faef 	bl	5c58 <ready_thread>
	__asm__ volatile(
    767a:	f384 8811 	msr	BASEPRI, r4
    767e:	f3bf 8f6f 	isb	sy
}
    7682:	bd10      	pop	{r4, pc}

00007684 <add_to_waitq_locked>:
{
    7684:	b538      	push	{r3, r4, r5, lr}
    7686:	4604      	mov	r4, r0
    7688:	460d      	mov	r5, r1
	unready_thread(thread);
    768a:	f7fe fb39 	bl	5d00 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    768e:	7b63      	ldrb	r3, [r4, #13]
    7690:	f043 0302 	orr.w	r3, r3, #2
    7694:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    7696:	b195      	cbz	r5, 76be <add_to_waitq_locked+0x3a>
    7698:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    769a:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    769c:	429d      	cmp	r5, r3
    769e:	d015      	beq.n	76cc <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76a0:	b1a3      	cbz	r3, 76cc <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    76a2:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    76a6:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    76aa:	4291      	cmp	r1, r2
    76ac:	d008      	beq.n	76c0 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    76ae:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    76b0:	2a00      	cmp	r2, #0
    76b2:	dd05      	ble.n	76c0 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    76b4:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    76b6:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    76ba:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    76bc:	605c      	str	r4, [r3, #4]
}
    76be:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    76c0:	686a      	ldr	r2, [r5, #4]
    76c2:	4293      	cmp	r3, r2
    76c4:	d002      	beq.n	76cc <add_to_waitq_locked+0x48>
    76c6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    76c8:	2b00      	cmp	r3, #0
    76ca:	d1ec      	bne.n	76a6 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    76cc:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    76ce:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    76d2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    76d4:	606c      	str	r4, [r5, #4]
}
    76d6:	e7f2      	b.n	76be <add_to_waitq_locked+0x3a>

000076d8 <z_unpend1_no_timeout>:
{
    76d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    76da:	f04f 0320 	mov.w	r3, #32
    76de:	f3ef 8411 	mrs	r4, BASEPRI
    76e2:	f383 8812 	msr	BASEPRI_MAX, r3
    76e6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    76ea:	f7ff ff93 	bl	7614 <z_priq_dumb_best>
		if (thread != NULL) {
    76ee:	4601      	mov	r1, r0
    76f0:	b108      	cbz	r0, 76f6 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    76f2:	f7ff ff5f 	bl	75b4 <unpend_thread_no_timeout>
	__asm__ volatile(
    76f6:	f384 8811 	msr	BASEPRI, r4
    76fa:	f3bf 8f6f 	isb	sy
}
    76fe:	4608      	mov	r0, r1
    7700:	bd10      	pop	{r4, pc}

00007702 <z_unpend_first_thread>:
{
    7702:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7704:	f04f 0320 	mov.w	r3, #32
    7708:	f3ef 8511 	mrs	r5, BASEPRI
    770c:	f383 8812 	msr	BASEPRI_MAX, r3
    7710:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7714:	f7ff ff7e 	bl	7614 <z_priq_dumb_best>
		if (thread != NULL) {
    7718:	4604      	mov	r4, r0
    771a:	b120      	cbz	r0, 7726 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    771c:	f7ff ff4a 	bl	75b4 <unpend_thread_no_timeout>
    7720:	3018      	adds	r0, #24
    7722:	f000 f806 	bl	7732 <z_abort_timeout>
	__asm__ volatile(
    7726:	f385 8811 	msr	BASEPRI, r5
    772a:	f3bf 8f6f 	isb	sy
}
    772e:	4620      	mov	r0, r4
    7730:	bd38      	pop	{r3, r4, r5, pc}

00007732 <z_abort_timeout>:
{
    7732:	b510      	push	{r4, lr}
	__asm__ volatile(
    7734:	f04f 0220 	mov.w	r2, #32
    7738:	f3ef 8411 	mrs	r4, BASEPRI
    773c:	f382 8812 	msr	BASEPRI_MAX, r2
    7740:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7744:	6803      	ldr	r3, [r0, #0]
    7746:	b13b      	cbz	r3, 7758 <z_abort_timeout+0x26>
			remove_timeout(to);
    7748:	f7fe fd12 	bl	6170 <remove_timeout>
			ret = 0;
    774c:	2000      	movs	r0, #0
	__asm__ volatile(
    774e:	f384 8811 	msr	BASEPRI, r4
    7752:	f3bf 8f6f 	isb	sy
}
    7756:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    7758:	f06f 0015 	mvn.w	r0, #21
    775c:	e7f7      	b.n	774e <z_abort_timeout+0x1c>

0000775e <z_get_next_timeout_expiry>:
{
    775e:	b510      	push	{r4, lr}
	__asm__ volatile(
    7760:	f04f 0320 	mov.w	r3, #32
    7764:	f3ef 8411 	mrs	r4, BASEPRI
    7768:	f383 8812 	msr	BASEPRI_MAX, r3
    776c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    7770:	f7fe fcd8 	bl	6124 <next_timeout>
	__asm__ volatile(
    7774:	f384 8811 	msr	BASEPRI, r4
    7778:	f3bf 8f6f 	isb	sy
}
    777c:	bd10      	pop	{r4, pc}

0000777e <z_set_timeout_expiry>:
{
    777e:	b570      	push	{r4, r5, r6, lr}
    7780:	4604      	mov	r4, r0
    7782:	460d      	mov	r5, r1
	__asm__ volatile(
    7784:	f04f 0320 	mov.w	r3, #32
    7788:	f3ef 8611 	mrs	r6, BASEPRI
    778c:	f383 8812 	msr	BASEPRI_MAX, r3
    7790:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    7794:	f7fe fcc6 	bl	6124 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    7798:	2801      	cmp	r0, #1
    779a:	dd05      	ble.n	77a8 <z_set_timeout_expiry+0x2a>
    779c:	42a0      	cmp	r0, r4
    779e:	db03      	blt.n	77a8 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    77a0:	4629      	mov	r1, r5
    77a2:	4620      	mov	r0, r4
    77a4:	f7fc fdbc 	bl	4320 <sys_clock_set_timeout>
	__asm__ volatile(
    77a8:	f386 8811 	msr	BASEPRI, r6
    77ac:	f3bf 8f6f 	isb	sy
}
    77b0:	bd70      	pop	{r4, r5, r6, pc}

000077b2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    77b2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    77b4:	f7fe fdcc 	bl	6350 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    77b8:	bd08      	pop	{r3, pc}

000077ba <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    77ba:	b108      	cbz	r0, 77c0 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    77bc:	f7fb bb22 	b.w	2e04 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    77c0:	4770      	bx	lr

000077c2 <k_timer_init>:
	timer->status = 0U;
    77c2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    77c4:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    77c8:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    77cc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    77d0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    77d4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    77d6:	6343      	str	r3, [r0, #52]	; 0x34
}
    77d8:	4770      	bx	lr

000077da <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    77da:	b510      	push	{r4, lr}
    77dc:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    77de:	f7ff ffa8 	bl	7732 <z_abort_timeout>

	if (inactive) {
    77e2:	b9b0      	cbnz	r0, 7812 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    77e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    77e6:	b10b      	cbz	r3, 77ec <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    77e8:	4620      	mov	r0, r4
    77ea:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    77ec:	f104 0018 	add.w	r0, r4, #24
    77f0:	f7ff ff72 	bl	76d8 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    77f4:	b168      	cbz	r0, 7812 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    77f6:	f7ff ff13 	bl	7620 <z_ready_thread>
	__asm__ volatile(
    77fa:	f04f 0320 	mov.w	r3, #32
    77fe:	f3ef 8011 	mrs	r0, BASEPRI
    7802:	f383 8812 	msr	BASEPRI_MAX, r3
    7806:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    780a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    780e:	f7ff beeb 	b.w	75e8 <z_reschedule_irqlock>
    7812:	bd10      	pop	{r4, pc}

00007814 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7814:	4770      	bx	lr
	...

00007818 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7818:	f7fc bdf0 	b.w	43fc <SystemInit>
